
mini_HMI_screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  080034bc  080034bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003740  08003740  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003740  08003740  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003740  08003740  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003740  08003740  00013740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000010  08003758  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08003758  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce4d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c2  00000000  00000000  0002ce86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002f548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  00030020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c03  00000000  00000000  000309f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d194  00000000  00000000  000485f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083153  00000000  00000000  00055787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d88da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d4  00000000  00000000  000d8930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080034a4 	.word	0x080034a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080034a4 	.word	0x080034a4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000164:	4a03      	ldr	r2, [pc, #12]	; (8000174 <GFX_SetFont+0x18>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	6013      	str	r3, [r2, #0]
}
 800016a:	bf00      	nop
 800016c:	370c      	adds	r7, #12
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr
 8000174:	2000002c 	.word	0x2000002c

08000178 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, ColorType color)
{
 8000178:	b590      	push	{r4, r7, lr}
 800017a:	b089      	sub	sp, #36	; 0x24
 800017c:	af02      	add	r7, sp, #8
 800017e:	60f8      	str	r0, [r7, #12]
 8000180:	60b9      	str	r1, [r7, #8]
 8000182:	4611      	mov	r1, r2
 8000184:	461a      	mov	r2, r3
 8000186:	460b      	mov	r3, r1
 8000188:	71fb      	strb	r3, [r7, #7]
 800018a:	4613      	mov	r3, r2
 800018c:	80bb      	strh	r3, [r7, #4]
	if(chr > 0x7E) return; // chr > '~'
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	2b7e      	cmp	r3, #126	; 0x7e
 8000192:	d867      	bhi.n	8000264 <GFX_DrawChar+0xec>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000194:	2300      	movs	r3, #0
 8000196:	75fb      	strb	r3, [r7, #23]
 8000198:	e05c      	b.n	8000254 <GFX_DrawChar+0xdc>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 800019a:	4b34      	ldr	r3, [pc, #208]	; (800026c <GFX_DrawChar+0xf4>)
 800019c:	681a      	ldr	r2, [r3, #0]
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	3b20      	subs	r3, #32
 80001a2:	4932      	ldr	r1, [pc, #200]	; (800026c <GFX_DrawChar+0xf4>)
 80001a4:	6809      	ldr	r1, [r1, #0]
 80001a6:	3101      	adds	r1, #1
 80001a8:	7809      	ldrb	r1, [r1, #0]
 80001aa:	fb01 f103 	mul.w	r1, r1, r3
 80001ae:	7dfb      	ldrb	r3, [r7, #23]
 80001b0:	440b      	add	r3, r1
 80001b2:	3302      	adds	r3, #2
 80001b4:	4413      	add	r3, r2
 80001b6:	781b      	ldrb	r3, [r3, #0]
 80001b8:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80001ba:	2300      	movs	r3, #0
 80001bc:	757b      	strb	r3, [r7, #21]
 80001be:	e03f      	b.n	8000240 <GFX_DrawChar+0xc8>
        {
            if(line & 1) // Check last pixel in line
 80001c0:	7dbb      	ldrb	r3, [r7, #22]
 80001c2:	f003 0301 	and.w	r3, r3, #1
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d031      	beq.n	800022e <GFX_DrawChar+0xb6>
            {
            	if(size == 1)
 80001ca:	4b29      	ldr	r3, [pc, #164]	; (8000270 <GFX_DrawChar+0xf8>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d113      	bne.n	80001fa <GFX_DrawChar+0x82>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 80001d2:	7dfb      	ldrb	r3, [r7, #23]
 80001d4:	b29a      	uxth	r2, r3
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	b29b      	uxth	r3, r3
 80001da:	4413      	add	r3, r2
 80001dc:	b29b      	uxth	r3, r3
 80001de:	b218      	sxth	r0, r3
 80001e0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80001e4:	b29a      	uxth	r2, r3
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	4413      	add	r3, r2
 80001ec:	b29b      	uxth	r3, r3
 80001ee:	b21b      	sxth	r3, r3
 80001f0:	88ba      	ldrh	r2, [r7, #4]
 80001f2:	4619      	mov	r1, r3
 80001f4:	f000 fa6c 	bl	80006d0 <ILI9341_WritePixel>
 80001f8:	e019      	b.n	800022e <GFX_DrawChar+0xb6>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 80001fa:	7dfb      	ldrb	r3, [r7, #23]
 80001fc:	4a1c      	ldr	r2, [pc, #112]	; (8000270 <GFX_DrawChar+0xf8>)
 80001fe:	7812      	ldrb	r2, [r2, #0]
 8000200:	fb02 f203 	mul.w	r2, r2, r3
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	18d0      	adds	r0, r2, r3
 8000208:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800020c:	4a18      	ldr	r2, [pc, #96]	; (8000270 <GFX_DrawChar+0xf8>)
 800020e:	7812      	ldrb	r2, [r2, #0]
 8000210:	fb02 f203 	mul.w	r2, r2, r3
 8000214:	68bb      	ldr	r3, [r7, #8]
 8000216:	18d1      	adds	r1, r2, r3
 8000218:	4b15      	ldr	r3, [pc, #84]	; (8000270 <GFX_DrawChar+0xf8>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	b29a      	uxth	r2, r3
 800021e:	4b14      	ldr	r3, [pc, #80]	; (8000270 <GFX_DrawChar+0xf8>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	b29c      	uxth	r4, r3
 8000224:	88bb      	ldrh	r3, [r7, #4]
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	4623      	mov	r3, r4
 800022a:	f000 f93c 	bl	80004a6 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800022e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000232:	b2db      	uxtb	r3, r3
 8000234:	3301      	adds	r3, #1
 8000236:	b2db      	uxtb	r3, r3
 8000238:	757b      	strb	r3, [r7, #21]
 800023a:	7dbb      	ldrb	r3, [r7, #22]
 800023c:	085b      	lsrs	r3, r3, #1
 800023e:	75bb      	strb	r3, [r7, #22]
 8000240:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000244:	4a09      	ldr	r2, [pc, #36]	; (800026c <GFX_DrawChar+0xf4>)
 8000246:	6812      	ldr	r2, [r2, #0]
 8000248:	7812      	ldrb	r2, [r2, #0]
 800024a:	4293      	cmp	r3, r2
 800024c:	dbb8      	blt.n	80001c0 <GFX_DrawChar+0x48>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 800024e:	7dfb      	ldrb	r3, [r7, #23]
 8000250:	3301      	adds	r3, #1
 8000252:	75fb      	strb	r3, [r7, #23]
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <GFX_DrawChar+0xf4>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	7dfa      	ldrb	r2, [r7, #23]
 800025e:	429a      	cmp	r2, r3
 8000260:	d39b      	bcc.n	800019a <GFX_DrawChar+0x22>
 8000262:	e000      	b.n	8000266 <GFX_DrawChar+0xee>
	if(chr > 0x7E) return; // chr > '~'
 8000264:	bf00      	nop
            }

        }
    }
}
 8000266:	371c      	adds	r7, #28
 8000268:	46bd      	mov	sp, r7
 800026a:	bd90      	pop	{r4, r7, pc}
 800026c:	2000002c 	.word	0x2000002c
 8000270:	20000000 	.word	0x20000000

08000274 <GFX_DrawString>:

void GFX_DrawString(int x, int y,const char* str, ColorType color)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
 8000280:	807b      	strh	r3, [r7, #2]
	int x_tmp = x;
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 800028c:	e015      	b.n	80002ba <GFX_DrawString+0x46>
	{
		GFX_DrawChar(x_tmp, y, znak, color); // Draw current char
 800028e:	887b      	ldrh	r3, [r7, #2]
 8000290:	7cfa      	ldrb	r2, [r7, #19]
 8000292:	68b9      	ldr	r1, [r7, #8]
 8000294:	6978      	ldr	r0, [r7, #20]
 8000296:	f7ff ff6f 	bl	8000178 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 800029a:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <GFX_DrawString+0x5c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	3301      	adds	r3, #1
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	461a      	mov	r2, r3
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <GFX_DrawString+0x60>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	fb03 f302 	mul.w	r3, r3, r2
 80002ac:	3301      	adds	r3, #1
 80002ae:	697a      	ldr	r2, [r7, #20]
 80002b0:	4413      	add	r3, r2
 80002b2:	617b      	str	r3, [r7, #20]

		znak = *str; // Next char
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	1c5a      	adds	r2, r3, #1
 80002be:	607a      	str	r2, [r7, #4]
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d1e3      	bne.n	800028e <GFX_DrawString+0x1a>
	}
}
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	3718      	adds	r7, #24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	2000002c 	.word	0x2000002c
 80002d4:	20000000 	.word	0x20000000

080002d8 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08c      	sub	sp, #48	; 0x30
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
 80002e4:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80002e6:	683a      	ldr	r2, [r7, #0]
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	1ad3      	subs	r3, r2, r3
 80002ec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80002f0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80002f4:	6879      	ldr	r1, [r7, #4]
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	1acb      	subs	r3, r1, r3
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	bfb8      	it	lt
 80002fe:	425b      	neglt	r3, r3
 8000300:	429a      	cmp	r2, r3
 8000302:	bfcc      	ite	gt
 8000304:	2301      	movgt	r3, #1
 8000306:	2300      	movle	r3, #0
 8000308:	b2db      	uxtb	r3, r3
 800030a:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 800030c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000310:	2b00      	cmp	r3, #0
 8000312:	d00b      	beq.n	800032c <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	627b      	str	r3, [r7, #36]	; 0x24
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800031e:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	623b      	str	r3, [r7, #32]
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	6a3b      	ldr	r3, [r7, #32]
 800032a:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 800032c:	68fa      	ldr	r2, [r7, #12]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	429a      	cmp	r2, r3
 8000332:	dd0b      	ble.n	800034c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	61fb      	str	r3, [r7, #28]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	69fb      	ldr	r3, [r7, #28]
 800033e:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	61bb      	str	r3, [r7, #24]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	69bb      	ldr	r3, [r7, #24]
 800034a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	b29a      	uxth	r2, r3
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	b29b      	uxth	r3, r3
 8000354:	1ad3      	subs	r3, r2, r3
 8000356:	b29b      	uxth	r3, r3
 8000358:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800035a:	683a      	ldr	r2, [r7, #0]
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	1ad3      	subs	r3, r2, r3
 8000360:	2b00      	cmp	r3, #0
 8000362:	bfb8      	it	lt
 8000364:	425b      	neglt	r3, r3
 8000366:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8000368:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800036c:	0fda      	lsrs	r2, r3, #31
 800036e:	4413      	add	r3, r2
 8000370:	105b      	asrs	r3, r3, #1
 8000372:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000374:	68ba      	ldr	r2, [r7, #8]
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	429a      	cmp	r2, r3
 800037a:	da02      	bge.n	8000382 <GFX_WriteLine+0xaa>
	        ystep = 1;
 800037c:	2301      	movs	r3, #1
 800037e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000380:	e02e      	b.n	80003e0 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 8000382:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000386:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8000388:	e02a      	b.n	80003e0 <GFX_WriteLine+0x108>
	        if (steep) {
 800038a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800038e:	2b00      	cmp	r3, #0
 8000390:	d008      	beq.n	80003a4 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	b21b      	sxth	r3, r3
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	b211      	sxth	r1, r2
 800039a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800039c:	4618      	mov	r0, r3
 800039e:	f000 f997 	bl	80006d0 <ILI9341_WritePixel>
 80003a2:	e007      	b.n	80003b4 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	b21b      	sxth	r3, r3
 80003a8:	68ba      	ldr	r2, [r7, #8]
 80003aa:	b211      	sxth	r1, r2
 80003ac:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 f98e 	bl	80006d0 <ILI9341_WritePixel>
	        }
	        err -= dy;
 80003b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80003b6:	8abb      	ldrh	r3, [r7, #20]
 80003b8:	1ad3      	subs	r3, r2, r3
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80003be:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	da09      	bge.n	80003da <GFX_WriteLine+0x102>
	            y_start += ystep;
 80003c6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80003ca:	68ba      	ldr	r2, [r7, #8]
 80003cc:	4413      	add	r3, r2
 80003ce:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80003d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80003d2:	8afb      	ldrh	r3, [r7, #22]
 80003d4:	4413      	add	r3, r2
 80003d6:	b29b      	uxth	r3, r3
 80003d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	3301      	adds	r3, #1
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fa      	ldr	r2, [r7, #12]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	ddd0      	ble.n	800038a <GFX_WriteLine+0xb2>
	        }
	    }
}
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop
 80003ec:	3730      	adds	r7, #48	; 0x30
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}

080003f2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 80003f2:	b580      	push	{r7, lr}
 80003f4:	b086      	sub	sp, #24
 80003f6:	af02      	add	r7, sp, #8
 80003f8:	60f8      	str	r0, [r7, #12]
 80003fa:	60b9      	str	r1, [r7, #8]
 80003fc:	607a      	str	r2, [r7, #4]
 80003fe:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000400:	68ba      	ldr	r2, [r7, #8]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4413      	add	r3, r2
 8000406:	1e5a      	subs	r2, r3, #1
 8000408:	887b      	ldrh	r3, [r7, #2]
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	4613      	mov	r3, r2
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	68b9      	ldr	r1, [r7, #8]
 8000412:	68f8      	ldr	r0, [r7, #12]
 8000414:	f7ff ff60 	bl	80002d8 <GFX_WriteLine>
}
 8000418:	bf00      	nop
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af02      	add	r7, sp, #8
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4413      	add	r3, r2
 8000434:	1e5a      	subs	r2, r3, #1
 8000436:	887b      	ldrh	r3, [r7, #2]
 8000438:	9300      	str	r3, [sp, #0]
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	68b9      	ldr	r1, [r7, #8]
 800043e:	68f8      	ldr	r0, [r7, #12]
 8000440:	f7ff ff4a 	bl	80002d8 <GFX_WriteLine>
}
 8000444:	bf00      	nop
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	4611      	mov	r1, r2
 8000458:	461a      	mov	r2, r3
 800045a:	460b      	mov	r3, r1
 800045c:	80fb      	strh	r3, [r7, #6]
 800045e:	4613      	mov	r3, r2
 8000460:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 8000462:	88fa      	ldrh	r2, [r7, #6]
 8000464:	8b3b      	ldrh	r3, [r7, #24]
 8000466:	68b9      	ldr	r1, [r7, #8]
 8000468:	68f8      	ldr	r0, [r7, #12]
 800046a:	f7ff ffd9 	bl	8000420 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 800046e:	88ba      	ldrh	r2, [r7, #4]
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	4413      	add	r3, r2
 8000474:	1e59      	subs	r1, r3, #1
 8000476:	88fa      	ldrh	r2, [r7, #6]
 8000478:	8b3b      	ldrh	r3, [r7, #24]
 800047a:	68f8      	ldr	r0, [r7, #12]
 800047c:	f7ff ffd0 	bl	8000420 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 8000480:	88ba      	ldrh	r2, [r7, #4]
 8000482:	8b3b      	ldrh	r3, [r7, #24]
 8000484:	68b9      	ldr	r1, [r7, #8]
 8000486:	68f8      	ldr	r0, [r7, #12]
 8000488:	f7ff ffb3 	bl	80003f2 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 800048c:	88fa      	ldrh	r2, [r7, #6]
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	4413      	add	r3, r2
 8000492:	1e58      	subs	r0, r3, #1
 8000494:	88ba      	ldrh	r2, [r7, #4]
 8000496:	8b3b      	ldrh	r3, [r7, #24]
 8000498:	68b9      	ldr	r1, [r7, #8]
 800049a:	f7ff ffaa 	bl	80003f2 <GFX_DrawFastVLine>

}
 800049e:	bf00      	nop
 80004a0:	3710      	adds	r7, #16
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b086      	sub	sp, #24
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	60f8      	str	r0, [r7, #12]
 80004ae:	60b9      	str	r1, [r7, #8]
 80004b0:	4611      	mov	r1, r2
 80004b2:	461a      	mov	r2, r3
 80004b4:	460b      	mov	r3, r1
 80004b6:	80fb      	strh	r3, [r7, #6]
 80004b8:	4613      	mov	r3, r2
 80004ba:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	e008      	b.n	80004d4 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 80004c2:	88ba      	ldrh	r2, [r7, #4]
 80004c4:	8c3b      	ldrh	r3, [r7, #32]
 80004c6:	68b9      	ldr	r1, [r7, #8]
 80004c8:	6978      	ldr	r0, [r7, #20]
 80004ca:	f7ff ff92 	bl	80003f2 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	3301      	adds	r3, #1
 80004d2:	617b      	str	r3, [r7, #20]
 80004d4:	88fa      	ldrh	r2, [r7, #6]
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	4413      	add	r3, r2
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	429a      	cmp	r2, r3
 80004de:	dbf0      	blt.n	80004c2 <GFX_DrawFillRectangle+0x1c>
    }

}
 80004e0:	bf00      	nop
 80004e2:	bf00      	nop
 80004e4:	3718      	adds	r7, #24
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <ILI9341_Delay>:
#include "main.h"

SPI_HandleTypeDef *Tft_hspi;

// Delay for the functions
static void ILI9341_Delay(uint32_t ms) { HAL_Delay(ms); }
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b082      	sub	sp, #8
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f000 ff54 	bl	80013a0 <HAL_Delay>
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <ILI9341_SendTFT>:

// Transmit data to ILI controller
static void ILI9341_SendTFT(uint8_t *Data, uint8_t Lenght) {
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	70fb      	strb	r3, [r7, #3]
#if (ILI9341_HAL_OPTIMIZE == 1)
  // !! USE ONLY TFT FOR THIS SPI !!
  // optimizing like this doesnt LOCK SPI for other IT/DMA transfers

  // if there is something to send
  while (Lenght > 0U) {
 800050c:	e014      	b.n	8000538 <ILI9341_SendTFT+0x38>
    /* Wait until TXE flag is set to send data */
    if (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) {
 800050e:	4b13      	ldr	r3, [pc, #76]	; (800055c <ILI9341_SendTFT+0x5c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	f003 0302 	and.w	r3, r3, #2
 800051a:	2b02      	cmp	r3, #2
 800051c:	d10c      	bne.n	8000538 <ILI9341_SendTFT+0x38>
      // put value from Data pointer to register DR
      *((__IO uint8_t *)&Tft_hspi->Instance->DR) = *Data;
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <ILI9341_SendTFT+0x5c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	330c      	adds	r3, #12
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	7812      	ldrb	r2, [r2, #0]
 800052a:	701a      	strb	r2, [r3, #0]
      // increment pointer
      Data++;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3301      	adds	r3, #1
 8000530:	607b      	str	r3, [r7, #4]
      // decrement lenght
      Lenght--;
 8000532:	78fb      	ldrb	r3, [r7, #3]
 8000534:	3b01      	subs	r3, #1
 8000536:	70fb      	strb	r3, [r7, #3]
  while (Lenght > 0U) {
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1e7      	bne.n	800050e <ILI9341_SendTFT+0xe>
    }
  }
  // blocking function for SPI , wait before sending next info
  // it is required beacuse when flag ENABLE is ready
  // it doesnt mean that transfer is ready
  while (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET) {
 800053e:	bf00      	nop
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <ILI9341_SendTFT+0x5c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054c:	2b80      	cmp	r3, #128	; 0x80
 800054e:	d0f7      	beq.n	8000540 <ILI9341_SendTFT+0x40>
  // Without HAL optimizng
#else
  HAL_SPI_Transmit(Tft_hspi, Data, Lenght, ILI9341_SPI_TIMEOUT);
}
#endif
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	20000030 	.word	0x20000030

08000560 <ILI9341_SendCommand>:
// Send single command
static void ILI9341_SendCommand(uint8_t Command) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC LOW
  ILI9341_DC_LOW;
 800056a:	2200      	movs	r2, #0
 800056c:	2102      	movs	r1, #2
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <ILI9341_SendCommand+0x28>)
 8000570:	f001 fc60 	bl	8001e34 <HAL_GPIO_WritePin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 8000574:	1dfb      	adds	r3, r7, #7
 8000576:	2101      	movs	r1, #1
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff ffc1 	bl	8000500 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40010c00 	.word	0x40010c00

0800058c <ILI9341_SendCommandAndData>:
}
#endif

// Send command then data
static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data,
                                       uint16_t Lenght) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	4613      	mov	r3, r2
 800059a:	80bb      	strh	r3, [r7, #4]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC LOW
  ILI9341_DC_LOW;
 800059c:	2200      	movs	r2, #0
 800059e:	2102      	movs	r1, #2
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <ILI9341_SendCommandAndData+0x44>)
 80005a2:	f001 fc47 	bl	8001e34 <HAL_GPIO_WritePin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 80005a6:	1dfb      	adds	r3, r7, #7
 80005a8:	2101      	movs	r1, #1
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ffa8 	bl	8000500 <ILI9341_SendTFT>

  // DC HIGH
  ILI9341_DC_HIGH;
 80005b0:	2201      	movs	r2, #1
 80005b2:	2102      	movs	r1, #2
 80005b4:	4806      	ldr	r0, [pc, #24]	; (80005d0 <ILI9341_SendCommandAndData+0x44>)
 80005b6:	f001 fc3d 	bl	8001e34 <HAL_GPIO_WritePin>

  // SEND DATA
  ILI9341_SendTFT(Data, Lenght);
 80005ba:	88bb      	ldrh	r3, [r7, #4]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	4619      	mov	r1, r3
 80005c0:	6838      	ldr	r0, [r7, #0]
 80005c2:	f7ff ff9d 	bl	8000500 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40010c00 	.word	0x40010c00

080005d4 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t Rotation) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
  if (Rotation > 3) return;
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d820      	bhi.n	8000626 <ILI9341_SetRotation+0x52>

  switch (Rotation) {
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	2b03      	cmp	r3, #3
 80005e8:	d816      	bhi.n	8000618 <ILI9341_SetRotation+0x44>
 80005ea:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <ILI9341_SetRotation+0x1c>)
 80005ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f0:	08000601 	.word	0x08000601
 80005f4:	08000607 	.word	0x08000607
 80005f8:	0800060d 	.word	0x0800060d
 80005fc:	08000613 	.word	0x08000613
    case 0:
      Rotation = (MADCTL_MX | MADCTL_BGR);
 8000600:	2348      	movs	r3, #72	; 0x48
 8000602:	71fb      	strb	r3, [r7, #7]
      break;
 8000604:	e008      	b.n	8000618 <ILI9341_SetRotation+0x44>
    case 1:
      Rotation = (MADCTL_MV | MADCTL_BGR);
 8000606:	2328      	movs	r3, #40	; 0x28
 8000608:	71fb      	strb	r3, [r7, #7]
      break;
 800060a:	e005      	b.n	8000618 <ILI9341_SetRotation+0x44>
    case 2:
      Rotation = (MADCTL_MY | MADCTL_BGR);
 800060c:	2388      	movs	r3, #136	; 0x88
 800060e:	71fb      	strb	r3, [r7, #7]
      break;
 8000610:	e002      	b.n	8000618 <ILI9341_SetRotation+0x44>
    case 3:
      Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000612:	23e8      	movs	r3, #232	; 0xe8
 8000614:	71fb      	strb	r3, [r7, #7]
      break;
 8000616:	bf00      	nop
  }

  ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	2201      	movs	r2, #1
 800061c:	4619      	mov	r1, r3
 800061e:	2036      	movs	r0, #54	; 0x36
 8000620:	f7ff ffb4 	bl	800058c <ILI9341_SendCommandAndData>
 8000624:	e000      	b.n	8000628 <ILI9341_SetRotation+0x54>
  if (Rotation > 3) return;
 8000626:	bf00      	nop
}
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop

08000630 <ILI9341_SetAddrWindow>:

// Set adress range window
static void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w,
                                  uint16_t h) {
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	4604      	mov	r4, r0
 8000638:	4608      	mov	r0, r1
 800063a:	4611      	mov	r1, r2
 800063c:	461a      	mov	r2, r3
 800063e:	4623      	mov	r3, r4
 8000640:	80fb      	strh	r3, [r7, #6]
 8000642:	4603      	mov	r3, r0
 8000644:	80bb      	strh	r3, [r7, #4]
 8000646:	460b      	mov	r3, r1
 8000648:	807b      	strh	r3, [r7, #2]
 800064a:	4613      	mov	r3, r2
 800064c:	803b      	strh	r3, [r7, #0]
  // prepare buffer for data
  uint8_t DataToTransfer[4];

  // calculate ranges
  uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 800064e:	88fa      	ldrh	r2, [r7, #6]
 8000650:	887b      	ldrh	r3, [r7, #2]
 8000652:	4413      	add	r3, r2
 8000654:	b29b      	uxth	r3, r3
 8000656:	3b01      	subs	r3, #1
 8000658:	81fb      	strh	r3, [r7, #14]
 800065a:	88ba      	ldrh	r2, [r7, #4]
 800065c:	883b      	ldrh	r3, [r7, #0]
 800065e:	4413      	add	r3, r2
 8000660:	b29b      	uxth	r3, r3
 8000662:	3b01      	subs	r3, #1
 8000664:	81bb      	strh	r3, [r7, #12]

  //	put data into buffer
  DataToTransfer[0] = (x1 >> 8);
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	b29b      	uxth	r3, r3
 800066c:	b2db      	uxtb	r3, r3
 800066e:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = x1 & 0xFF;
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (x2 >> 8);
 8000676:	89fb      	ldrh	r3, [r7, #14]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	b29b      	uxth	r3, r3
 800067c:	b2db      	uxtb	r3, r3
 800067e:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = x2 & 0xFF;
 8000680:	89fb      	ldrh	r3, [r7, #14]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	72fb      	strb	r3, [r7, #11]

  // send command and data about x
  ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4);
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2204      	movs	r2, #4
 800068c:	4619      	mov	r1, r3
 800068e:	202a      	movs	r0, #42	; 0x2a
 8000690:	f7ff ff7c 	bl	800058c <ILI9341_SendCommandAndData>

  //	put data into buffer
  DataToTransfer[0] = (y1 >> 8);
 8000694:	88bb      	ldrh	r3, [r7, #4]
 8000696:	0a1b      	lsrs	r3, r3, #8
 8000698:	b29b      	uxth	r3, r3
 800069a:	b2db      	uxtb	r3, r3
 800069c:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = y1 & 0xFF;
 800069e:	88bb      	ldrh	r3, [r7, #4]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (y2 >> 8);
 80006a4:	89bb      	ldrh	r3, [r7, #12]
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = y2 & 0xFF;
 80006ae:	89bb      	ldrh	r3, [r7, #12]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	72fb      	strb	r3, [r7, #11]

  // send command and data about y
  ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4);
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2204      	movs	r2, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	202b      	movs	r0, #43	; 0x2b
 80006be:	f7ff ff65 	bl	800058c <ILI9341_SendCommandAndData>

  ILI9341_SendCommand(ILI9341_RAMWR);  // Write to RAM
 80006c2:	202c      	movs	r0, #44	; 0x2c
 80006c4:	f7ff ff4c 	bl	8000560 <ILI9341_SendCommand>
}
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd90      	pop	{r4, r7, pc}

080006d0 <ILI9341_WritePixel>:

// Write single pixel
void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	80fb      	strh	r3, [r7, #6]
 80006da:	460b      	mov	r3, r1
 80006dc:	80bb      	strh	r3, [r7, #4]
 80006de:	4613      	mov	r3, r2
 80006e0:	807b      	strh	r3, [r7, #2]
  // prepare buffer for data
  uint8_t DataToTransfer[2];

  // check TFT range to not overwrite something else
  if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) &&
 80006e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db21      	blt.n	800072e <ILI9341_WritePixel+0x5e>
 80006ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006f2:	da1c      	bge.n	800072e <ILI9341_WritePixel+0x5e>
 80006f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db18      	blt.n	800072e <ILI9341_WritePixel+0x5e>
 80006fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000700:	2bef      	cmp	r3, #239	; 0xef
 8000702:	dc14      	bgt.n	800072e <ILI9341_WritePixel+0x5e>
      (y < ILI9341_TFTHEIGHT)) {
    //	put data into buffer
    DataToTransfer[0] = (color >> 8);
 8000704:	887b      	ldrh	r3, [r7, #2]
 8000706:	0a1b      	lsrs	r3, r3, #8
 8000708:	b29b      	uxth	r3, r3
 800070a:	b2db      	uxtb	r3, r3
 800070c:	733b      	strb	r3, [r7, #12]
    DataToTransfer[1] = color & 0xFF;
 800070e:	887b      	ldrh	r3, [r7, #2]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	737b      	strb	r3, [r7, #13]

    // Set window range the single pixel in tft
    // x,y positions 1,1 ranges
    ILI9341_SetAddrWindow(x, y, 1, 1);
 8000714:	88f8      	ldrh	r0, [r7, #6]
 8000716:	88b9      	ldrh	r1, [r7, #4]
 8000718:	2301      	movs	r3, #1
 800071a:	2201      	movs	r2, #1
 800071c:	f7ff ff88 	bl	8000630 <ILI9341_SetAddrWindow>

    // send command that we are writing to RAM, and also color data
    ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2202      	movs	r2, #2
 8000726:	4619      	mov	r1, r3
 8000728:	202c      	movs	r0, #44	; 0x2c
 800072a:	f7ff ff2f 	bl	800058c <ILI9341_SendCommandAndData>
    // Send 16 bit color to that range
  }
}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <ILI9341_ClearDisplay>:
    ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w * h * 2));
  }
}

// Clear whole dipslay with a color
void ILI9341_ClearDisplay(uint16_t color) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	80fb      	strh	r3, [r7, #6]
  uint32_t Lenght = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8000742:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000746:	60fb      	str	r3, [r7, #12]

  // set window for whole screen
  ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8000748:	23f0      	movs	r3, #240	; 0xf0
 800074a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800074e:	2100      	movs	r1, #0
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff6d 	bl	8000630 <ILI9341_SetAddrWindow>

  // send command that we are writing to RAM
  ILI9341_SendCommand(ILI9341_RAMWR);
 8000756:	202c      	movs	r0, #44	; 0x2c
 8000758:	f7ff ff02 	bl	8000560 <ILI9341_SendCommand>
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC HIGH
  ILI9341_DC_HIGH;
 800075c:	2201      	movs	r2, #1
 800075e:	2102      	movs	r1, #2
 8000760:	481c      	ldr	r0, [pc, #112]	; (80007d4 <ILI9341_ClearDisplay+0x9c>)
 8000762:	f001 fb67 	bl	8001e34 <HAL_GPIO_WritePin>

  while (Lenght > 0U) {
 8000766:	e023      	b.n	80007b0 <ILI9341_ClearDisplay+0x78>
    /* Wait until TXE flag is set to send data */
    if (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) {
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <ILI9341_ClearDisplay+0xa0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	2b02      	cmp	r3, #2
 8000776:	d11b      	bne.n	80007b0 <ILI9341_ClearDisplay+0x78>
      // put value from Data pointer to register DR
      *((__IO uint8_t *)&Tft_hspi->Instance->DR) = color >> 8;
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	0a1b      	lsrs	r3, r3, #8
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <ILI9341_ClearDisplay+0xa0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	330c      	adds	r3, #12
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	701a      	strb	r2, [r3, #0]

      // wait for the flag to be reset before sending next byte
      while (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET) {
 800078a:	bf00      	nop
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <ILI9341_ClearDisplay+0xa0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	f003 0302 	and.w	r3, r3, #2
 8000798:	2b02      	cmp	r3, #2
 800079a:	d1f7      	bne.n	800078c <ILI9341_ClearDisplay+0x54>
      }

      // put second byte in
      *((__IO uint8_t *)&Tft_hspi->Instance->DR) = color & 0xFF;
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <ILI9341_ClearDisplay+0xa0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	330c      	adds	r3, #12
 80007a4:	88fa      	ldrh	r2, [r7, #6]
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	701a      	strb	r2, [r3, #0]

      // decrement lenght
      Lenght--;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
  while (Lenght > 0U) {
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1d8      	bne.n	8000768 <ILI9341_ClearDisplay+0x30>
  }

  // blocking function for SPI , wait before sending next info
  // it is required beacuse when flag ENABLE is ready
  // it doesnt mean that transfer is ready
  while (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET) {
 80007b6:	bf00      	nop
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <ILI9341_ClearDisplay+0xa0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c4:	2b80      	cmp	r3, #128	; 0x80
 80007c6:	d0f7      	beq.n	80007b8 <ILI9341_ClearDisplay+0x80>
  // without HAL optimizing
  for (uint32_t i = 0; i < Lenght; i++) {
    ILI9341_SendData16(color);
  }
#endif
}
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40010c00 	.word	0x40010c00
 80007d8:	20000030 	.word	0x20000030

080007dc <ILI9341_Init>:
    ILI9341_DISPON,
    0x80,  // Display on
    0x00   // End of list
};

void ILI9341_Init(SPI_HandleTypeDef *hspi) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  // assign correct spi
  Tft_hspi = hspi;
 80007e4:	4a24      	ldr	r2, [pc, #144]	; (8000878 <ILI9341_Init+0x9c>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]

  // prepare data

  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <ILI9341_Init+0xa0>)
 80007ec:	60fb      	str	r3, [r7, #12]

#if (ILI9341_HAL_OPTIMIZE == 1)
  __HAL_SPI_ENABLE(hspi);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007fc:	601a      	str	r2, [r3, #0]
#endif

// if hardware reset is defined
#if (ILI9341_USE_HW_RESET == 1)
  ILI9341_RST_LOW;
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000804:	481e      	ldr	r0, [pc, #120]	; (8000880 <ILI9341_Init+0xa4>)
 8000806:	f001 fb15 	bl	8001e34 <HAL_GPIO_WritePin>
  ILI9341_Delay(10);
 800080a:	200a      	movs	r0, #10
 800080c:	f7ff fe6d 	bl	80004ea <ILI9341_Delay>
  ILI9341_RST_HIGH;
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000816:	481a      	ldr	r0, [pc, #104]	; (8000880 <ILI9341_Init+0xa4>)
 8000818:	f001 fb0c 	bl	8001e34 <HAL_GPIO_WritePin>
  ILI9341_Delay(10);
 800081c:	200a      	movs	r0, #10
 800081e:	f7ff fe64 	bl	80004ea <ILI9341_Delay>
  ILI9341_SendCommand(ILI9341_SWRESET);  // Engage software reset
  ILI9341_Delay(150);
#endif

  // As long as value under address is not 0 loop
  while ((cmd = *(addr++)) > 0) {
 8000822:	e01a      	b.n	800085a <ILI9341_Init+0x7e>
    // assign value form address to x (second value that is number of data to be
    // send)
    x = *(addr++);
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	60fa      	str	r2, [r7, #12]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	72bb      	strb	r3, [r7, #10]

    // mask this value to maximum of 127
    // 0x7F	0111 1111
    // so if we send 0x80 as second argument then we just send command ->
    // without data
    numArgs = x & 0x7F;
 800082e:	7abb      	ldrb	r3, [r7, #10]
 8000830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000834:	727b      	strb	r3, [r7, #9]

    // send command then array of data
    ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs);
 8000836:	7a7b      	ldrb	r3, [r7, #9]
 8000838:	b29a      	uxth	r2, r3
 800083a:	7afb      	ldrb	r3, [r7, #11]
 800083c:	68f9      	ldr	r1, [r7, #12]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fea4 	bl	800058c <ILI9341_SendCommandAndData>

    // move adress to next command
    addr += numArgs;
 8000844:	7a7b      	ldrb	r3, [r7, #9]
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	4413      	add	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]

    // if only command is sent then make a delay
    if (x & 0x80) {
 800084c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000850:	2b00      	cmp	r3, #0
 8000852:	da02      	bge.n	800085a <ILI9341_Init+0x7e>
      ILI9341_Delay(150);
 8000854:	2096      	movs	r0, #150	; 0x96
 8000856:	f7ff fe48 	bl	80004ea <ILI9341_Delay>
  while ((cmd = *(addr++)) > 0) {
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	1c5a      	adds	r2, r3, #1
 800085e:	60fa      	str	r2, [r7, #12]
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	72fb      	strb	r3, [r7, #11]
 8000864:	7afb      	ldrb	r3, [r7, #11]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1dc      	bne.n	8000824 <ILI9341_Init+0x48>
    }
  }

  ILI9341_SetRotation(ILI9341_ROTATION);
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff feb2 	bl	80005d4 <ILI9341_SetRotation>
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000030 	.word	0x20000030
 800087c:	080034d8 	.word	0x080034d8
 8000880:	40010c00 	.word	0x40010c00

08000884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_DMA_Init+0x38>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <MX_DMA_Init+0x38>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_DMA_Init+0x38>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	200d      	movs	r0, #13
 80008a8:	f000 fe75 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80008ac:	200d      	movs	r0, #13
 80008ae:	f000 fe8e 	bl	80015ce <HAL_NVIC_EnableIRQ>

}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000

080008c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_GPIO_Init+0x78>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a17      	ldr	r2, [pc, #92]	; (8000938 <MX_GPIO_Init+0x78>)
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_GPIO_Init+0x78>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_GPIO_Init+0x78>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a11      	ldr	r2, [pc, #68]	; (8000938 <MX_GPIO_Init+0x78>)
 80008f2:	f043 0308 	orr.w	r3, r3, #8
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_GPIO_Init+0x78>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f240 4102 	movw	r1, #1026	; 0x402
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <MX_GPIO_Init+0x7c>)
 800090c:	f001 fa92 	bl	8001e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_RST_Pin;
 8000910:	f240 4302 	movw	r3, #1026	; 0x402
 8000914:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2302      	movs	r3, #2
 8000920:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4619      	mov	r1, r3
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_GPIO_Init+0x7c>)
 800092a:	f001 f909 	bl	8001b40 <HAL_GPIO_Init>

}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000
 800093c:	40010c00 	.word	0x40010c00

08000940 <hmi_draw_main_screen>:
hmi_screen screen;
uint8_t p_data[MAX_FRAME_SIZE];

// main screen functions

static void hmi_draw_main_screen(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af02      	add	r7, sp, #8
  GFX_DrawRectangle(3, 1, HMI_TITLE_TILE_WIDTH, HMI_TITLE_TILE_HEIGHT,
 8000946:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	231b      	movs	r3, #27
 800094e:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8000952:	2101      	movs	r1, #1
 8000954:	2003      	movs	r0, #3
 8000956:	f7ff fd79 	bl	800044c <GFX_DrawRectangle>
                    HMI_TILE_COLOR);

  for (uint8_t j = 0; j < 2; j++) {
 800095a:	2300      	movs	r3, #0
 800095c:	71fb      	strb	r3, [r7, #7]
 800095e:	e021      	b.n	80009a4 <hmi_draw_main_screen+0x64>
    for (uint8_t i = 0; i < 5; i++) {
 8000960:	2300      	movs	r3, #0
 8000962:	71bb      	strb	r3, [r7, #6]
 8000964:	e018      	b.n	8000998 <hmi_draw_main_screen+0x58>
      GFX_DrawRectangle((j * 159) + 3, (i * 41) + 29, HMI_BUTTON_WIDTH,
 8000966:	79fa      	ldrb	r2, [r7, #7]
 8000968:	4613      	mov	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	015b      	lsls	r3, r3, #5
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	1cd8      	adds	r0, r3, #3
 8000974:	79ba      	ldrb	r2, [r7, #6]
 8000976:	4613      	mov	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4413      	add	r3, r2
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	4413      	add	r3, r2
 8000980:	f103 011d 	add.w	r1, r3, #29
 8000984:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2328      	movs	r3, #40	; 0x28
 800098c:	229b      	movs	r2, #155	; 0x9b
 800098e:	f7ff fd5d 	bl	800044c <GFX_DrawRectangle>
    for (uint8_t i = 0; i < 5; i++) {
 8000992:	79bb      	ldrb	r3, [r7, #6]
 8000994:	3301      	adds	r3, #1
 8000996:	71bb      	strb	r3, [r7, #6]
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	2b04      	cmp	r3, #4
 800099c:	d9e3      	bls.n	8000966 <hmi_draw_main_screen+0x26>
  for (uint8_t j = 0; j < 2; j++) {
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	3301      	adds	r3, #1
 80009a2:	71fb      	strb	r3, [r7, #7]
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d9da      	bls.n	8000960 <hmi_draw_main_screen+0x20>
                        HMI_TILE_HEIGHT, HMI_TILE_COLOR);
    }
  }
  return;
 80009aa:	bf00      	nop
}
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <hmi_draw_tile>:

static void hmi_draw_tile(const uint8_t tile_number, const char *text) {
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b084      	sub	sp, #16
 80009b6:	af02      	add	r7, sp, #8
 80009b8:	4603      	mov	r3, r0
 80009ba:	6039      	str	r1, [r7, #0]
 80009bc:	71fb      	strb	r3, [r7, #7]
  GFX_DrawFillRectangle(3, (tile_number * 21) + 30, HMI_BUTTON_WIDTH - 10, 8,
 80009be:	79fa      	ldrb	r2, [r7, #7]
 80009c0:	4613      	mov	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	4413      	add	r3, r2
 80009c6:	00da      	lsls	r2, r3, #3
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	f103 011e 	add.w	r1, r3, #30
 80009ce:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2308      	movs	r3, #8
 80009d6:	2291      	movs	r2, #145	; 0x91
 80009d8:	2003      	movs	r0, #3
 80009da:	f7ff fd64 	bl	80004a6 <GFX_DrawFillRectangle>
                        HMI_BACKGROUND_COLOR);

  GFX_DrawString(3, (tile_number * 21) + 30, text, HMI_TEXT_COLOR);
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	00da      	lsls	r2, r3, #3
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	f103 011e 	add.w	r1, r3, #30
 80009ee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	2003      	movs	r0, #3
 80009f6:	f7ff fc3d 	bl	8000274 <GFX_DrawString>

  return;
 80009fa:	bf00      	nop
}
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <hmi_read_eeprom>:

static void hmi_read_eeprom(void) { state = INIT_TFT; }
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <hmi_read_eeprom+0x14>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000200 	.word	0x20000200

08000a1c <hmi_init_tft>:

// init tft and draw main screen
static void hmi_init_tft(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  ILI9341_Init(&hspi1);
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <hmi_init_tft+0x28>)
 8000a22:	f7ff fedb 	bl	80007dc <ILI9341_Init>
  ILI9341_ClearDisplay(HMI_BACKGROUND_COLOR);
 8000a26:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8000a2a:	f7ff fe85 	bl	8000738 <ILI9341_ClearDisplay>
  GFX_SetFont(font_8x5);
 8000a2e:	4806      	ldr	r0, [pc, #24]	; (8000a48 <hmi_init_tft+0x2c>)
 8000a30:	f7ff fb94 	bl	800015c <GFX_SetFont>

  hmi_draw_main_screen();
 8000a34:	f7ff ff84 	bl	8000940 <hmi_draw_main_screen>
  state = ACTIVE_SCREEN;
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <hmi_init_tft+0x30>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	701a      	strb	r2, [r3, #0]
  return;
 8000a3e:	bf00      	nop
}
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000204 	.word	0x20000204
 8000a48:	08003548 	.word	0x08003548
 8000a4c:	20000200 	.word	0x20000200

08000a50 <hmi_active_screen>:

static void hmi_active_screen(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
  while (1) {
    for (uint8_t i = 0; i < 10; i++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	71fb      	strb	r3, [r7, #7]
 8000a5a:	e021      	b.n	8000aa0 <hmi_active_screen+0x50>
      if (NULL != screen.buttons[i].callback) {
 8000a5c:	79fa      	ldrb	r2, [r7, #7]
 8000a5e:	4912      	ldr	r1, [pc, #72]	; (8000aa8 <hmi_active_screen+0x58>)
 8000a60:	4613      	mov	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	440b      	add	r3, r1
 8000a6a:	3314      	adds	r3, #20
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d013      	beq.n	8000a9a <hmi_active_screen+0x4a>
        screen.buttons[i].callback(&screen.buttons[i].data);
 8000a72:	79fa      	ldrb	r2, [r7, #7]
 8000a74:	490c      	ldr	r1, [pc, #48]	; (8000aa8 <hmi_active_screen+0x58>)
 8000a76:	4613      	mov	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4413      	add	r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	440b      	add	r3, r1
 8000a80:	3314      	adds	r3, #20
 8000a82:	6819      	ldr	r1, [r3, #0]
 8000a84:	79fa      	ldrb	r2, [r7, #7]
 8000a86:	4613      	mov	r3, r2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	4413      	add	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	3308      	adds	r3, #8
 8000a90:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <hmi_active_screen+0x58>)
 8000a92:	4413      	add	r3, r2
 8000a94:	3304      	adds	r3, #4
 8000a96:	4618      	mov	r0, r3
 8000a98:	4788      	blx	r1
    for (uint8_t i = 0; i < 10; i++) {
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b09      	cmp	r3, #9
 8000aa4:	d9da      	bls.n	8000a5c <hmi_active_screen+0xc>
 8000aa6:	e7d6      	b.n	8000a56 <hmi_active_screen+0x6>
 8000aa8:	20000134 	.word	0x20000134

08000aac <hmi_read_tile_function>:
      }
    }
  }
}

static void hmi_read_tile_function(const union tile_data *p_data) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  // read on DMA
  frame_returned = false;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <hmi_read_tile_function+0x88>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
  bool timeout_error = false;
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)p_data, MAX_FRAME_SIZE);
 8000abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	481c      	ldr	r0, [pc, #112]	; (8000b38 <hmi_read_tile_function+0x8c>)
 8000ac6:	f001 ff4a 	bl	800295e <HAL_UARTEx_ReceiveToIdle_DMA>

  // send read command
  xgb_read_single_device(p_data->read_tile.type, p_data->read_tile.size_mark,
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	7858      	ldrb	r0, [r3, #1]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	7899      	ldrb	r1, [r3, #2]
                         p_data->read_tile.address);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
  xgb_read_single_device(p_data->read_tile.type, p_data->read_tile.size_mark,
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f000 fbb8 	bl	800124c <xgb_read_single_device>

  // wait for return frame
  uint32_t current_tick = HAL_GetTick();
 8000adc:	f000 fc56 	bl	800138c <HAL_GetTick>
 8000ae0:	60b8      	str	r0, [r7, #8]
  while (false == frame_returned) {
 8000ae2:	e00a      	b.n	8000afa <hmi_read_tile_function+0x4e>
    if (HAL_GetTick() - current_tick > RETURN_FRAME_TIMEOUT) {
 8000ae4:	f000 fc52 	bl	800138c <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000af2:	d902      	bls.n	8000afa <hmi_read_tile_function+0x4e>
      timeout_error = true;
 8000af4:	2301      	movs	r3, #1
 8000af6:	73fb      	strb	r3, [r7, #15]
      break;
 8000af8:	e007      	b.n	8000b0a <hmi_read_tile_function+0x5e>
  while (false == frame_returned) {
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <hmi_read_tile_function+0x88>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f083 0301 	eor.w	r3, r3, #1
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1ec      	bne.n	8000ae4 <hmi_read_tile_function+0x38>
    }
  }

  if (true == timeout_error) {
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d006      	beq.n	8000b1e <hmi_read_tile_function+0x72>
    hmi_draw_tile(p_data->read_tile.tile_number, (char *)p_data);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff4b 	bl	80009b2 <hmi_draw_tile>
  } else {
    hmi_draw_tile(p_data->read_tile.tile_number, "TIMEOUT");
  }

  return;
 8000b1c:	e006      	b.n	8000b2c <hmi_read_tile_function+0x80>
    hmi_draw_tile(p_data->read_tile.tile_number, "TIMEOUT");
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4906      	ldr	r1, [pc, #24]	; (8000b3c <hmi_read_tile_function+0x90>)
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff44 	bl	80009b2 <hmi_draw_tile>
  return;
 8000b2a:	bf00      	nop
}
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000201 	.word	0x20000201
 8000b38:	200002e4 	.word	0x200002e4
 8000b3c:	080034bc 	.word	0x080034bc

08000b40 <hmi_main>:

void hmi_main(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  state = READ_EEPROM;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <hmi_main+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
  while (1) {
    switch (state) {
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <hmi_main+0x64>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d8fa      	bhi.n	8000b4a <hmi_main+0xa>
 8000b54:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <hmi_main+0x1c>)
 8000b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5a:	bf00      	nop
 8000b5c:	08000b6d 	.word	0x08000b6d
 8000b60:	08000b73 	.word	0x08000b73
 8000b64:	08000b79 	.word	0x08000b79
 8000b68:	08000b9d 	.word	0x08000b9d
      case (READ_EEPROM): {
        hmi_read_eeprom();
 8000b6c:	f7ff ff4a 	bl	8000a04 <hmi_read_eeprom>
        break;
 8000b70:	e017      	b.n	8000ba2 <hmi_main+0x62>
      }

      case (INIT_TFT): {
        hmi_init_tft();
 8000b72:	f7ff ff53 	bl	8000a1c <hmi_init_tft>
        break;
 8000b76:	e014      	b.n	8000ba2 <hmi_main+0x62>
      }

      case (ACTIVE_SCREEN): {
        screen.buttons[0].data.read_tile.address = "0";
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <hmi_main+0x68>)
 8000b7a:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <hmi_main+0x6c>)
 8000b7c:	611a      	str	r2, [r3, #16]
        screen.buttons[0].data.read_tile.size_mark = XGB_DATA_SIZE_BYTE;
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <hmi_main+0x68>)
 8000b80:	2242      	movs	r2, #66	; 0x42
 8000b82:	739a      	strb	r2, [r3, #14]
        screen.buttons[0].data.read_tile.tile_number = 0;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <hmi_main+0x68>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	731a      	strb	r2, [r3, #12]
        screen.buttons[0].data.read_tile.type = XGB_DEV_TYPE_P;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <hmi_main+0x68>)
 8000b8c:	2250      	movs	r2, #80	; 0x50
 8000b8e:	735a      	strb	r2, [r3, #13]
        screen.buttons[0].callback = hmi_read_tile_function;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <hmi_main+0x68>)
 8000b92:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <hmi_main+0x70>)
 8000b94:	615a      	str	r2, [r3, #20]
        hmi_active_screen();
 8000b96:	f7ff ff5b 	bl	8000a50 <hmi_active_screen>
        break;
 8000b9a:	e002      	b.n	8000ba2 <hmi_main+0x62>
      }

      case (EDIT_TILE): {
        hmi_active_screen();
 8000b9c:	f7ff ff58 	bl	8000a50 <hmi_active_screen>
        break;
 8000ba0:	bf00      	nop
    switch (state) {
 8000ba2:	e7d2      	b.n	8000b4a <hmi_main+0xa>
 8000ba4:	20000200 	.word	0x20000200
 8000ba8:	20000134 	.word	0x20000134
 8000bac:	080034c4 	.word	0x080034c4
 8000bb0:	08000aad 	.word	0x08000aad

08000bb4 <HAL_UARTEx_RxEventCallback>:
      }
    }
  }
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	807b      	strh	r3, [r7, #2]
  frame_returned = true;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_UARTEx_RxEventCallback+0x1c>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	701a      	strb	r2, [r3, #0]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	20000201 	.word	0x20000201

08000bd4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8000bd8:	f000 fb80 	bl	80012dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bdc:	f000 f80d 	bl	8000bfa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be0:	f7ff fe6e 	bl	80008c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000be4:	f000 f864 	bl	8000cb0 <MX_SPI1_Init>
  MX_DMA_Init();
 8000be8:	f7ff fe4c 	bl	8000884 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000bec:	f000 f988 	bl	8000f00 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000bf0:	f000 f844 	bl	8000c7c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */



  hmi_main();
 8000bf4:	f7ff ffa4 	bl	8000b40 <hmi_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000bf8:	e7fe      	b.n	8000bf8 <main+0x24>

08000bfa <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b090      	sub	sp, #64	; 0x40
 8000bfe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c00:	f107 0318 	add.w	r3, r7, #24
 8000c04:	2228      	movs	r2, #40	; 0x28
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 fc3b 	bl	8003484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c24:	2310      	movs	r3, #16
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c30:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c36:	f107 0318 	add.w	r3, r7, #24
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 f912 	bl	8001e64 <HAL_RCC_OscConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x50>
    Error_Handler();
 8000c46:	f000 f82d 	bl	8000ca4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2102      	movs	r1, #2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 fb7d 	bl	8002364 <HAL_RCC_ClockConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0x7a>
    Error_Handler();
 8000c70:	f000 f818 	bl	8000ca4 <Error_Handler>
  }
}
 8000c74:	bf00      	nop
 8000c76:	3740      	adds	r7, #64	; 0x40
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2100      	movs	r1, #0
 8000c84:	200f      	movs	r0, #15
 8000c86:	f000 fc86 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f000 fc9f 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	2025      	movs	r0, #37	; 0x25
 8000c96:	f000 fc7e 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c9a:	2025      	movs	r0, #37	; 0x25
 8000c9c:	f000 fc97 	bl	80015ce <HAL_NVIC_EnableIRQ>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_SPI1_Init+0x64>)
 8000cb6:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <MX_SPI1_Init+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_SPI1_Init+0x64>)
 8000cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_SPI1_Init+0x64>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_SPI1_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_SPI1_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_SPI1_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_SPI1_Init+0x64>)
 8000cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_SPI1_Init+0x64>)
 8000ce4:	2210      	movs	r2, #16
 8000ce6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <MX_SPI1_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_SPI1_Init+0x64>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <MX_SPI1_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_SPI1_Init+0x64>)
 8000cfc:	220a      	movs	r2, #10
 8000cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <MX_SPI1_Init+0x64>)
 8000d02:	f001 fcc9 	bl	8002698 <HAL_SPI_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d0c:	f7ff ffca 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000204 	.word	0x20000204
 8000d18:	40013000 	.word	0x40013000

08000d1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a2e      	ldr	r2, [pc, #184]	; (8000df0 <HAL_SPI_MspInit+0xd4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d155      	bne.n	8000de8 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <HAL_SPI_MspInit+0xd8>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a2c      	ldr	r2, [pc, #176]	; (8000df4 <HAL_SPI_MspInit+0xd8>)
 8000d42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <HAL_SPI_MspInit+0xd8>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <HAL_SPI_MspInit+0xd8>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a26      	ldr	r2, [pc, #152]	; (8000df4 <HAL_SPI_MspInit+0xd8>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <HAL_SPI_MspInit+0xd8>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d6c:	23a0      	movs	r3, #160	; 0xa0
 8000d6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	481e      	ldr	r0, [pc, #120]	; (8000df8 <HAL_SPI_MspInit+0xdc>)
 8000d80:	f000 fede 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d84:	2340      	movs	r3, #64	; 0x40
 8000d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4619      	mov	r1, r3
 8000d96:	4818      	ldr	r0, [pc, #96]	; (8000df8 <HAL_SPI_MspInit+0xdc>)
 8000d98:	f000 fed2 	bl	8001b40 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_SPI_MspInit+0xe0>)
 8000d9e:	4a18      	ldr	r2, [pc, #96]	; (8000e00 <HAL_SPI_MspInit+0xe4>)
 8000da0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_SPI_MspInit+0xe0>)
 8000da4:	2210      	movs	r2, #16
 8000da6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_SPI_MspInit+0xe0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <HAL_SPI_MspInit+0xe0>)
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_SPI_MspInit+0xe0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <HAL_SPI_MspInit+0xe0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_SPI_MspInit+0xe0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <HAL_SPI_MspInit+0xe0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000dcc:	480b      	ldr	r0, [pc, #44]	; (8000dfc <HAL_SPI_MspInit+0xe0>)
 8000dce:	f000 fc19 	bl	8001604 <HAL_DMA_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8000dd8:	f7ff ff64 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_SPI_MspInit+0xe0>)
 8000de0:	649a      	str	r2, [r3, #72]	; 0x48
 8000de2:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <HAL_SPI_MspInit+0xe0>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40013000 	.word	0x40013000
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010800 	.word	0x40010800
 8000dfc:	2000025c 	.word	0x2000025c
 8000e00:	40020030 	.word	0x40020030

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6193      	str	r3, [r2, #24]
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_MspInit+0x60>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_MspInit+0x60>)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010000 	.word	0x40010000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <NMI_Handler+0x4>

08000e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eae:	f000 fa5b 	bl	8001368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <DMA1_Channel3_IRQHandler+0x10>)
 8000ebe:	f000 fd0b 	bl	80018d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000025c 	.word	0x2000025c

08000ecc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <DMA1_Channel5_IRQHandler+0x10>)
 8000ed2:	f000 fd01 	bl	80018d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200002a0 	.word	0x200002a0

08000ee0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <USART1_IRQHandler+0x10>)
 8000ee6:	f001 fd89 	bl	80029fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200002e4 	.word	0x200002e4

08000ef4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_USART1_UART_Init+0x4c>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <MX_USART1_UART_Init+0x50>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_USART1_UART_Init+0x4c>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_USART1_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_USART1_UART_Init+0x4c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_USART1_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_USART1_UART_Init+0x4c>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_USART1_UART_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_USART1_UART_Init+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_USART1_UART_Init+0x4c>)
 8000f38:	f001 fc32 	bl	80027a0 <HAL_UART_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f42:	f7ff feaf 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200002e4 	.word	0x200002e4
 8000f50:	40013800 	.word	0x40013800

08000f54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a2f      	ldr	r2, [pc, #188]	; (800102c <HAL_UART_MspInit+0xd8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d157      	bne.n	8001024 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f74:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a2d      	ldr	r2, [pc, #180]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8000f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b28      	ldr	r3, [pc, #160]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a27      	ldr	r2, [pc, #156]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b25      	ldr	r3, [pc, #148]	; (8001030 <HAL_UART_MspInit+0xdc>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	481e      	ldr	r0, [pc, #120]	; (8001034 <HAL_UART_MspInit+0xe0>)
 8000fba:	f000 fdc1 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4818      	ldr	r0, [pc, #96]	; (8001034 <HAL_UART_MspInit+0xe0>)
 8000fd4:	f000 fdb4 	bl	8001b40 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_UART_MspInit+0xe4>)
 8000fda:	4a18      	ldr	r2, [pc, #96]	; (800103c <HAL_UART_MspInit+0xe8>)
 8000fdc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_UART_MspInit+0xe4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_UART_MspInit+0xe4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <HAL_UART_MspInit+0xe4>)
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_UART_MspInit+0xe4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_UART_MspInit+0xe4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_UART_MspInit+0xe4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_UART_MspInit+0xe4>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <HAL_UART_MspInit+0xe4>)
 800100a:	f000 fafb 	bl	8001604 <HAL_DMA_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001014:	f7ff fe46 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_UART_MspInit+0xe4>)
 800101c:	639a      	str	r2, [r3, #56]	; 0x38
 800101e:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_UART_MspInit+0xe4>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001024:	bf00      	nop
 8001026:	3720      	adds	r7, #32
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40013800 	.word	0x40013800
 8001030:	40021000 	.word	0x40021000
 8001034:	40010800 	.word	0x40010800
 8001038:	200002a0 	.word	0x200002a0
 800103c:	40020058 	.word	0x40020058

08001040 <send_frame>:
extern UART_HandleTypeDef huart1;

/*
 * Basic send frame function, uart transmit function
 */
static uint8_t send_frame(const uint8_t *p_frame, const uint8_t lenght) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	70fb      	strb	r3, [r7, #3]
  if ((HAL_UART_Transmit(&huart1, (uint8_t *)p_frame, lenght, 1000) !=
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	b29a      	uxth	r2, r3
 8001050:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <send_frame+0x30>)
 8001058:	f001 fbef 	bl	800283a <HAL_UART_Transmit>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <send_frame+0x26>
       HAL_OK)) {
    return XGB_ERR_TRANSMIT_TIMEOUT;
 8001062:	23ff      	movs	r3, #255	; 0xff
 8001064:	e000      	b.n	8001068 <send_frame+0x28>
  }

  return XGB_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200002e4 	.word	0x200002e4

08001074 <prepare_frame>:

/*
 * Delete all the empty spaces between parts of frame and add NULL at the end
 */
static uint8_t prepare_frame(const u_frame *raw_frame, u_frame *ready_frame) {
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint8_t j = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	73fb      	strb	r3, [r7, #15]

  // go trough array and if cell is not empty
  // rewrite it to ready frame
  for (uint8_t i = 0; i < MAX_FRAME_SIZE; i++) {
 8001082:	2300      	movs	r3, #0
 8001084:	73bb      	strb	r3, [r7, #14]
    if (raw_frame->frame_bytes[i] != 0) {
 8001086:	7bbb      	ldrb	r3, [r7, #14]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	5cd3      	ldrb	r3, [r2, r3]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d014      	beq.n	80010ba <prepare_frame+0x46>
      ready_frame->frame_bytes[j] = raw_frame->frame_bytes[i];
 8001090:	7bba      	ldrb	r2, [r7, #14]
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	5c89      	ldrb	r1, [r1, r2]
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	54d1      	strb	r1, [r2, r3]

      if (raw_frame->frame_bytes[i] == XGB_CC_EOT)  // if its EOT
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	5cd3      	ldrb	r3, [r2, r3]
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d106      	bne.n	80010b4 <prepare_frame+0x40>
      {
        // finish the message with NULL to create a string
        ready_frame->frame_bytes[j + 1] = 0;  // NULL
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	3301      	adds	r3, #1
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	2100      	movs	r1, #0
 80010ae:	54d1      	strb	r1, [r2, r3]
        return XGB_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e006      	b.n	80010c2 <prepare_frame+0x4e>
      }

      j++;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	3301      	adds	r3, #1
 80010b8:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < MAX_FRAME_SIZE; i++) {
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	3301      	adds	r3, #1
 80010be:	73bb      	strb	r3, [r7, #14]
    if (raw_frame->frame_bytes[i] != 0) {
 80010c0:	e7e1      	b.n	8001086 <prepare_frame+0x12>
    }
  }
  return XGB_ERR_EOT_MISSING;
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <prepare_individual_read_frame>:

/*
 * Prepare frame - request of individual read
 */
static int8_t prepare_individual_read_frame(
    u_frame *frame, const cmd_frame_data *p_frame_data) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0c2      	sub	sp, #264	; 0x108
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	6018      	str	r0, [r3, #0]
 80010d6:	463b      	mov	r3, r7
 80010d8:	6019      	str	r1, [r3, #0]
  // prepare message - fill union with 0s
  u_frame temp_frame = {0};
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	4618      	mov	r0, r3
 80010e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e4:	461a      	mov	r2, r3
 80010e6:	2100      	movs	r1, #0
 80010e8:	f002 f9cc 	bl	8003484 <memset>

  // header
  temp_frame.ind_read_frame.header_enq = XGB_CC_ENQ;
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	2205      	movs	r2, #5
 80010f2:	701a      	strb	r2, [r3, #0]

  // station number
  temp_frame.ind_read_frame.station_number[0] =
      (p_frame_data->ind_read.station_number / 16) + '0';
 80010f4:	463b      	mov	r3, r7
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	3330      	adds	r3, #48	; 0x30
 8001100:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.station_number[0] =
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	705a      	strb	r2, [r3, #1]
  temp_frame.ind_read_frame.station_number[1] =
      (p_frame_data->ind_read.station_number % 16) + '0';
 8001108:	463b      	mov	r3, r7
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	b2db      	uxtb	r3, r3
 8001114:	3330      	adds	r3, #48	; 0x30
 8001116:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.station_number[1] =
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	709a      	strb	r2, [r3, #2]

  // command
  temp_frame.ind_read_frame.command = 'R';
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	2252      	movs	r2, #82	; 0x52
 8001124:	70da      	strb	r2, [r3, #3]

  // command type
  temp_frame.ind_read_frame.command_type[0] = 'S';
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	2253      	movs	r2, #83	; 0x53
 800112c:	711a      	strb	r2, [r3, #4]
  temp_frame.ind_read_frame.command_type[1] = 'S';
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	2253      	movs	r2, #83	; 0x53
 8001134:	715a      	strb	r2, [r3, #5]

  // no blocks
  temp_frame.ind_read_frame.no_blocks[0] =
      (p_frame_data->ind_read.no_of_blocks / 16) + '0';
 8001136:	463b      	mov	r3, r7
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	785b      	ldrb	r3, [r3, #1]
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	b2db      	uxtb	r3, r3
 8001140:	3330      	adds	r3, #48	; 0x30
 8001142:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.no_blocks[0] =
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	719a      	strb	r2, [r3, #6]
  temp_frame.ind_read_frame.no_blocks[1] =
      (p_frame_data->ind_read.no_of_blocks % 16) + '0';
 800114a:	463b      	mov	r3, r7
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	785b      	ldrb	r3, [r3, #1]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	b2db      	uxtb	r3, r3
 8001156:	3330      	adds	r3, #48	; 0x30
 8001158:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.no_blocks[1] =
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	71da      	strb	r2, [r3, #7]

  // device lenght %MW <- this is 3 chars and then we add lenght of address
  // %MW100 = 3 + strlen("100") = 6
  temp_frame.ind_read_frame.device_lenght[0] =
      ((3 + strlen(p_frame_data->ind_read.p_device_address)) / 16) + '0';
 8001160:	463b      	mov	r3, r7
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	f7fe fff0 	bl	800014c <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	3303      	adds	r3, #3
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	b2db      	uxtb	r3, r3
 8001174:	3330      	adds	r3, #48	; 0x30
 8001176:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.device_lenght[0] =
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	721a      	strb	r2, [r3, #8]
  temp_frame.ind_read_frame.device_lenght[1] =
      ((3 + strlen(p_frame_data->ind_read.p_device_address)) % 16) + '0';
 800117e:	463b      	mov	r3, r7
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	4618      	mov	r0, r3
 8001186:	f7fe ffe1 	bl	800014c <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	3303      	adds	r3, #3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	b2db      	uxtb	r3, r3
 8001198:	3330      	adds	r3, #48	; 0x30
 800119a:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.device_lenght[1] =
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	725a      	strb	r2, [r3, #9]

  // prepare device name
  temp_frame.ind_read_frame.device_name[0] = '%';
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	2225      	movs	r2, #37	; 0x25
 80011a8:	729a      	strb	r2, [r3, #10]
  temp_frame.ind_read_frame.device_name[1] =
      p_frame_data->ind_read.device_type;  // device memory group (P,M,L etc.)
 80011aa:	463b      	mov	r3, r7
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	78da      	ldrb	r2, [r3, #3]
  temp_frame.ind_read_frame.device_name[1] =
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	72da      	strb	r2, [r3, #11]
  temp_frame.ind_read_frame.device_name[2] = p_frame_data->ind_read.data_size;
 80011b6:	463b      	mov	r3, r7
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	789a      	ldrb	r2, [r3, #2]
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	731a      	strb	r2, [r3, #12]
  strcpy((char *restrict)(&temp_frame.ind_read_frame.device_name[3]),
         (const char *)p_frame_data->ind_read.p_device_address);
 80011c2:	463b      	mov	r3, r7
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
  strcpy((char *restrict)(&temp_frame.ind_read_frame.device_name[3]),
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	330d      	adds	r3, #13
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 f95f 	bl	8003494 <strcpy>

  temp_frame.ind_read_frame.tail_eot = XGB_CC_EOT;
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	2204      	movs	r2, #4
 80011dc:	769a      	strb	r2, [r3, #26]

  // prepare message
  return prepare_frame(&temp_frame, frame);
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	f107 0208 	add.w	r2, r7, #8
 80011e4:	6819      	ldr	r1, [r3, #0]
 80011e6:	4610      	mov	r0, r2
 80011e8:	f7ff ff44 	bl	8001074 <prepare_frame>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b25b      	sxtb	r3, r3
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <xgb_send_individual_read_cmd>:
}

/*
 * Send request of individual read
 */
uint8_t xgb_send_individual_read_cmd(const cmd_frame_data *p_frame_data) {
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b0c2      	sub	sp, #264	; 0x108
 80011fe:	af00      	add	r7, sp, #0
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	6018      	str	r0, [r3, #0]
  u_frame frame;

  if (prepare_individual_read_frame(&frame, p_frame_data) != XGB_OK) {
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	f107 0208 	add.w	r2, r7, #8
 800120a:	6819      	ldr	r1, [r3, #0]
 800120c:	4610      	mov	r0, r2
 800120e:	f7ff ff5d 	bl	80010cc <prepare_individual_read_frame>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <xgb_send_individual_read_cmd+0x22>
    return XGB_ERR_EOT_MISSING;
 8001218:	23fe      	movs	r3, #254	; 0xfe
 800121a:	e012      	b.n	8001242 <xgb_send_individual_read_cmd+0x48>
  }

  if (send_frame((uint8_t *)&frame,
                 (const uint8_t)strlen((char *)frame.frame_bytes)) != XGB_OK) {
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	4618      	mov	r0, r3
 8001222:	f7fe ff93 	bl	800014c <strlen>
 8001226:	4603      	mov	r3, r0
  if (send_frame((uint8_t *)&frame,
 8001228:	b2da      	uxtb	r2, r3
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff05 	bl	8001040 <send_frame>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <xgb_send_individual_read_cmd+0x46>
    return XGB_ERR_TRANSMIT_TIMEOUT;
 800123c:	23ff      	movs	r3, #255	; 0xff
 800123e:	e000      	b.n	8001242 <xgb_send_individual_read_cmd+0x48>
  }

  return XGB_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <xgb_read_single_device>:
/*
 *
 */
uint8_t xgb_read_single_device(const xgb_device_type type,
                               const xgb_data_size_marking size_mark,
                               const char *address) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	603a      	str	r2, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	460b      	mov	r3, r1
 800125a:	71bb      	strb	r3, [r7, #6]
  cmd_frame_data frame = {0};
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]

  frame.ind_read.data_size = size_mark;
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	73bb      	strb	r3, [r7, #14]
  frame.ind_read.device_type = type;
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	73fb      	strb	r3, [r7, #15]
  frame.ind_read.no_of_blocks = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	737b      	strb	r3, [r7, #13]
  frame.ind_read.p_device_address = address;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	613b      	str	r3, [r7, #16]
  frame.ind_read.station_number = STATION_NUMBER;
 8001278:	2301      	movs	r3, #1
 800127a:	733b      	strb	r3, [r7, #12]

  xgb_send_individual_read_cmd(&frame);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ffba 	bl	80011fa <xgb_send_individual_read_cmd>
}
 8001286:	bf00      	nop
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001292:	490d      	ldr	r1, [pc, #52]	; (80012c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001294:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a8:	4c0a      	ldr	r4, [pc, #40]	; (80012d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012b6:	f7ff fe1d 	bl	8000ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ba:	f002 f8bf 	bl	800343c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012be:	f7ff fc89 	bl	8000bd4 <main>
  bx lr
 80012c2:	4770      	bx	lr
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80012cc:	08003748 	.word	0x08003748
  ldr r2, =_sbss
 80012d0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80012d4:	2000032c 	.word	0x2000032c

080012d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC1_2_IRQHandler>
	...

080012dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_Init+0x28>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_Init+0x28>)
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 f947 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f2:	200f      	movs	r0, #15
 80012f4:	f000 f808 	bl	8001308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f8:	f7ff fd84 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40022000 	.word	0x40022000

08001308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x54>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0x58>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f95f 	bl	80015ea <HAL_SYSTICK_Config>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e00e      	b.n	8001354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	d80a      	bhi.n	8001352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133c:	2200      	movs	r2, #0
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f000 f927 	bl	8001596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <HAL_InitTick+0x5c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	e000      	b.n	8001354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000004 	.word	0x20000004
 8001360:	2000000c 	.word	0x2000000c
 8001364:	20000008 	.word	0x20000008

08001368 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_IncTick+0x1c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_IncTick+0x20>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a03      	ldr	r2, [pc, #12]	; (8001388 <HAL_IncTick+0x20>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	2000000c 	.word	0x2000000c
 8001388:	20000328 	.word	0x20000328

0800138c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;
 8001390:	4b02      	ldr	r3, [pc, #8]	; (800139c <HAL_GetTick+0x10>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	20000328 	.word	0x20000328

080013a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a8:	f7ff fff0 	bl	800138c <HAL_GetTick>
 80013ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b8:	d005      	beq.n	80013c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_Delay+0x44>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013c6:	bf00      	nop
 80013c8:	f7ff ffe0 	bl	800138c <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d8f7      	bhi.n	80013c8 <HAL_Delay+0x28>
  {
  }
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000000c 	.word	0x2000000c

080013e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0b      	blt.n	8001476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	4906      	ldr	r1, [pc, #24]	; (8001480 <__NVIC_EnableIRQ+0x34>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	2001      	movs	r0, #1
 800146e:	fa00 f202 	lsl.w	r2, r0, r2
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff90 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff2d 	bl	80013e8 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff42 	bl	8001430 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff90 	bl	80014d8 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5f 	bl	8001484 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff35 	bl	800144c <__NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffa2 	bl	800153c <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e043      	b.n	80016a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <HAL_DMA_Init+0xa8>)
 8001622:	4413      	add	r3, r2
 8001624:	4a22      	ldr	r2, [pc, #136]	; (80016b0 <HAL_DMA_Init+0xac>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	009a      	lsls	r2, r3, #2
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a1f      	ldr	r2, [pc, #124]	; (80016b4 <HAL_DMA_Init+0xb0>)
 8001636:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2202      	movs	r2, #2
 800163c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800164e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001652:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800165c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	bffdfff8 	.word	0xbffdfff8
 80016b0:	cccccccd 	.word	0xcccccccd
 80016b4:	40020000 	.word	0x40020000

080016b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <HAL_DMA_Start_IT+0x20>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e04a      	b.n	800176e <HAL_DMA_Start_IT+0xb6>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d13a      	bne.n	8001760 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2202      	movs	r2, #2
 80016ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f9e8 	bl	8001ae4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 020e 	orr.w	r2, r2, #14
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	e00f      	b.n	800174e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0204 	bic.w	r2, r2, #4
 800173c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 020a 	orr.w	r2, r2, #10
 800174c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 0201 	orr.w	r2, r2, #1
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	e005      	b.n	800176c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001768:	2302      	movs	r3, #2
 800176a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800176c:	7dfb      	ldrb	r3, [r7, #23]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001776:	b480      	push	{r7}
 8001778:	b085      	sub	sp, #20
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001788:	2b02      	cmp	r3, #2
 800178a:	d008      	beq.n	800179e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2204      	movs	r2, #4
 8001790:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e020      	b.n	80017e0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 020e 	bic.w	r2, r2, #14
 80017ac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0201 	bic.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c6:	2101      	movs	r1, #1
 80017c8:	fa01 f202 	lsl.w	r2, r1, r2
 80017cc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017de:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d005      	beq.n	800180e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2204      	movs	r2, #4
 8001806:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e051      	b.n	80018b2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 020e 	bic.w	r2, r2, #14
 800181c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0201 	bic.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a22      	ldr	r2, [pc, #136]	; (80018bc <HAL_DMA_Abort_IT+0xd0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d029      	beq.n	800188c <HAL_DMA_Abort_IT+0xa0>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <HAL_DMA_Abort_IT+0xd4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d022      	beq.n	8001888 <HAL_DMA_Abort_IT+0x9c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <HAL_DMA_Abort_IT+0xd8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d01a      	beq.n	8001882 <HAL_DMA_Abort_IT+0x96>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_DMA_Abort_IT+0xdc>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d012      	beq.n	800187c <HAL_DMA_Abort_IT+0x90>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <HAL_DMA_Abort_IT+0xe0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d00a      	beq.n	8001876 <HAL_DMA_Abort_IT+0x8a>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1a      	ldr	r2, [pc, #104]	; (80018d0 <HAL_DMA_Abort_IT+0xe4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d102      	bne.n	8001870 <HAL_DMA_Abort_IT+0x84>
 800186a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800186e:	e00e      	b.n	800188e <HAL_DMA_Abort_IT+0xa2>
 8001870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001874:	e00b      	b.n	800188e <HAL_DMA_Abort_IT+0xa2>
 8001876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800187a:	e008      	b.n	800188e <HAL_DMA_Abort_IT+0xa2>
 800187c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001880:	e005      	b.n	800188e <HAL_DMA_Abort_IT+0xa2>
 8001882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001886:	e002      	b.n	800188e <HAL_DMA_Abort_IT+0xa2>
 8001888:	2310      	movs	r3, #16
 800188a:	e000      	b.n	800188e <HAL_DMA_Abort_IT+0xa2>
 800188c:	2301      	movs	r3, #1
 800188e:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <HAL_DMA_Abort_IT+0xe8>)
 8001890:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	4798      	blx	r3
    } 
  }
  return status;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40020008 	.word	0x40020008
 80018c0:	4002001c 	.word	0x4002001c
 80018c4:	40020030 	.word	0x40020030
 80018c8:	40020044 	.word	0x40020044
 80018cc:	40020058 	.word	0x40020058
 80018d0:	4002006c 	.word	0x4002006c
 80018d4:	40020000 	.word	0x40020000

080018d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	2204      	movs	r2, #4
 80018f6:	409a      	lsls	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d04f      	beq.n	80019a0 <HAL_DMA_IRQHandler+0xc8>
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b00      	cmp	r3, #0
 8001908:	d04a      	beq.n	80019a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0320 	and.w	r3, r3, #32
 8001914:	2b00      	cmp	r3, #0
 8001916:	d107      	bne.n	8001928 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0204 	bic.w	r2, r2, #4
 8001926:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a66      	ldr	r2, [pc, #408]	; (8001ac8 <HAL_DMA_IRQHandler+0x1f0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d029      	beq.n	8001986 <HAL_DMA_IRQHandler+0xae>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a65      	ldr	r2, [pc, #404]	; (8001acc <HAL_DMA_IRQHandler+0x1f4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d022      	beq.n	8001982 <HAL_DMA_IRQHandler+0xaa>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a63      	ldr	r2, [pc, #396]	; (8001ad0 <HAL_DMA_IRQHandler+0x1f8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d01a      	beq.n	800197c <HAL_DMA_IRQHandler+0xa4>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a62      	ldr	r2, [pc, #392]	; (8001ad4 <HAL_DMA_IRQHandler+0x1fc>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d012      	beq.n	8001976 <HAL_DMA_IRQHandler+0x9e>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a60      	ldr	r2, [pc, #384]	; (8001ad8 <HAL_DMA_IRQHandler+0x200>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00a      	beq.n	8001970 <HAL_DMA_IRQHandler+0x98>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a5f      	ldr	r2, [pc, #380]	; (8001adc <HAL_DMA_IRQHandler+0x204>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d102      	bne.n	800196a <HAL_DMA_IRQHandler+0x92>
 8001964:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001968:	e00e      	b.n	8001988 <HAL_DMA_IRQHandler+0xb0>
 800196a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800196e:	e00b      	b.n	8001988 <HAL_DMA_IRQHandler+0xb0>
 8001970:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001974:	e008      	b.n	8001988 <HAL_DMA_IRQHandler+0xb0>
 8001976:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800197a:	e005      	b.n	8001988 <HAL_DMA_IRQHandler+0xb0>
 800197c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001980:	e002      	b.n	8001988 <HAL_DMA_IRQHandler+0xb0>
 8001982:	2340      	movs	r3, #64	; 0x40
 8001984:	e000      	b.n	8001988 <HAL_DMA_IRQHandler+0xb0>
 8001986:	2304      	movs	r3, #4
 8001988:	4a55      	ldr	r2, [pc, #340]	; (8001ae0 <HAL_DMA_IRQHandler+0x208>)
 800198a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 8094 	beq.w	8001abe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800199e:	e08e      	b.n	8001abe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	2202      	movs	r2, #2
 80019a6:	409a      	lsls	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d056      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x186>
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d051      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0320 	and.w	r3, r3, #32
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10b      	bne.n	80019e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 020a 	bic.w	r2, r2, #10
 80019d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a38      	ldr	r2, [pc, #224]	; (8001ac8 <HAL_DMA_IRQHandler+0x1f0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d029      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x166>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a37      	ldr	r2, [pc, #220]	; (8001acc <HAL_DMA_IRQHandler+0x1f4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d022      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x162>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a35      	ldr	r2, [pc, #212]	; (8001ad0 <HAL_DMA_IRQHandler+0x1f8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d01a      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x15c>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a34      	ldr	r2, [pc, #208]	; (8001ad4 <HAL_DMA_IRQHandler+0x1fc>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d012      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x156>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a32      	ldr	r2, [pc, #200]	; (8001ad8 <HAL_DMA_IRQHandler+0x200>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00a      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x150>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a31      	ldr	r2, [pc, #196]	; (8001adc <HAL_DMA_IRQHandler+0x204>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d102      	bne.n	8001a22 <HAL_DMA_IRQHandler+0x14a>
 8001a1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a20:	e00e      	b.n	8001a40 <HAL_DMA_IRQHandler+0x168>
 8001a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a26:	e00b      	b.n	8001a40 <HAL_DMA_IRQHandler+0x168>
 8001a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a2c:	e008      	b.n	8001a40 <HAL_DMA_IRQHandler+0x168>
 8001a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a32:	e005      	b.n	8001a40 <HAL_DMA_IRQHandler+0x168>
 8001a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a38:	e002      	b.n	8001a40 <HAL_DMA_IRQHandler+0x168>
 8001a3a:	2320      	movs	r3, #32
 8001a3c:	e000      	b.n	8001a40 <HAL_DMA_IRQHandler+0x168>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <HAL_DMA_IRQHandler+0x208>)
 8001a42:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d034      	beq.n	8001abe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a5c:	e02f      	b.n	8001abe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2208      	movs	r2, #8
 8001a64:	409a      	lsls	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d028      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x1e8>
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d023      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 020e 	bic.w	r2, r2, #14
 8001a86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a90:	2101      	movs	r1, #1
 8001a92:	fa01 f202 	lsl.w	r2, r1, r2
 8001a96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d004      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	4798      	blx	r3
    }
  }
  return;
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
}
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40020008 	.word	0x40020008
 8001acc:	4002001c 	.word	0x4002001c
 8001ad0:	40020030 	.word	0x40020030
 8001ad4:	40020044 	.word	0x40020044
 8001ad8:	40020058 	.word	0x40020058
 8001adc:	4002006c 	.word	0x4002006c
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	2101      	movs	r1, #1
 8001afc:	fa01 f202 	lsl.w	r2, r1, r2
 8001b00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b10      	cmp	r3, #16
 8001b10:	d108      	bne.n	8001b24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b22:	e007      	b.n	8001b34 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	60da      	str	r2, [r3, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
	...

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b08b      	sub	sp, #44	; 0x2c
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b52:	e148      	b.n	8001de6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b54:	2201      	movs	r2, #1
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	f040 8137 	bne.w	8001de0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4aa3      	ldr	r2, [pc, #652]	; (8001e04 <HAL_GPIO_Init+0x2c4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d05e      	beq.n	8001c3a <HAL_GPIO_Init+0xfa>
 8001b7c:	4aa1      	ldr	r2, [pc, #644]	; (8001e04 <HAL_GPIO_Init+0x2c4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d875      	bhi.n	8001c6e <HAL_GPIO_Init+0x12e>
 8001b82:	4aa1      	ldr	r2, [pc, #644]	; (8001e08 <HAL_GPIO_Init+0x2c8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d058      	beq.n	8001c3a <HAL_GPIO_Init+0xfa>
 8001b88:	4a9f      	ldr	r2, [pc, #636]	; (8001e08 <HAL_GPIO_Init+0x2c8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d86f      	bhi.n	8001c6e <HAL_GPIO_Init+0x12e>
 8001b8e:	4a9f      	ldr	r2, [pc, #636]	; (8001e0c <HAL_GPIO_Init+0x2cc>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d052      	beq.n	8001c3a <HAL_GPIO_Init+0xfa>
 8001b94:	4a9d      	ldr	r2, [pc, #628]	; (8001e0c <HAL_GPIO_Init+0x2cc>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d869      	bhi.n	8001c6e <HAL_GPIO_Init+0x12e>
 8001b9a:	4a9d      	ldr	r2, [pc, #628]	; (8001e10 <HAL_GPIO_Init+0x2d0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d04c      	beq.n	8001c3a <HAL_GPIO_Init+0xfa>
 8001ba0:	4a9b      	ldr	r2, [pc, #620]	; (8001e10 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d863      	bhi.n	8001c6e <HAL_GPIO_Init+0x12e>
 8001ba6:	4a9b      	ldr	r2, [pc, #620]	; (8001e14 <HAL_GPIO_Init+0x2d4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d046      	beq.n	8001c3a <HAL_GPIO_Init+0xfa>
 8001bac:	4a99      	ldr	r2, [pc, #612]	; (8001e14 <HAL_GPIO_Init+0x2d4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d85d      	bhi.n	8001c6e <HAL_GPIO_Init+0x12e>
 8001bb2:	2b12      	cmp	r3, #18
 8001bb4:	d82a      	bhi.n	8001c0c <HAL_GPIO_Init+0xcc>
 8001bb6:	2b12      	cmp	r3, #18
 8001bb8:	d859      	bhi.n	8001c6e <HAL_GPIO_Init+0x12e>
 8001bba:	a201      	add	r2, pc, #4	; (adr r2, 8001bc0 <HAL_GPIO_Init+0x80>)
 8001bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc0:	08001c3b 	.word	0x08001c3b
 8001bc4:	08001c15 	.word	0x08001c15
 8001bc8:	08001c27 	.word	0x08001c27
 8001bcc:	08001c69 	.word	0x08001c69
 8001bd0:	08001c6f 	.word	0x08001c6f
 8001bd4:	08001c6f 	.word	0x08001c6f
 8001bd8:	08001c6f 	.word	0x08001c6f
 8001bdc:	08001c6f 	.word	0x08001c6f
 8001be0:	08001c6f 	.word	0x08001c6f
 8001be4:	08001c6f 	.word	0x08001c6f
 8001be8:	08001c6f 	.word	0x08001c6f
 8001bec:	08001c6f 	.word	0x08001c6f
 8001bf0:	08001c6f 	.word	0x08001c6f
 8001bf4:	08001c6f 	.word	0x08001c6f
 8001bf8:	08001c6f 	.word	0x08001c6f
 8001bfc:	08001c6f 	.word	0x08001c6f
 8001c00:	08001c6f 	.word	0x08001c6f
 8001c04:	08001c1d 	.word	0x08001c1d
 8001c08:	08001c31 	.word	0x08001c31
 8001c0c:	4a82      	ldr	r2, [pc, #520]	; (8001e18 <HAL_GPIO_Init+0x2d8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c12:	e02c      	b.n	8001c6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	623b      	str	r3, [r7, #32]
          break;
 8001c1a:	e029      	b.n	8001c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	3304      	adds	r3, #4
 8001c22:	623b      	str	r3, [r7, #32]
          break;
 8001c24:	e024      	b.n	8001c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	3308      	adds	r3, #8
 8001c2c:	623b      	str	r3, [r7, #32]
          break;
 8001c2e:	e01f      	b.n	8001c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	330c      	adds	r3, #12
 8001c36:	623b      	str	r3, [r7, #32]
          break;
 8001c38:	e01a      	b.n	8001c70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d102      	bne.n	8001c48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c42:	2304      	movs	r3, #4
 8001c44:	623b      	str	r3, [r7, #32]
          break;
 8001c46:	e013      	b.n	8001c70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d105      	bne.n	8001c5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c50:	2308      	movs	r3, #8
 8001c52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	611a      	str	r2, [r3, #16]
          break;
 8001c5a:	e009      	b.n	8001c70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	615a      	str	r2, [r3, #20]
          break;
 8001c66:	e003      	b.n	8001c70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
          break;
 8001c6c:	e000      	b.n	8001c70 <HAL_GPIO_Init+0x130>
          break;
 8001c6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2bff      	cmp	r3, #255	; 0xff
 8001c74:	d801      	bhi.n	8001c7a <HAL_GPIO_Init+0x13a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	e001      	b.n	8001c7e <HAL_GPIO_Init+0x13e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2bff      	cmp	r3, #255	; 0xff
 8001c84:	d802      	bhi.n	8001c8c <HAL_GPIO_Init+0x14c>
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	e002      	b.n	8001c92 <HAL_GPIO_Init+0x152>
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	3b08      	subs	r3, #8
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	210f      	movs	r1, #15
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	6a39      	ldr	r1, [r7, #32]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	431a      	orrs	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8090 	beq.w	8001de0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cc0:	4b56      	ldr	r3, [pc, #344]	; (8001e1c <HAL_GPIO_Init+0x2dc>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	4a55      	ldr	r2, [pc, #340]	; (8001e1c <HAL_GPIO_Init+0x2dc>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6193      	str	r3, [r2, #24]
 8001ccc:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <HAL_GPIO_Init+0x2dc>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cd8:	4a51      	ldr	r2, [pc, #324]	; (8001e20 <HAL_GPIO_Init+0x2e0>)
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a49      	ldr	r2, [pc, #292]	; (8001e24 <HAL_GPIO_Init+0x2e4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00d      	beq.n	8001d20 <HAL_GPIO_Init+0x1e0>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a48      	ldr	r2, [pc, #288]	; (8001e28 <HAL_GPIO_Init+0x2e8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d007      	beq.n	8001d1c <HAL_GPIO_Init+0x1dc>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a47      	ldr	r2, [pc, #284]	; (8001e2c <HAL_GPIO_Init+0x2ec>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d101      	bne.n	8001d18 <HAL_GPIO_Init+0x1d8>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e004      	b.n	8001d22 <HAL_GPIO_Init+0x1e2>
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e002      	b.n	8001d22 <HAL_GPIO_Init+0x1e2>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <HAL_GPIO_Init+0x1e2>
 8001d20:	2300      	movs	r3, #0
 8001d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d24:	f002 0203 	and.w	r2, r2, #3
 8001d28:	0092      	lsls	r2, r2, #2
 8001d2a:	4093      	lsls	r3, r2
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d32:	493b      	ldr	r1, [pc, #236]	; (8001e20 <HAL_GPIO_Init+0x2e0>)
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	3302      	adds	r3, #2
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d006      	beq.n	8001d5a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d4c:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4937      	ldr	r1, [pc, #220]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	600b      	str	r3, [r1, #0]
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d5a:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4933      	ldr	r1, [pc, #204]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d006      	beq.n	8001d82 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d74:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	492d      	ldr	r1, [pc, #180]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]
 8001d80:	e006      	b.n	8001d90 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d82:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	4929      	ldr	r1, [pc, #164]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d9c:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4923      	ldr	r1, [pc, #140]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]
 8001da8:	e006      	b.n	8001db8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001daa:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	491f      	ldr	r1, [pc, #124]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	4919      	ldr	r1, [pc, #100]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60cb      	str	r3, [r1, #12]
 8001dd0:	e006      	b.n	8001de0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4915      	ldr	r1, [pc, #84]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	3301      	adds	r3, #1
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f47f aeaf 	bne.w	8001b54 <HAL_GPIO_Init+0x14>
  }
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	372c      	adds	r7, #44	; 0x2c
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	10320000 	.word	0x10320000
 8001e08:	10310000 	.word	0x10310000
 8001e0c:	10220000 	.word	0x10220000
 8001e10:	10210000 	.word	0x10210000
 8001e14:	10120000 	.word	0x10120000
 8001e18:	10110000 	.word	0x10110000
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010000 	.word	0x40010000
 8001e24:	40010800 	.word	0x40010800
 8001e28:	40010c00 	.word	0x40010c00
 8001e2c:	40011000 	.word	0x40011000
 8001e30:	40010400 	.word	0x40010400

08001e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]
 8001e40:	4613      	mov	r3, r2
 8001e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e44:	787b      	ldrb	r3, [r7, #1]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e50:	e003      	b.n	8001e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e52:	887b      	ldrh	r3, [r7, #2]
 8001e54:	041a      	lsls	r2, r3, #16
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	611a      	str	r2, [r3, #16]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e26c      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8087 	beq.w	8001f92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e84:	4b92      	ldr	r3, [pc, #584]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d00c      	beq.n	8001eaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e90:	4b8f      	ldr	r3, [pc, #572]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d112      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x5e>
 8001e9c:	4b8c      	ldr	r3, [pc, #560]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea8:	d10b      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eaa:	4b89      	ldr	r3, [pc, #548]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d06c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x12c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d168      	bne.n	8001f90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e246      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_OscConfig+0x76>
 8001ecc:	4b80      	ldr	r3, [pc, #512]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a7f      	ldr	r2, [pc, #508]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	e02e      	b.n	8001f38 <HAL_RCC_OscConfig+0xd4>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x98>
 8001ee2:	4b7b      	ldr	r3, [pc, #492]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a7a      	ldr	r2, [pc, #488]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b78      	ldr	r3, [pc, #480]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a77      	ldr	r2, [pc, #476]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e01d      	b.n	8001f38 <HAL_RCC_OscConfig+0xd4>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0xbc>
 8001f06:	4b72      	ldr	r3, [pc, #456]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a71      	ldr	r2, [pc, #452]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b6f      	ldr	r3, [pc, #444]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a6e      	ldr	r2, [pc, #440]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e00b      	b.n	8001f38 <HAL_RCC_OscConfig+0xd4>
 8001f20:	4b6b      	ldr	r3, [pc, #428]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a6a      	ldr	r2, [pc, #424]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b68      	ldr	r3, [pc, #416]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a67      	ldr	r2, [pc, #412]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff fa24 	bl	800138c <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff fa20 	bl	800138c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	; 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1fa      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	4b5d      	ldr	r3, [pc, #372]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0xe4>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff fa10 	bl	800138c <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff fa0c 	bl	800138c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1e6      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x10c>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d063      	beq.n	8002066 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f9e:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001faa:	4b49      	ldr	r3, [pc, #292]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d11c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x18c>
 8001fb6:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d116      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_RCC_OscConfig+0x176>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d001      	beq.n	8001fda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e1ba      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4939      	ldr	r1, [pc, #228]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fee:	e03a      	b.n	8002066 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff8:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7ff f9c5 	bl	800138c <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002006:	f7ff f9c1 	bl	800138c <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e19b      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002024:	4b2a      	ldr	r3, [pc, #168]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4927      	ldr	r1, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]
 8002038:	e015      	b.n	8002066 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203a:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <HAL_RCC_OscConfig+0x270>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff f9a4 	bl	800138c <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002048:	f7ff f9a0 	bl	800138c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e17a      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d03a      	beq.n	80020e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d019      	beq.n	80020ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_RCC_OscConfig+0x274>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002080:	f7ff f984 	bl	800138c <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002088:	f7ff f980 	bl	800138c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e15a      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_RCC_OscConfig+0x26c>)
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f000 fad8 	bl	800265c <RCC_Delay>
 80020ac:	e01c      	b.n	80020e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_RCC_OscConfig+0x274>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b4:	f7ff f96a 	bl	800138c <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ba:	e00f      	b.n	80020dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020bc:	f7ff f966 	bl	800138c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d908      	bls.n	80020dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e140      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	42420000 	.word	0x42420000
 80020d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	4b9e      	ldr	r3, [pc, #632]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1e9      	bne.n	80020bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a6 	beq.w	8002242 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fa:	4b97      	ldr	r3, [pc, #604]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10d      	bne.n	8002122 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b94      	ldr	r3, [pc, #592]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	4a93      	ldr	r2, [pc, #588]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	61d3      	str	r3, [r2, #28]
 8002112:	4b91      	ldr	r3, [pc, #580]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	4b8e      	ldr	r3, [pc, #568]	; (800235c <HAL_RCC_OscConfig+0x4f8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d118      	bne.n	8002160 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212e:	4b8b      	ldr	r3, [pc, #556]	; (800235c <HAL_RCC_OscConfig+0x4f8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a8a      	ldr	r2, [pc, #552]	; (800235c <HAL_RCC_OscConfig+0x4f8>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213a:	f7ff f927 	bl	800138c <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002142:	f7ff f923 	bl	800138c <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b64      	cmp	r3, #100	; 0x64
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e0fd      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	4b81      	ldr	r3, [pc, #516]	; (800235c <HAL_RCC_OscConfig+0x4f8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x312>
 8002168:	4b7b      	ldr	r3, [pc, #492]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a7a      	ldr	r2, [pc, #488]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	e02d      	b.n	80021d2 <HAL_RCC_OscConfig+0x36e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x334>
 800217e:	4b76      	ldr	r3, [pc, #472]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a75      	ldr	r2, [pc, #468]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	6213      	str	r3, [r2, #32]
 800218a:	4b73      	ldr	r3, [pc, #460]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4a72      	ldr	r2, [pc, #456]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	f023 0304 	bic.w	r3, r3, #4
 8002194:	6213      	str	r3, [r2, #32]
 8002196:	e01c      	b.n	80021d2 <HAL_RCC_OscConfig+0x36e>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b05      	cmp	r3, #5
 800219e:	d10c      	bne.n	80021ba <HAL_RCC_OscConfig+0x356>
 80021a0:	4b6d      	ldr	r3, [pc, #436]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4a6c      	ldr	r2, [pc, #432]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	4b6a      	ldr	r3, [pc, #424]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4a69      	ldr	r2, [pc, #420]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6213      	str	r3, [r2, #32]
 80021b8:	e00b      	b.n	80021d2 <HAL_RCC_OscConfig+0x36e>
 80021ba:	4b67      	ldr	r3, [pc, #412]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a66      	ldr	r2, [pc, #408]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	6213      	str	r3, [r2, #32]
 80021c6:	4b64      	ldr	r3, [pc, #400]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4a63      	ldr	r2, [pc, #396]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d015      	beq.n	8002206 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021da:	f7ff f8d7 	bl	800138c <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7ff f8d3 	bl	800138c <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0ab      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f8:	4b57      	ldr	r3, [pc, #348]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ee      	beq.n	80021e2 <HAL_RCC_OscConfig+0x37e>
 8002204:	e014      	b.n	8002230 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002206:	f7ff f8c1 	bl	800138c <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220c:	e00a      	b.n	8002224 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220e:	f7ff f8bd 	bl	800138c <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e095      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002224:	4b4c      	ldr	r3, [pc, #304]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1ee      	bne.n	800220e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4b48      	ldr	r3, [pc, #288]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a47      	ldr	r2, [pc, #284]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002240:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 8081 	beq.w	800234e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800224c:	4b42      	ldr	r3, [pc, #264]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d061      	beq.n	800231c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d146      	bne.n	80022ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002260:	4b3f      	ldr	r3, [pc, #252]	; (8002360 <HAL_RCC_OscConfig+0x4fc>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7ff f891 	bl	800138c <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226e:	f7ff f88d 	bl	800138c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e067      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002280:	4b35      	ldr	r3, [pc, #212]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002294:	d108      	bne.n	80022a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002296:	4b30      	ldr	r3, [pc, #192]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	492d      	ldr	r1, [pc, #180]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a8:	4b2b      	ldr	r3, [pc, #172]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a19      	ldr	r1, [r3, #32]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	430b      	orrs	r3, r1
 80022ba:	4927      	ldr	r1, [pc, #156]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <HAL_RCC_OscConfig+0x4fc>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7ff f861 	bl	800138c <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ce:	f7ff f85d 	bl	800138c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e037      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e0:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x46a>
 80022ec:	e02f      	b.n	800234e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_RCC_OscConfig+0x4fc>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff f84a 	bl	800138c <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fc:	f7ff f846 	bl	800138c <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e020      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x498>
 800231a:	e018      	b.n	800234e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e013      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	429a      	cmp	r2, r3
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	40007000 	.word	0x40007000
 8002360:	42420060 	.word	0x42420060

08002364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0d0      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b6a      	ldr	r3, [pc, #424]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d910      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b67      	ldr	r3, [pc, #412]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0207 	bic.w	r2, r3, #7
 800238e:	4965      	ldr	r1, [pc, #404]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b63      	ldr	r3, [pc, #396]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0b8      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d020      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c0:	4b59      	ldr	r3, [pc, #356]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4a58      	ldr	r2, [pc, #352]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d8:	4b53      	ldr	r3, [pc, #332]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a52      	ldr	r2, [pc, #328]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e4:	4b50      	ldr	r3, [pc, #320]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	494d      	ldr	r1, [pc, #308]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d040      	beq.n	8002484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b47      	ldr	r3, [pc, #284]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d115      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e07f      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002422:	4b41      	ldr	r3, [pc, #260]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e073      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e06b      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002442:	4b39      	ldr	r3, [pc, #228]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f023 0203 	bic.w	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4936      	ldr	r1, [pc, #216]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002454:	f7fe ff9a 	bl	800138c <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	e00a      	b.n	8002472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245c:	f7fe ff96 	bl	800138c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	; 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e053      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 020c 	and.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	429a      	cmp	r2, r3
 8002482:	d1eb      	bne.n	800245c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002484:	4b27      	ldr	r3, [pc, #156]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d210      	bcs.n	80024b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b24      	ldr	r3, [pc, #144]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 0207 	bic.w	r2, r3, #7
 800249a:	4922      	ldr	r1, [pc, #136]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b20      	ldr	r3, [pc, #128]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e032      	b.n	800251a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4916      	ldr	r1, [pc, #88]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024de:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	490e      	ldr	r1, [pc, #56]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024f2:	f000 f821 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 80024f6:	4602      	mov	r2, r0
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	490a      	ldr	r1, [pc, #40]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	5ccb      	ldrb	r3, [r1, r3]
 8002506:	fa22 f303 	lsr.w	r3, r2, r3
 800250a:	4a09      	ldr	r2, [pc, #36]	; (8002530 <HAL_RCC_ClockConfig+0x1cc>)
 800250c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_RCC_ClockConfig+0x1d0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fef8 	bl	8001308 <HAL_InitTick>

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40022000 	.word	0x40022000
 8002528:	40021000 	.word	0x40021000
 800252c:	08003728 	.word	0x08003728
 8002530:	20000004 	.word	0x20000004
 8002534:	20000008 	.word	0x20000008

08002538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002538:	b490      	push	{r4, r7}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800253e:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002540:	1d3c      	adds	r4, r7, #4
 8002542:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002548:	f240 2301 	movw	r3, #513	; 0x201
 800254c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002562:	4b22      	ldr	r3, [pc, #136]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d002      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x40>
 8002572:	2b08      	cmp	r3, #8
 8002574:	d003      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0x46>
 8002576:	e02d      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800257a:	623b      	str	r3, [r7, #32]
      break;
 800257c:	e02d      	b.n	80025da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	0c9b      	lsrs	r3, r3, #18
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800258a:	4413      	add	r3, r2
 800258c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002590:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d013      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	0c5b      	lsrs	r3, r3, #17
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025aa:	4413      	add	r3, r2
 80025ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025b6:	fb02 f203 	mul.w	r2, r2, r3
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
 80025c2:	e004      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	623b      	str	r3, [r7, #32]
      break;
 80025d2:	e002      	b.n	80025da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d6:	623b      	str	r3, [r7, #32]
      break;
 80025d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025da:	6a3b      	ldr	r3, [r7, #32]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3728      	adds	r7, #40	; 0x28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc90      	pop	{r4, r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	080034c8 	.word	0x080034c8
 80025ec:	40021000 	.word	0x40021000
 80025f0:	007a1200 	.word	0x007a1200
 80025f4:	003d0900 	.word	0x003d0900

080025f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025fc:	4b02      	ldr	r3, [pc, #8]	; (8002608 <HAL_RCC_GetHCLKFreq+0x10>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	20000004 	.word	0x20000004

0800260c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002610:	f7ff fff2 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4903      	ldr	r1, [pc, #12]	; (8002630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002628:	4618      	mov	r0, r3
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	08003738 	.word	0x08003738

08002634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002638:	f7ff ffde 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 800263c:	4602      	mov	r2, r0
 800263e:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	0adb      	lsrs	r3, r3, #11
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	4903      	ldr	r1, [pc, #12]	; (8002658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800264a:	5ccb      	ldrb	r3, [r1, r3]
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002650:	4618      	mov	r0, r3
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000
 8002658:	08003738 	.word	0x08003738

0800265c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002664:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <RCC_Delay+0x34>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <RCC_Delay+0x38>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0a5b      	lsrs	r3, r3, #9
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002678:	bf00      	nop
  }
  while (Delay --);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1e5a      	subs	r2, r3, #1
 800267e:	60fa      	str	r2, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f9      	bne.n	8002678 <RCC_Delay+0x1c>
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	20000004 	.word	0x20000004
 8002694:	10624dd3 	.word	0x10624dd3

08002698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e076      	b.n	8002798 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d108      	bne.n	80026c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ba:	d009      	beq.n	80026d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
 80026c2:	e005      	b.n	80026d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fe fb16 	bl	8000d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002706:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002754:	ea42 0103 	orr.w	r1, r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	0c1a      	lsrs	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f002 0204 	and.w	r2, r2, #4
 8002776:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002786:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e03f      	b.n	8002832 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe fbc4 	bl	8000f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2224      	movs	r2, #36	; 0x24
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fd9b 	bl	8003320 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b08a      	sub	sp, #40	; 0x28
 800283e:	af02      	add	r7, sp, #8
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b20      	cmp	r3, #32
 8002858:	d17c      	bne.n	8002954 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <HAL_UART_Transmit+0x2c>
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e075      	b.n	8002956 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_UART_Transmit+0x3e>
 8002874:	2302      	movs	r3, #2
 8002876:	e06e      	b.n	8002956 <HAL_UART_Transmit+0x11c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2221      	movs	r2, #33	; 0x21
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800288e:	f7fe fd7d 	bl	800138c <HAL_GetTick>
 8002892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	88fa      	ldrh	r2, [r7, #6]
 800289e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a8:	d108      	bne.n	80028bc <HAL_UART_Transmit+0x82>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d104      	bne.n	80028bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	61bb      	str	r3, [r7, #24]
 80028ba:	e003      	b.n	80028c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028cc:	e02a      	b.n	8002924 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2200      	movs	r2, #0
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fb0d 	bl	8002ef8 <UART_WaitOnFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e036      	b.n	8002956 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10b      	bne.n	8002906 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	3302      	adds	r3, #2
 8002902:	61bb      	str	r3, [r7, #24]
 8002904:	e007      	b.n	8002916 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	3301      	adds	r3, #1
 8002914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800291a:	b29b      	uxth	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1cf      	bne.n	80028ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2200      	movs	r2, #0
 8002936:	2140      	movs	r1, #64	; 0x40
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fadd 	bl	8002ef8 <UART_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e006      	b.n	8002956 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	e000      	b.n	8002956 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002954:	2302      	movs	r3, #2
  }
}
 8002956:	4618      	mov	r0, r3
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	4613      	mov	r3, r2
 800296a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b20      	cmp	r3, #32
 8002976:	d13c      	bne.n	80029f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e035      	b.n	80029f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002992:	2302      	movs	r3, #2
 8002994:	e02e      	b.n	80029f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	461a      	mov	r2, r3
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 faee 	bl	8002f8c <UART_Start_Receive_DMA>
 80029b0:	4603      	mov	r3, r0
 80029b2:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d119      	bne.n	80029ee <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d113      	bne.n	80029ea <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0210 	orr.w	r2, r2, #16
 80029e6:	60da      	str	r2, [r3, #12]
 80029e8:	e001      	b.n	80029ee <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
 80029f0:	e000      	b.n	80029f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80029f2:	2302      	movs	r3, #2
  }
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10d      	bne.n	8002a4e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_UART_IRQHandler+0x52>
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 fbc0 	bl	80031cc <UART_Receive_IT>
      return;
 8002a4c:	e17b      	b.n	8002d46 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80b1 	beq.w	8002bb8 <HAL_UART_IRQHandler+0x1bc>
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <HAL_UART_IRQHandler+0x70>
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 80a6 	beq.w	8002bb8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_UART_IRQHandler+0x90>
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_UART_IRQHandler+0xb0>
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f043 0202 	orr.w	r2, r3, #2
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_UART_IRQHandler+0xd0>
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	f043 0204 	orr.w	r2, r3, #4
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00f      	beq.n	8002af6 <HAL_UART_IRQHandler+0xfa>
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d104      	bne.n	8002aea <HAL_UART_IRQHandler+0xee>
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f043 0208 	orr.w	r2, r3, #8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 811e 	beq.w	8002d3c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d007      	beq.n	8002b1a <HAL_UART_IRQHandler+0x11e>
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fb59 	bl	80031cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf14      	ite	ne
 8002b28:	2301      	movne	r3, #1
 8002b2a:	2300      	moveq	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d102      	bne.n	8002b42 <HAL_UART_IRQHandler+0x146>
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d031      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa9b 	bl	800307e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d023      	beq.n	8002b9e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b64:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d013      	beq.n	8002b96 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	4a76      	ldr	r2, [pc, #472]	; (8002d4c <HAL_UART_IRQHandler+0x350>)
 8002b74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe fe36 	bl	80017ec <HAL_DMA_Abort_IT>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d016      	beq.n	8002bb4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b90:	4610      	mov	r0, r2
 8002b92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b94:	e00e      	b.n	8002bb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f8f5 	bl	8002d86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9c:	e00a      	b.n	8002bb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f8f1 	bl	8002d86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba4:	e006      	b.n	8002bb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8ed 	bl	8002d86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002bb2:	e0c3      	b.n	8002d3c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb4:	bf00      	nop
    return;
 8002bb6:	e0c1      	b.n	8002d3c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	f040 80a1 	bne.w	8002d04 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 809b 	beq.w	8002d04 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8095 	beq.w	8002d04 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d04e      	beq.n	8002c9c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002c08:	8a3b      	ldrh	r3, [r7, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8098 	beq.w	8002d40 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c14:	8a3a      	ldrh	r2, [r7, #16]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	f080 8092 	bcs.w	8002d40 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8a3a      	ldrh	r2, [r7, #16]
 8002c20:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d02b      	beq.n	8002c84 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c3a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0201 	bic.w	r2, r2, #1
 8002c4a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c5a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0210 	bic.w	r2, r2, #16
 8002c78:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fd79 	bl	8001776 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	4619      	mov	r1, r3
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7fd ff8d 	bl	8000bb4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c9a:	e051      	b.n	8002d40 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d047      	beq.n	8002d44 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002cb4:	8a7b      	ldrh	r3, [r7, #18]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d044      	beq.n	8002d44 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002cc8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695a      	ldr	r2, [r3, #20]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0210 	bic.w	r2, r2, #16
 8002cf6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cf8:	8a7b      	ldrh	r3, [r7, #18]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7fd ff59 	bl	8000bb4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d02:	e01f      	b.n	8002d44 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_UART_IRQHandler+0x324>
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f9f0 	bl	80030fe <UART_Transmit_IT>
    return;
 8002d1e:	e012      	b.n	8002d46 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <HAL_UART_IRQHandler+0x34a>
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fa31 	bl	800319c <UART_EndTransmit_IT>
    return;
 8002d3a:	e004      	b.n	8002d46 <HAL_UART_IRQHandler+0x34a>
    return;
 8002d3c:	bf00      	nop
 8002d3e:	e002      	b.n	8002d46 <HAL_UART_IRQHandler+0x34a>
      return;
 8002d40:	bf00      	nop
 8002d42:	e000      	b.n	8002d46 <HAL_UART_IRQHandler+0x34a>
      return;
 8002d44:	bf00      	nop
  }
}
 8002d46:	3728      	adds	r7, #40	; 0x28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	080030d7 	.word	0x080030d7

08002d50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr

08002d62 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d12a      	bne.n	8002e0a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dc8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0201 	bic.w	r2, r2, #1
 8002dd8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d107      	bne.n	8002e0a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0210 	bic.w	r2, r2, #16
 8002e08:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d106      	bne.n	8002e20 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e16:	4619      	mov	r1, r3
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7fd fecb 	bl	8000bb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e1e:	e002      	b.n	8002e26 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f7ff ff9e 	bl	8002d62 <HAL_UART_RxCpltCallback>
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d108      	bne.n	8002e56 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7fd feb0 	bl	8000bb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e54:	e002      	b.n	8002e5c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7ff ff8c 	bl	8002d74 <HAL_UART_RxHalfCpltCallback>
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b21      	cmp	r3, #33	; 0x21
 8002e96:	d108      	bne.n	8002eaa <UART_DMAError+0x46>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002ea4:	68b8      	ldr	r0, [r7, #8]
 8002ea6:	f000 f8d5 	bl	8003054 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf14      	ite	ne
 8002eb8:	2301      	movne	r3, #1
 8002eba:	2300      	moveq	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b22      	cmp	r3, #34	; 0x22
 8002eca:	d108      	bne.n	8002ede <UART_DMAError+0x7a>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002ed8:	68b8      	ldr	r0, [r7, #8]
 8002eda:	f000 f8d0 	bl	800307e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f043 0210 	orr.w	r2, r3, #16
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eea:	68b8      	ldr	r0, [r7, #8]
 8002eec:	f7ff ff4b 	bl	8002d86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f08:	e02c      	b.n	8002f64 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d028      	beq.n	8002f64 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f18:	f7fe fa38 	bl	800138c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d21d      	bcs.n	8002f64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e00f      	b.n	8002f84 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d0c3      	beq.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	4613      	mov	r3, r2
 8002f98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	88fa      	ldrh	r2, [r7, #6]
 8002fa4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2222      	movs	r2, #34	; 0x22
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	4a23      	ldr	r2, [pc, #140]	; (8003048 <UART_Start_Receive_DMA+0xbc>)
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	4a22      	ldr	r2, [pc, #136]	; (800304c <UART_Start_Receive_DMA+0xc0>)
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	4a21      	ldr	r2, [pc, #132]	; (8003050 <UART_Start_Receive_DMA+0xc4>)
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002fd4:	f107 0308 	add.w	r3, r7, #8
 8002fd8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	f7fe fb64 	bl	80016b8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800301c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695a      	ldr	r2, [r3, #20]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800303c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	08002d99 	.word	0x08002d99
 800304c:	08002e2f 	.word	0x08002e2f
 8003050:	08002e65 	.word	0x08002e65

08003054 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800306a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003094:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695a      	ldr	r2, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d107      	bne.n	80030be <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0210 	bic.w	r2, r2, #16
 80030bc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7ff fe48 	bl	8002d86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b21      	cmp	r3, #33	; 0x21
 8003110:	d13e      	bne.n	8003190 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311a:	d114      	bne.n	8003146 <UART_Transmit_IT+0x48>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d110      	bne.n	8003146 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003138:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	1c9a      	adds	r2, r3, #2
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	621a      	str	r2, [r3, #32]
 8003144:	e008      	b.n	8003158 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	1c59      	adds	r1, r3, #1
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6211      	str	r1, [r2, #32]
 8003150:	781a      	ldrb	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b29b      	uxth	r3, r3
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	4619      	mov	r1, r3
 8003166:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10f      	bne.n	800318c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800317a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800318a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e000      	b.n	8003192 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003190:	2302      	movs	r3, #2
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff fdc7 	bl	8002d50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b22      	cmp	r3, #34	; 0x22
 80031de:	f040 8099 	bne.w	8003314 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ea:	d117      	bne.n	800321c <UART_Receive_IT+0x50>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d113      	bne.n	800321c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	b29b      	uxth	r3, r3
 8003206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320a:	b29a      	uxth	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	1c9a      	adds	r2, r3, #2
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	629a      	str	r2, [r3, #40]	; 0x28
 800321a:	e026      	b.n	800326a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322e:	d007      	beq.n	8003240 <UART_Receive_IT+0x74>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10a      	bne.n	800324e <UART_Receive_IT+0x82>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d106      	bne.n	800324e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	e008      	b.n	8003260 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800325a:	b2da      	uxtb	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29b      	uxth	r3, r3
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	4619      	mov	r1, r3
 8003278:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800327a:	2b00      	cmp	r3, #0
 800327c:	d148      	bne.n	8003310 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0220 	bic.w	r2, r2, #32
 800328c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800329c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d123      	bne.n	8003306 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0210 	bic.w	r2, r2, #16
 80032d2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b10      	cmp	r3, #16
 80032e0:	d10a      	bne.n	80032f8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fd fc58 	bl	8000bb4 <HAL_UARTEx_RxEventCallback>
 8003304:	e002      	b.n	800330c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff fd2b 	bl	8002d62 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e002      	b.n	8003316 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	e000      	b.n	8003316 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003314:	2302      	movs	r3, #2
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800335a:	f023 030c 	bic.w	r3, r3, #12
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6812      	ldr	r2, [r2, #0]
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	430b      	orrs	r3, r1
 8003366:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a2c      	ldr	r2, [pc, #176]	; (8003434 <UART_SetConfig+0x114>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d103      	bne.n	8003390 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003388:	f7ff f954 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	e002      	b.n	8003396 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003390:	f7ff f93c 	bl	800260c <HAL_RCC_GetPCLK1Freq>
 8003394:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	009a      	lsls	r2, r3, #2
 80033a0:	441a      	add	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	4a22      	ldr	r2, [pc, #136]	; (8003438 <UART_SetConfig+0x118>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	0119      	lsls	r1, r3, #4
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	009a      	lsls	r2, r3, #2
 80033c0:	441a      	add	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033cc:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <UART_SetConfig+0x118>)
 80033ce:	fba3 0302 	umull	r0, r3, r3, r2
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	2064      	movs	r0, #100	; 0x64
 80033d6:	fb00 f303 	mul.w	r3, r0, r3
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	3332      	adds	r3, #50	; 0x32
 80033e0:	4a15      	ldr	r2, [pc, #84]	; (8003438 <UART_SetConfig+0x118>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ec:	4419      	add	r1, r3
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	009a      	lsls	r2, r3, #2
 80033f8:	441a      	add	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	fbb2 f2f3 	udiv	r2, r2, r3
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <UART_SetConfig+0x118>)
 8003406:	fba3 0302 	umull	r0, r3, r3, r2
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	2064      	movs	r0, #100	; 0x64
 800340e:	fb00 f303 	mul.w	r3, r0, r3
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	3332      	adds	r3, #50	; 0x32
 8003418:	4a07      	ldr	r2, [pc, #28]	; (8003438 <UART_SetConfig+0x118>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	f003 020f 	and.w	r2, r3, #15
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	440a      	add	r2, r1
 800342a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40013800 	.word	0x40013800
 8003438:	51eb851f 	.word	0x51eb851f

0800343c <__libc_init_array>:
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	2600      	movs	r6, #0
 8003440:	4d0c      	ldr	r5, [pc, #48]	; (8003474 <__libc_init_array+0x38>)
 8003442:	4c0d      	ldr	r4, [pc, #52]	; (8003478 <__libc_init_array+0x3c>)
 8003444:	1b64      	subs	r4, r4, r5
 8003446:	10a4      	asrs	r4, r4, #2
 8003448:	42a6      	cmp	r6, r4
 800344a:	d109      	bne.n	8003460 <__libc_init_array+0x24>
 800344c:	f000 f82a 	bl	80034a4 <_init>
 8003450:	2600      	movs	r6, #0
 8003452:	4d0a      	ldr	r5, [pc, #40]	; (800347c <__libc_init_array+0x40>)
 8003454:	4c0a      	ldr	r4, [pc, #40]	; (8003480 <__libc_init_array+0x44>)
 8003456:	1b64      	subs	r4, r4, r5
 8003458:	10a4      	asrs	r4, r4, #2
 800345a:	42a6      	cmp	r6, r4
 800345c:	d105      	bne.n	800346a <__libc_init_array+0x2e>
 800345e:	bd70      	pop	{r4, r5, r6, pc}
 8003460:	f855 3b04 	ldr.w	r3, [r5], #4
 8003464:	4798      	blx	r3
 8003466:	3601      	adds	r6, #1
 8003468:	e7ee      	b.n	8003448 <__libc_init_array+0xc>
 800346a:	f855 3b04 	ldr.w	r3, [r5], #4
 800346e:	4798      	blx	r3
 8003470:	3601      	adds	r6, #1
 8003472:	e7f2      	b.n	800345a <__libc_init_array+0x1e>
 8003474:	08003740 	.word	0x08003740
 8003478:	08003740 	.word	0x08003740
 800347c:	08003740 	.word	0x08003740
 8003480:	08003744 	.word	0x08003744

08003484 <memset>:
 8003484:	4603      	mov	r3, r0
 8003486:	4402      	add	r2, r0
 8003488:	4293      	cmp	r3, r2
 800348a:	d100      	bne.n	800348e <memset+0xa>
 800348c:	4770      	bx	lr
 800348e:	f803 1b01 	strb.w	r1, [r3], #1
 8003492:	e7f9      	b.n	8003488 <memset+0x4>

08003494 <strcpy>:
 8003494:	4603      	mov	r3, r0
 8003496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800349a:	f803 2b01 	strb.w	r2, [r3], #1
 800349e:	2a00      	cmp	r2, #0
 80034a0:	d1f9      	bne.n	8003496 <strcpy+0x2>
 80034a2:	4770      	bx	lr

080034a4 <_init>:
 80034a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a6:	bf00      	nop
 80034a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034aa:	bc08      	pop	{r3}
 80034ac:	469e      	mov	lr, r3
 80034ae:	4770      	bx	lr

080034b0 <_fini>:
 80034b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b2:	bf00      	nop
 80034b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b6:	bc08      	pop	{r3}
 80034b8:	469e      	mov	lr, r3
 80034ba:	4770      	bx	lr
