
mini_HMI_screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fd4  08005fd4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08005fd4  08005fd4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fd4  08005fd4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fd4  08005fd4  00015fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fd8  08005fd8  00015fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000084  08006060  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08006060  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001110c  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f0  00000000  00000000  000311b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  000342b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  00034f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a32  00000000  00000000  00035b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa2e  00000000  00000000  0004e55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000846c1  00000000  00000000  0005df88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2649  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035c8  00000000  00000000  000e269c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b24 	.word	0x08005b24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08005b24 	.word	0x08005b24

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <set_button_flag>:
#define BTN_ENTER BUTTON_ENTER_Pin

static volatile button_flags_t flags;

void set_button_flag(uint16_t GPIO_Pin)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	2b80      	cmp	r3, #128	; 0x80
 800016a:	d01e      	beq.n	80001aa <set_button_flag+0x4e>
 800016c:	2b80      	cmp	r3, #128	; 0x80
 800016e:	dc20      	bgt.n	80001b2 <set_button_flag+0x56>
 8000170:	2b40      	cmp	r3, #64	; 0x40
 8000172:	d016      	beq.n	80001a2 <set_button_flag+0x46>
 8000174:	2b40      	cmp	r3, #64	; 0x40
 8000176:	dc1c      	bgt.n	80001b2 <set_button_flag+0x56>
 8000178:	2b20      	cmp	r3, #32
 800017a:	d00e      	beq.n	800019a <set_button_flag+0x3e>
 800017c:	2b20      	cmp	r3, #32
 800017e:	dc18      	bgt.n	80001b2 <set_button_flag+0x56>
 8000180:	2b08      	cmp	r3, #8
 8000182:	d002      	beq.n	800018a <set_button_flag+0x2e>
 8000184:	2b10      	cmp	r3, #16
 8000186:	d004      	beq.n	8000192 <set_button_flag+0x36>
    case (BTN_ENTER):
      flags.enter_flag = true;
      break;

    default:
      break;
 8000188:	e013      	b.n	80001b2 <set_button_flag+0x56>
      flags.left_flag = true;
 800018a:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <set_button_flag+0x64>)
 800018c:	2201      	movs	r2, #1
 800018e:	701a      	strb	r2, [r3, #0]
      break;
 8000190:	e010      	b.n	80001b4 <set_button_flag+0x58>
      flags.right_flag = true;
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <set_button_flag+0x64>)
 8000194:	2201      	movs	r2, #1
 8000196:	705a      	strb	r2, [r3, #1]
      break;
 8000198:	e00c      	b.n	80001b4 <set_button_flag+0x58>
      flags.down_flag = true;
 800019a:	4b09      	ldr	r3, [pc, #36]	; (80001c0 <set_button_flag+0x64>)
 800019c:	2201      	movs	r2, #1
 800019e:	709a      	strb	r2, [r3, #2]
      break;
 80001a0:	e008      	b.n	80001b4 <set_button_flag+0x58>
      flags.up_flag = true;
 80001a2:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <set_button_flag+0x64>)
 80001a4:	2201      	movs	r2, #1
 80001a6:	70da      	strb	r2, [r3, #3]
      break;
 80001a8:	e004      	b.n	80001b4 <set_button_flag+0x58>
      flags.enter_flag = true;
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <set_button_flag+0x64>)
 80001ac:	2201      	movs	r2, #1
 80001ae:	711a      	strb	r2, [r3, #4]
      break;
 80001b0:	e000      	b.n	80001b4 <set_button_flag+0x58>
      break;
 80001b2:	bf00      	nop
      // different gpio
    }

  return;
 80001b4:	bf00      	nop
}
 80001b6:	370c      	adds	r7, #12
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	200000a0 	.word	0x200000a0

080001c4 <buttons_get_pending_flag>:

buttons_state_t buttons_get_pending_flag(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
  buttons_state_t active_button = IDLE;
 80001ca:	2300      	movs	r3, #0
 80001cc:	71fb      	strb	r3, [r7, #7]

  if (flags.left_flag)
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <buttons_get_pending_flag+0x64>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d002      	beq.n	80001de <buttons_get_pending_flag+0x1a>
    {
      active_button = LEFT_FLAG;
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
 80001dc:	e01e      	b.n	800021c <buttons_get_pending_flag+0x58>
    }
  else if (flags.right_flag)
 80001de:	4b12      	ldr	r3, [pc, #72]	; (8000228 <buttons_get_pending_flag+0x64>)
 80001e0:	785b      	ldrb	r3, [r3, #1]
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <buttons_get_pending_flag+0x2a>
    {
      active_button = RIGHT_FLAG;
 80001e8:	2302      	movs	r3, #2
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e016      	b.n	800021c <buttons_get_pending_flag+0x58>
    }
  else if (flags.down_flag)
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <buttons_get_pending_flag+0x64>)
 80001f0:	789b      	ldrb	r3, [r3, #2]
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d002      	beq.n	80001fe <buttons_get_pending_flag+0x3a>
    {
      active_button = DOWN_FLAG;
 80001f8:	2303      	movs	r3, #3
 80001fa:	71fb      	strb	r3, [r7, #7]
 80001fc:	e00e      	b.n	800021c <buttons_get_pending_flag+0x58>
    }
  else if (flags.up_flag)
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <buttons_get_pending_flag+0x64>)
 8000200:	78db      	ldrb	r3, [r3, #3]
 8000202:	b2db      	uxtb	r3, r3
 8000204:	2b00      	cmp	r3, #0
 8000206:	d002      	beq.n	800020e <buttons_get_pending_flag+0x4a>
    {
      active_button = UP_FLAG;
 8000208:	2304      	movs	r3, #4
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	e006      	b.n	800021c <buttons_get_pending_flag+0x58>
    }
  else if (flags.enter_flag)
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <buttons_get_pending_flag+0x64>)
 8000210:	791b      	ldrb	r3, [r3, #4]
 8000212:	b2db      	uxtb	r3, r3
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <buttons_get_pending_flag+0x58>
    {
      active_button = ENTER_FLAG;
 8000218:	2305      	movs	r3, #5
 800021a:	71fb      	strb	r3, [r7, #7]
    }

  return active_button;
 800021c:	79fb      	ldrb	r3, [r7, #7]
}
 800021e:	4618      	mov	r0, r3
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	200000a0 	.word	0x200000a0

0800022c <buttons_reset_flag>:

void buttons_reset_flag(buttons_state_t state_flag)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
  switch (state_flag)
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	3b01      	subs	r3, #1
 800023a:	2b04      	cmp	r3, #4
 800023c:	d820      	bhi.n	8000280 <buttons_reset_flag+0x54>
 800023e:	a201      	add	r2, pc, #4	; (adr r2, 8000244 <buttons_reset_flag+0x18>)
 8000240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000244:	08000259 	.word	0x08000259
 8000248:	08000261 	.word	0x08000261
 800024c:	08000269 	.word	0x08000269
 8000250:	08000271 	.word	0x08000271
 8000254:	08000279 	.word	0x08000279
    {
    case (LEFT_FLAG):
      flags.left_flag = false;
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <buttons_reset_flag+0x60>)
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]
      break;
 800025e:	e010      	b.n	8000282 <buttons_reset_flag+0x56>

    case (RIGHT_FLAG):
      flags.right_flag = false;
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <buttons_reset_flag+0x60>)
 8000262:	2200      	movs	r2, #0
 8000264:	705a      	strb	r2, [r3, #1]
      break;
 8000266:	e00c      	b.n	8000282 <buttons_reset_flag+0x56>

    case (DOWN_FLAG):
      flags.down_flag = false;
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <buttons_reset_flag+0x60>)
 800026a:	2200      	movs	r2, #0
 800026c:	709a      	strb	r2, [r3, #2]
      break;
 800026e:	e008      	b.n	8000282 <buttons_reset_flag+0x56>

    case (UP_FLAG):
      flags.up_flag = false;
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <buttons_reset_flag+0x60>)
 8000272:	2200      	movs	r2, #0
 8000274:	70da      	strb	r2, [r3, #3]
      break;
 8000276:	e004      	b.n	8000282 <buttons_reset_flag+0x56>

    case (ENTER_FLAG):
      flags.enter_flag = false;
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <buttons_reset_flag+0x60>)
 800027a:	2200      	movs	r2, #0
 800027c:	711a      	strb	r2, [r3, #4]
      break;
 800027e:	e000      	b.n	8000282 <buttons_reset_flag+0x56>

    case (IDLE):
    default:
      break;
 8000280:	bf00      	nop
    }
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	200000a0 	.word	0x200000a0

08000290 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
  set_button_flag(GPIO_Pin);
 800029a:	88fb      	ldrh	r3, [r7, #6]
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ff5d 	bl	800015c <set_button_flag>
  return;
 80002a2:	bf00      	nop
}
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	font = font_t;
 80002b4:	4a03      	ldr	r2, [pc, #12]	; (80002c4 <GFX_SetFont+0x18>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	6013      	str	r3, [r2, #0]
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	200001e4 	.word	0x200001e4

080002c8 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, ColorType color)
{
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b089      	sub	sp, #36	; 0x24
 80002cc:	af02      	add	r7, sp, #8
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	4611      	mov	r1, r2
 80002d4:	461a      	mov	r2, r3
 80002d6:	460b      	mov	r3, r1
 80002d8:	71fb      	strb	r3, [r7, #7]
 80002da:	4613      	mov	r3, r2
 80002dc:	80bb      	strh	r3, [r7, #4]
	if(chr > 0x7E) return; // chr > '~'
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	2b7e      	cmp	r3, #126	; 0x7e
 80002e2:	d867      	bhi.n	80003b4 <GFX_DrawChar+0xec>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80002e4:	2300      	movs	r3, #0
 80002e6:	75fb      	strb	r3, [r7, #23]
 80002e8:	e05c      	b.n	80003a4 <GFX_DrawChar+0xdc>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80002ea:	4b34      	ldr	r3, [pc, #208]	; (80003bc <GFX_DrawChar+0xf4>)
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	3b20      	subs	r3, #32
 80002f2:	4932      	ldr	r1, [pc, #200]	; (80003bc <GFX_DrawChar+0xf4>)
 80002f4:	6809      	ldr	r1, [r1, #0]
 80002f6:	3101      	adds	r1, #1
 80002f8:	7809      	ldrb	r1, [r1, #0]
 80002fa:	fb01 f103 	mul.w	r1, r1, r3
 80002fe:	7dfb      	ldrb	r3, [r7, #23]
 8000300:	440b      	add	r3, r1
 8000302:	3302      	adds	r3, #2
 8000304:	4413      	add	r3, r2
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800030a:	2300      	movs	r3, #0
 800030c:	757b      	strb	r3, [r7, #21]
 800030e:	e03f      	b.n	8000390 <GFX_DrawChar+0xc8>
        {
            if(line & 1) // Check last pixel in line
 8000310:	7dbb      	ldrb	r3, [r7, #22]
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	2b00      	cmp	r3, #0
 8000318:	d031      	beq.n	800037e <GFX_DrawChar+0xb6>
            {
            	if(size == 1)
 800031a:	4b29      	ldr	r3, [pc, #164]	; (80003c0 <GFX_DrawChar+0xf8>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d113      	bne.n	800034a <GFX_DrawChar+0x82>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8000322:	7dfb      	ldrb	r3, [r7, #23]
 8000324:	b29a      	uxth	r2, r3
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	b29b      	uxth	r3, r3
 800032a:	4413      	add	r3, r2
 800032c:	b29b      	uxth	r3, r3
 800032e:	b218      	sxth	r0, r3
 8000330:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000334:	b29a      	uxth	r2, r3
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	b29b      	uxth	r3, r3
 800033a:	4413      	add	r3, r2
 800033c:	b29b      	uxth	r3, r3
 800033e:	b21b      	sxth	r3, r3
 8000340:	88ba      	ldrh	r2, [r7, #4]
 8000342:	4619      	mov	r1, r3
 8000344:	f000 fc10 	bl	8000b68 <ILI9341_WritePixel>
 8000348:	e019      	b.n	800037e <GFX_DrawChar+0xb6>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 800034a:	7dfb      	ldrb	r3, [r7, #23]
 800034c:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <GFX_DrawChar+0xf8>)
 800034e:	7812      	ldrb	r2, [r2, #0]
 8000350:	fb02 f203 	mul.w	r2, r2, r3
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	18d0      	adds	r0, r2, r3
 8000358:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800035c:	4a18      	ldr	r2, [pc, #96]	; (80003c0 <GFX_DrawChar+0xf8>)
 800035e:	7812      	ldrb	r2, [r2, #0]
 8000360:	fb02 f203 	mul.w	r2, r2, r3
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	18d1      	adds	r1, r2, r3
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <GFX_DrawChar+0xf8>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b29a      	uxth	r2, r3
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <GFX_DrawChar+0xf8>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	b29c      	uxth	r4, r3
 8000374:	88bb      	ldrh	r3, [r7, #4]
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	4623      	mov	r3, r4
 800037a:	f000 f97f 	bl	800067c <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800037e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	3301      	adds	r3, #1
 8000386:	b2db      	uxtb	r3, r3
 8000388:	757b      	strb	r3, [r7, #21]
 800038a:	7dbb      	ldrb	r3, [r7, #22]
 800038c:	085b      	lsrs	r3, r3, #1
 800038e:	75bb      	strb	r3, [r7, #22]
 8000390:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000394:	4a09      	ldr	r2, [pc, #36]	; (80003bc <GFX_DrawChar+0xf4>)
 8000396:	6812      	ldr	r2, [r2, #0]
 8000398:	7812      	ldrb	r2, [r2, #0]
 800039a:	4293      	cmp	r3, r2
 800039c:	dbb8      	blt.n	8000310 <GFX_DrawChar+0x48>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 800039e:	7dfb      	ldrb	r3, [r7, #23]
 80003a0:	3301      	adds	r3, #1
 80003a2:	75fb      	strb	r3, [r7, #23]
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <GFX_DrawChar+0xf4>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	3301      	adds	r3, #1
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	7dfa      	ldrb	r2, [r7, #23]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d39b      	bcc.n	80002ea <GFX_DrawChar+0x22>
 80003b2:	e000      	b.n	80003b6 <GFX_DrawChar+0xee>
	if(chr > 0x7E) return; // chr > '~'
 80003b4:	bf00      	nop
            }

        }
    }
}
 80003b6:	371c      	adds	r7, #28
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd90      	pop	{r4, r7, pc}
 80003bc:	200001e4 	.word	0x200001e4
 80003c0:	20000000 	.word	0x20000000

080003c4 <GFX_DrawString>:

void GFX_DrawString(int x, int y,const char* str, ColorType color)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
 80003d0:	807b      	strh	r3, [r7, #2]
	int x_tmp = x;
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 80003dc:	e015      	b.n	800040a <GFX_DrawString+0x46>
	{
		GFX_DrawChar(x_tmp, y, znak, color); // Draw current char
 80003de:	887b      	ldrh	r3, [r7, #2]
 80003e0:	7cfa      	ldrb	r2, [r7, #19]
 80003e2:	68b9      	ldr	r1, [r7, #8]
 80003e4:	6978      	ldr	r0, [r7, #20]
 80003e6:	f7ff ff6f 	bl	80002c8 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <GFX_DrawString+0x5c>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	3301      	adds	r3, #1
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	461a      	mov	r2, r3
 80003f4:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <GFX_DrawString+0x60>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	fb03 f302 	mul.w	r3, r3, r2
 80003fc:	3301      	adds	r3, #1
 80003fe:	697a      	ldr	r2, [r7, #20]
 8000400:	4413      	add	r3, r2
 8000402:	617b      	str	r3, [r7, #20]

		znak = *str; // Next char
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	607a      	str	r2, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1e3      	bne.n	80003de <GFX_DrawString+0x1a>
	}
}
 8000416:	bf00      	nop
 8000418:	bf00      	nop
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	200001e4 	.word	0x200001e4
 8000424:	20000000 	.word	0x20000000

08000428 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b08c      	sub	sp, #48	; 0x30
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
 8000434:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8000436:	683a      	ldr	r2, [r7, #0]
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	1ad3      	subs	r3, r2, r3
 800043c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000440:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	1acb      	subs	r3, r1, r3
 800044a:	2b00      	cmp	r3, #0
 800044c:	bfb8      	it	lt
 800044e:	425b      	neglt	r3, r3
 8000450:	429a      	cmp	r2, r3
 8000452:	bfcc      	ite	gt
 8000454:	2301      	movgt	r3, #1
 8000456:	2300      	movle	r3, #0
 8000458:	b2db      	uxtb	r3, r3
 800045a:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 800045c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000460:	2b00      	cmp	r3, #0
 8000462:	d00b      	beq.n	800047c <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	627b      	str	r3, [r7, #36]	; 0x24
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800046e:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	623b      	str	r3, [r7, #32]
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	6a3b      	ldr	r3, [r7, #32]
 800047a:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 800047c:	68fa      	ldr	r2, [r7, #12]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	429a      	cmp	r2, r3
 8000482:	dd0b      	ble.n	800049c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	61fb      	str	r3, [r7, #28]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	69fb      	ldr	r3, [r7, #28]
 800048e:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	61bb      	str	r3, [r7, #24]
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	69bb      	ldr	r3, [r7, #24]
 800049a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	b29a      	uxth	r2, r3
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	1ad3      	subs	r3, r2, r3
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	bfb8      	it	lt
 80004b4:	425b      	neglt	r3, r3
 80004b6:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80004b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004bc:	0fda      	lsrs	r2, r3, #31
 80004be:	4413      	add	r3, r2
 80004c0:	105b      	asrs	r3, r3, #1
 80004c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80004c4:	68ba      	ldr	r2, [r7, #8]
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	da02      	bge.n	80004d2 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80004cc:	2301      	movs	r3, #1
 80004ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80004d0:	e02e      	b.n	8000530 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80004d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80004d8:	e02a      	b.n	8000530 <GFX_WriteLine+0x108>
	        if (steep) {
 80004da:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d008      	beq.n	80004f4 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	b21b      	sxth	r3, r3
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	b211      	sxth	r1, r2
 80004ea:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fb3b 	bl	8000b68 <ILI9341_WritePixel>
 80004f2:	e007      	b.n	8000504 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	b21b      	sxth	r3, r3
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	b211      	sxth	r1, r2
 80004fc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fb32 	bl	8000b68 <ILI9341_WritePixel>
	        }
	        err -= dy;
 8000504:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000506:	8abb      	ldrh	r3, [r7, #20]
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	b29b      	uxth	r3, r3
 800050c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800050e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000512:	2b00      	cmp	r3, #0
 8000514:	da09      	bge.n	800052a <GFX_WriteLine+0x102>
	            y_start += ystep;
 8000516:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800051a:	68ba      	ldr	r2, [r7, #8]
 800051c:	4413      	add	r3, r2
 800051e:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8000520:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000522:	8afb      	ldrh	r3, [r7, #22]
 8000524:	4413      	add	r3, r2
 8000526:	b29b      	uxth	r3, r3
 8000528:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	3301      	adds	r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	ddd0      	ble.n	80004da <GFX_WriteLine+0xb2>
	        }
	    }
}
 8000538:	bf00      	nop
 800053a:	bf00      	nop
 800053c:	3730      	adds	r7, #48	; 0x30
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af02      	add	r7, sp, #8
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
 800054e:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000550:	68ba      	ldr	r2, [r7, #8]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	887b      	ldrh	r3, [r7, #2]
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	4613      	mov	r3, r2
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	68b9      	ldr	r1, [r7, #8]
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	f7ff ff60 	bl	8000428 <GFX_WriteLine>
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4413      	add	r3, r2
 8000584:	1e5a      	subs	r2, r3, #1
 8000586:	887b      	ldrh	r3, [r7, #2]
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	68f8      	ldr	r0, [r7, #12]
 8000590:	f7ff ff4a 	bl	8000428 <GFX_WriteLine>
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
 80005a8:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d113      	bne.n	80005da <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	dd05      	ble.n	80005c6 <GFX_DrawLine+0x2a>
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1ad3      	subs	r3, r2, r3
 80005cc:	1c5a      	adds	r2, r3, #1
 80005ce:	8c3b      	ldrh	r3, [r7, #32]
 80005d0:	68b9      	ldr	r1, [r7, #8]
 80005d2:	68f8      	ldr	r0, [r7, #12]
 80005d4:	f7ff ffb5 	bl	8000542 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80005d8:	e01f      	b.n	800061a <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d113      	bne.n	800060a <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	dd05      	ble.n	80005f6 <GFX_DrawLine+0x5a>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	1c5a      	adds	r2, r3, #1
 80005fe:	8c3b      	ldrh	r3, [r7, #32]
 8000600:	68b9      	ldr	r1, [r7, #8]
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	f7ff ffb4 	bl	8000570 <GFX_DrawFastHLine>
}
 8000608:	e007      	b.n	800061a <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 800060a:	8c3b      	ldrh	r3, [r7, #32]
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	68f8      	ldr	r0, [r7, #12]
 8000616:	f7ff ff07 	bl	8000428 <GFX_WriteLine>
}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <GFX_DrawRectangle>:
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b084      	sub	sp, #16
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	4611      	mov	r1, r2
 800062e:	461a      	mov	r2, r3
 8000630:	460b      	mov	r3, r1
 8000632:	80fb      	strh	r3, [r7, #6]
 8000634:	4613      	mov	r3, r2
 8000636:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 8000638:	88fa      	ldrh	r2, [r7, #6]
 800063a:	8b3b      	ldrh	r3, [r7, #24]
 800063c:	68b9      	ldr	r1, [r7, #8]
 800063e:	68f8      	ldr	r0, [r7, #12]
 8000640:	f7ff ff96 	bl	8000570 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 8000644:	88ba      	ldrh	r2, [r7, #4]
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	4413      	add	r3, r2
 800064a:	1e59      	subs	r1, r3, #1
 800064c:	88fa      	ldrh	r2, [r7, #6]
 800064e:	8b3b      	ldrh	r3, [r7, #24]
 8000650:	68f8      	ldr	r0, [r7, #12]
 8000652:	f7ff ff8d 	bl	8000570 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 8000656:	88ba      	ldrh	r2, [r7, #4]
 8000658:	8b3b      	ldrh	r3, [r7, #24]
 800065a:	68b9      	ldr	r1, [r7, #8]
 800065c:	68f8      	ldr	r0, [r7, #12]
 800065e:	f7ff ff70 	bl	8000542 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 8000662:	88fa      	ldrh	r2, [r7, #6]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	1e58      	subs	r0, r3, #1
 800066a:	88ba      	ldrh	r2, [r7, #4]
 800066c:	8b3b      	ldrh	r3, [r7, #24]
 800066e:	68b9      	ldr	r1, [r7, #8]
 8000670:	f7ff ff67 	bl	8000542 <GFX_DrawFastVLine>

}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	4611      	mov	r1, r2
 8000688:	461a      	mov	r2, r3
 800068a:	460b      	mov	r3, r1
 800068c:	80fb      	strh	r3, [r7, #6]
 800068e:	4613      	mov	r3, r2
 8000690:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	e008      	b.n	80006aa <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8000698:	88ba      	ldrh	r2, [r7, #4]
 800069a:	8c3b      	ldrh	r3, [r7, #32]
 800069c:	68b9      	ldr	r1, [r7, #8]
 800069e:	6978      	ldr	r0, [r7, #20]
 80006a0:	f7ff ff4f 	bl	8000542 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	3301      	adds	r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	88fa      	ldrh	r2, [r7, #6]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4413      	add	r3, r2
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	dbf0      	blt.n	8000698 <GFX_DrawFillRectangle+0x1c>
    }

}
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <GFX_DrawFillTriangle>:
    GFX_DrawLine(x2, y2, x0, y0, color);
}
#endif
#if USING_FILL_TRIANGLE == 1
void GFX_DrawFillTriangle(int x0, int y0, int x1, int y1, int x2, int y2, ColorType color)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	603b      	str	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dd0b      	ble.n	80006ee <GFX_DrawFillTriangle+0x2e>
    	_swap_int(y0, y1); _swap_int(x0, x1);
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006ec:	607b      	str	r3, [r7, #4]
    }
    if (y1 > y2) {
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006f2:	429a      	cmp	r2, r3
 80006f4:	dd0b      	ble.n	800070e <GFX_DrawFillTriangle+0x4e>
    	_swap_int(y2, y1); _swap_int(x2, x1);
 80006f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80006fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000704:	633b      	str	r3, [r7, #48]	; 0x30
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	65bb      	str	r3, [r7, #88]	; 0x58
 800070a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800070c:	607b      	str	r3, [r7, #4]
    }
    if (y0 > y1) {
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	429a      	cmp	r2, r3
 8000714:	dd0b      	ble.n	800072e <GFX_DrawFillTriangle+0x6e>
    	_swap_int(y0, y1); _swap_int(x0, x1);
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072c:	607b      	str	r3, [r7, #4]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000732:	429a      	cmp	r2, r3
 8000734:	d136      	bne.n	80007a4 <GFX_DrawFillTriangle+0xe4>
        a = b = x0;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800073c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000740:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        if(x1 < a)      a = x1;
 8000744:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	429a      	cmp	r2, r3
 800074c:	da03      	bge.n	8000756 <GFX_DrawFillTriangle+0x96>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000754:	e007      	b.n	8000766 <GFX_DrawFillTriangle+0xa6>
        else if(x1 > b) b = x1;
 8000756:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	dd02      	ble.n	8000766 <GFX_DrawFillTriangle+0xa6>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        if(x2 < a)      a = x2;
 8000766:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800076a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800076c:	429a      	cmp	r2, r3
 800076e:	da03      	bge.n	8000778 <GFX_DrawFillTriangle+0xb8>
 8000770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000772:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000776:	e007      	b.n	8000788 <GFX_DrawFillTriangle+0xc8>
        else if(x2 > b) b = x2;
 8000778:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800077c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800077e:	429a      	cmp	r2, r3
 8000780:	dd02      	ble.n	8000788 <GFX_DrawFillTriangle+0xc8>
 8000782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000784:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        GFX_DrawFastHLine(a, y0, b-a+1, color);
 8000788:	f9b7 004e 	ldrsh.w	r0, [r7, #78]	; 0x4e
 800078c:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8000790:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	f7ff fee7 	bl	8000570 <GFX_DrawFastHLine>
        return;
 80007a2:	e0eb      	b.n	800097c <GFX_DrawFillTriangle+0x2bc>
    }

    int16_t
    dx01 = x1 - x0,
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	84fb      	strh	r3, [r7, #38]	; 0x26
    dy01 = y1 - y0,
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	b29b      	uxth	r3, r3
 80007be:	84bb      	strh	r3, [r7, #36]	; 0x24
    dx02 = x2 - x0,
 80007c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	847b      	strh	r3, [r7, #34]	; 0x22
    dy02 = y2 - y0,
 80007ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	b29b      	uxth	r3, r3
 80007da:	843b      	strh	r3, [r7, #32]
    dx12 = x2 - x1,
 80007dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007de:	b29a      	uxth	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	83fb      	strh	r3, [r7, #30]
    dy12 = y2 - y1;
 80007ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	83bb      	strh	r3, [r7, #28]
    int32_t
    sa   = 0,
 80007f8:	2300      	movs	r3, #0
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
    sb   = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000804:	429a      	cmp	r2, r3
 8000806:	d103      	bne.n	8000810 <GFX_DrawFillTriangle+0x150>
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800080e:	e005      	b.n	800081c <GFX_DrawFillTriangle+0x15c>
    else         last = y1-1; // Skip it
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	b29b      	uxth	r3, r3
 8000814:	3b01      	subs	r3, #1
 8000816:	b29b      	uxth	r3, r3
 8000818:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    for(y=y0; y<=last; y++) {
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8000822:	e046      	b.n	80008b2 <GFX_DrawFillTriangle+0x1f2>
        a   = x0 + sa / dy01;
 8000824:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000828:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800082a:	fb92 f3f3 	sdiv	r3, r2, r3
 800082e:	b29a      	uxth	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	b29b      	uxth	r3, r3
 8000834:	4413      	add	r3, r2
 8000836:	b29b      	uxth	r3, r3
 8000838:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        b   = x0 + sb / dy02;
 800083c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000840:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000842:	fb92 f3f3 	sdiv	r3, r2, r3
 8000846:	b29a      	uxth	r2, r3
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	b29b      	uxth	r3, r3
 800084c:	4413      	add	r3, r2
 800084e:	b29b      	uxth	r3, r3
 8000850:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        sa += dx01;
 8000854:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800085a:	4413      	add	r3, r2
 800085c:	647b      	str	r3, [r7, #68]	; 0x44
        sb += dx02;
 800085e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000862:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000864:	4413      	add	r3, r2
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int(a,b);
 8000868:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800086c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8000870:	429a      	cmp	r2, r3
 8000872:	dd09      	ble.n	8000888 <GFX_DrawFillTriangle+0x1c8>
 8000874:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800087e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        GFX_DrawFastHLine(a, y, b-a+1, color);
 8000888:	f9b7 004e 	ldrsh.w	r0, [r7, #78]	; 0x4e
 800088c:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 8000890:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8000894:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80008a0:	f7ff fe66 	bl	8000570 <GFX_DrawFastHLine>
    for(y=y0; y<=last; y++) {
 80008a4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	3301      	adds	r3, #1
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80008b2:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 80008b6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80008ba:	429a      	cmp	r2, r3
 80008bc:	ddb2      	ble.n	8000824 <GFX_DrawFillTriangle+0x164>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = dx12 * (y - y1);
 80008be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008c2:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	1a8a      	subs	r2, r1, r2
 80008ca:	fb02 f303 	mul.w	r3, r2, r3
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
    sb = dx02 * (y - y0);
 80008d0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80008d4:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 80008d8:	68ba      	ldr	r2, [r7, #8]
 80008da:	1a8a      	subs	r2, r1, r2
 80008dc:	fb02 f303 	mul.w	r3, r2, r3
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40
    for(; y<=y2; y++) {
 80008e2:	e046      	b.n	8000972 <GFX_DrawFillTriangle+0x2b2>
        a   = x1 + sa / dy12;
 80008e4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80008e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80008ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4413      	add	r3, r2
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        b   = x0 + sb / dy02;
 80008fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000900:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000902:	fb92 f3f3 	sdiv	r3, r2, r3
 8000906:	b29a      	uxth	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	b29b      	uxth	r3, r3
 800090c:	4413      	add	r3, r2
 800090e:	b29b      	uxth	r3, r3
 8000910:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        sa += dx12;
 8000914:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800091a:	4413      	add	r3, r2
 800091c:	647b      	str	r3, [r7, #68]	; 0x44
        sb += dx02;
 800091e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000922:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000924:	4413      	add	r3, r2
 8000926:	643b      	str	r3, [r7, #64]	; 0x40
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int(a,b);
 8000928:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800092c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8000930:	429a      	cmp	r2, r3
 8000932:	dd09      	ble.n	8000948 <GFX_DrawFillTriangle+0x288>
 8000934:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000938:	61bb      	str	r3, [r7, #24]
 800093a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800093e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        GFX_DrawFastHLine(a, y, b-a+1, color);
 8000948:	f9b7 004e 	ldrsh.w	r0, [r7, #78]	; 0x4e
 800094c:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 8000950:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8000954:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	1c5a      	adds	r2, r3, #1
 800095c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000960:	f7ff fe06 	bl	8000570 <GFX_DrawFastHLine>
    for(; y<=y2; y++) {
 8000964:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000968:	b29b      	uxth	r3, r3
 800096a:	3301      	adds	r3, #1
 800096c:	b29b      	uxth	r3, r3
 800096e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8000972:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000976:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000978:	429a      	cmp	r2, r3
 800097a:	dab3      	bge.n	80008e4 <GFX_DrawFillTriangle+0x224>
    }
}
 800097c:	3750      	adds	r7, #80	; 0x50
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <ILI9341_Delay>:
#include "main.h"

SPI_HandleTypeDef *Tft_hspi;

// Delay for the functions
static void ILI9341_Delay(uint32_t ms) { HAL_Delay(ms); }
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f002 fbf0 	bl	8003170 <HAL_Delay>
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <ILI9341_SendTFT>:

// Transmit data to ILI controller
static void ILI9341_SendTFT(uint8_t *Data, uint8_t Lenght)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	70fb      	strb	r3, [r7, #3]
#if (ILI9341_HAL_OPTIMIZE == 1)
  // !! USE ONLY TFT FOR THIS SPI !!
  // optimizing like this doesnt LOCK SPI for other IT/DMA transfers

  // if there is something to send
  while (Lenght > 0U)
 80009a4:	e014      	b.n	80009d0 <ILI9341_SendTFT+0x38>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <ILI9341_SendTFT+0x5c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d10c      	bne.n	80009d0 <ILI9341_SendTFT+0x38>
        {
          // put value from Data pointer to register DR
          *((__IO uint8_t *)&Tft_hspi->Instance->DR) = *Data;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <ILI9341_SendTFT+0x5c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	330c      	adds	r3, #12
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	701a      	strb	r2, [r3, #0]
          // increment pointer
          Data++;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3301      	adds	r3, #1
 80009c8:	607b      	str	r3, [r7, #4]
          // decrement lenght
          Lenght--;
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	70fb      	strb	r3, [r7, #3]
  while (Lenght > 0U)
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d1e7      	bne.n	80009a6 <ILI9341_SendTFT+0xe>
        }
    }
  // blocking function for SPI , wait before sending next info
  // it is required beacuse when flag ENABLE is ready
  // it doesnt mean that transfer is ready
  while (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 80009d6:	bf00      	nop
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <ILI9341_SendTFT+0x5c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e4:	2b80      	cmp	r3, #128	; 0x80
 80009e6:	d0f7      	beq.n	80009d8 <ILI9341_SendTFT+0x40>
    // Without HAL optimizng
#else
  HAL_SPI_Transmit(Tft_hspi, Data, Lenght, ILI9341_SPI_TIMEOUT);
}
#endif
}
 80009e8:	bf00      	nop
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	200001e8 	.word	0x200001e8

080009f8 <ILI9341_SendCommand>:
// Send single command
static void ILI9341_SendCommand(uint8_t Command)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC LOW
  ILI9341_DC_LOW;
 8000a02:	2200      	movs	r2, #0
 8000a04:	2102      	movs	r1, #2
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <ILI9341_SendCommand+0x28>)
 8000a08:	f003 f8fc 	bl	8003c04 <HAL_GPIO_WritePin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ffc1 	bl	8000998 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40010c00 	.word	0x40010c00

08000a24 <ILI9341_SendCommandAndData>:
#endif

// Send command then data
static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data,
                                       uint16_t Lenght)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	4613      	mov	r3, r2
 8000a32:	80bb      	strh	r3, [r7, #4]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC LOW
  ILI9341_DC_LOW;
 8000a34:	2200      	movs	r2, #0
 8000a36:	2102      	movs	r1, #2
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <ILI9341_SendCommandAndData+0x44>)
 8000a3a:	f003 f8e3 	bl	8003c04 <HAL_GPIO_WritePin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	2101      	movs	r1, #1
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ffa8 	bl	8000998 <ILI9341_SendTFT>

  // DC HIGH
  ILI9341_DC_HIGH;
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <ILI9341_SendCommandAndData+0x44>)
 8000a4e:	f003 f8d9 	bl	8003c04 <HAL_GPIO_WritePin>

  // SEND DATA
  ILI9341_SendTFT(Data, Lenght);
 8000a52:	88bb      	ldrh	r3, [r7, #4]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4619      	mov	r1, r3
 8000a58:	6838      	ldr	r0, [r7, #0]
 8000a5a:	f7ff ff9d 	bl	8000998 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40010c00 	.word	0x40010c00

08000a6c <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t Rotation)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  if (Rotation > 3)
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d820      	bhi.n	8000abe <ILI9341_SetRotation+0x52>
    return;

  switch (Rotation)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d816      	bhi.n	8000ab0 <ILI9341_SetRotation+0x44>
 8000a82:	a201      	add	r2, pc, #4	; (adr r2, 8000a88 <ILI9341_SetRotation+0x1c>)
 8000a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a88:	08000a99 	.word	0x08000a99
 8000a8c:	08000a9f 	.word	0x08000a9f
 8000a90:	08000aa5 	.word	0x08000aa5
 8000a94:	08000aab 	.word	0x08000aab
    {
    case 0:
      Rotation = (MADCTL_MX | MADCTL_BGR);
 8000a98:	2348      	movs	r3, #72	; 0x48
 8000a9a:	71fb      	strb	r3, [r7, #7]
      break;
 8000a9c:	e008      	b.n	8000ab0 <ILI9341_SetRotation+0x44>
    case 1:
      Rotation = (MADCTL_MV | MADCTL_BGR);
 8000a9e:	2328      	movs	r3, #40	; 0x28
 8000aa0:	71fb      	strb	r3, [r7, #7]
      break;
 8000aa2:	e005      	b.n	8000ab0 <ILI9341_SetRotation+0x44>
    case 2:
      Rotation = (MADCTL_MY | MADCTL_BGR);
 8000aa4:	2388      	movs	r3, #136	; 0x88
 8000aa6:	71fb      	strb	r3, [r7, #7]
      break;
 8000aa8:	e002      	b.n	8000ab0 <ILI9341_SetRotation+0x44>
    case 3:
      Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000aaa:	23e8      	movs	r3, #232	; 0xe8
 8000aac:	71fb      	strb	r3, [r7, #7]
      break;
 8000aae:	bf00      	nop
    }

  ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2036      	movs	r0, #54	; 0x36
 8000ab8:	f7ff ffb4 	bl	8000a24 <ILI9341_SendCommandAndData>
 8000abc:	e000      	b.n	8000ac0 <ILI9341_SetRotation+0x54>
    return;
 8000abe:	bf00      	nop
}
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop

08000ac8 <ILI9341_SetAddrWindow>:

// Set adress range window
static void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w,
                                  uint16_t h)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4604      	mov	r4, r0
 8000ad0:	4608      	mov	r0, r1
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4623      	mov	r3, r4
 8000ad8:	80fb      	strh	r3, [r7, #6]
 8000ada:	4603      	mov	r3, r0
 8000adc:	80bb      	strh	r3, [r7, #4]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	807b      	strh	r3, [r7, #2]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	803b      	strh	r3, [r7, #0]
  // prepare buffer for data
  uint8_t DataToTransfer[4];

  // calculate ranges
  uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8000ae6:	88fa      	ldrh	r2, [r7, #6]
 8000ae8:	887b      	ldrh	r3, [r7, #2]
 8000aea:	4413      	add	r3, r2
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	3b01      	subs	r3, #1
 8000af0:	81fb      	strh	r3, [r7, #14]
 8000af2:	88ba      	ldrh	r2, [r7, #4]
 8000af4:	883b      	ldrh	r3, [r7, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	3b01      	subs	r3, #1
 8000afc:	81bb      	strh	r3, [r7, #12]

  //	put data into buffer
  DataToTransfer[0] = (x1 >> 8);
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = x1 & 0xFF;
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (x2 >> 8);
 8000b0e:	89fb      	ldrh	r3, [r7, #14]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = x2 & 0xFF;
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	72fb      	strb	r3, [r7, #11]

  // send command and data about x
  ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4);
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	2204      	movs	r2, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	202a      	movs	r0, #42	; 0x2a
 8000b28:	f7ff ff7c 	bl	8000a24 <ILI9341_SendCommandAndData>

  //	put data into buffer
  DataToTransfer[0] = (y1 >> 8);
 8000b2c:	88bb      	ldrh	r3, [r7, #4]
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = y1 & 0xFF;
 8000b36:	88bb      	ldrh	r3, [r7, #4]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (y2 >> 8);
 8000b3c:	89bb      	ldrh	r3, [r7, #12]
 8000b3e:	0a1b      	lsrs	r3, r3, #8
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = y2 & 0xFF;
 8000b46:	89bb      	ldrh	r3, [r7, #12]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	72fb      	strb	r3, [r7, #11]

  // send command and data about y
  ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4);
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	2204      	movs	r2, #4
 8000b52:	4619      	mov	r1, r3
 8000b54:	202b      	movs	r0, #43	; 0x2b
 8000b56:	f7ff ff65 	bl	8000a24 <ILI9341_SendCommandAndData>

  ILI9341_SendCommand(ILI9341_RAMWR); // Write to RAM
 8000b5a:	202c      	movs	r0, #44	; 0x2c
 8000b5c:	f7ff ff4c 	bl	80009f8 <ILI9341_SendCommand>
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd90      	pop	{r4, r7, pc}

08000b68 <ILI9341_WritePixel>:

// Write single pixel
void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
 8000b72:	460b      	mov	r3, r1
 8000b74:	80bb      	strh	r3, [r7, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	807b      	strh	r3, [r7, #2]
  // prepare buffer for data
  uint8_t DataToTransfer[2];

  // check TFT range to not overwrite something else
  if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT))
 8000b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db21      	blt.n	8000bc6 <ILI9341_WritePixel+0x5e>
 8000b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b86:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b8a:	da1c      	bge.n	8000bc6 <ILI9341_WritePixel+0x5e>
 8000b8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db18      	blt.n	8000bc6 <ILI9341_WritePixel+0x5e>
 8000b94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b98:	2bef      	cmp	r3, #239	; 0xef
 8000b9a:	dc14      	bgt.n	8000bc6 <ILI9341_WritePixel+0x5e>
    {
      //	put data into buffer
      DataToTransfer[0] = (color >> 8);
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	0a1b      	lsrs	r3, r3, #8
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	733b      	strb	r3, [r7, #12]
      DataToTransfer[1] = color & 0xFF;
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	737b      	strb	r3, [r7, #13]

      // Set window range the single pixel in tft
      // x,y positions 1,1 ranges
      ILI9341_SetAddrWindow(x, y, 1, 1);
 8000bac:	88f8      	ldrh	r0, [r7, #6]
 8000bae:	88b9      	ldrh	r1, [r7, #4]
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f7ff ff88 	bl	8000ac8 <ILI9341_SetAddrWindow>

      // send command that we are writing to RAM, and also color data
      ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	202c      	movs	r0, #44	; 0x2c
 8000bc2:	f7ff ff2f 	bl	8000a24 <ILI9341_SendCommandAndData>
      // Send 16 bit color to that range
    }
}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <ILI9341_ClearDisplay>:
    }
}

// Clear whole dipslay with a color
void ILI9341_ClearDisplay(uint16_t color)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
  uint32_t Lenght = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8000bda:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000bde:	60fb      	str	r3, [r7, #12]

  // set window for whole screen
  ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8000be0:	23f0      	movs	r3, #240	; 0xf0
 8000be2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000be6:	2100      	movs	r1, #0
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff ff6d 	bl	8000ac8 <ILI9341_SetAddrWindow>

  // send command that we are writing to RAM
  ILI9341_SendCommand(ILI9341_RAMWR);
 8000bee:	202c      	movs	r0, #44	; 0x2c
 8000bf0:	f7ff ff02 	bl	80009f8 <ILI9341_SendCommand>
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC HIGH
  ILI9341_DC_HIGH;
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	481c      	ldr	r0, [pc, #112]	; (8000c6c <ILI9341_ClearDisplay+0x9c>)
 8000bfa:	f003 f803 	bl	8003c04 <HAL_GPIO_WritePin>

  while (Lenght > 0U)
 8000bfe:	e023      	b.n	8000c48 <ILI9341_ClearDisplay+0x78>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <ILI9341_ClearDisplay+0xa0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d11b      	bne.n	8000c48 <ILI9341_ClearDisplay+0x78>
        {
          // put value from Data pointer to register DR
          *((__IO uint8_t *)&Tft_hspi->Instance->DR) = color >> 8;
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	0a1b      	lsrs	r3, r3, #8
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <ILI9341_ClearDisplay+0xa0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	330c      	adds	r3, #12
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	701a      	strb	r2, [r3, #0]

          // wait for the flag to be reset before sending next byte
          while (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8000c22:	bf00      	nop
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <ILI9341_ClearDisplay+0xa0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d1f7      	bne.n	8000c24 <ILI9341_ClearDisplay+0x54>
            {
            }

          // put second byte in
          *((__IO uint8_t *)&Tft_hspi->Instance->DR) = color & 0xFF;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <ILI9341_ClearDisplay+0xa0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	330c      	adds	r3, #12
 8000c3c:	88fa      	ldrh	r2, [r7, #6]
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	701a      	strb	r2, [r3, #0]

          // decrement lenght
          Lenght--;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
  while (Lenght > 0U)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1d8      	bne.n	8000c00 <ILI9341_ClearDisplay+0x30>
    }

  // blocking function for SPI , wait before sending next info
  // it is required beacuse when flag ENABLE is ready
  // it doesnt mean that transfer is ready
  while (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8000c4e:	bf00      	nop
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <ILI9341_ClearDisplay+0xa0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5c:	2b80      	cmp	r3, #128	; 0x80
 8000c5e:	d0f7      	beq.n	8000c50 <ILI9341_ClearDisplay+0x80>
  for (uint32_t i = 0; i < Lenght; i++)
    {
      ILI9341_SendData16(color);
    }
#endif
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40010c00 	.word	0x40010c00
 8000c70:	200001e8 	.word	0x200001e8

08000c74 <ILI9341_Init>:
    0x80, // Display on
    0x00  // End of list
};

void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  // assign correct spi
  Tft_hspi = hspi;
 8000c7c:	4a24      	ldr	r2, [pc, #144]	; (8000d10 <ILI9341_Init+0x9c>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]

  // prepare data

  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 8000c82:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <ILI9341_Init+0xa0>)
 8000c84:	60fb      	str	r3, [r7, #12]

#if (ILI9341_HAL_OPTIMIZE == 1)
  __HAL_SPI_ENABLE(hspi);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c94:	601a      	str	r2, [r3, #0]
#endif

// if hardware reset is defined
#if (ILI9341_USE_HW_RESET == 1)
  ILI9341_RST_LOW;
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9c:	481e      	ldr	r0, [pc, #120]	; (8000d18 <ILI9341_Init+0xa4>)
 8000c9e:	f002 ffb1 	bl	8003c04 <HAL_GPIO_WritePin>
  ILI9341_Delay(10);
 8000ca2:	200a      	movs	r0, #10
 8000ca4:	f7ff fe6d 	bl	8000982 <ILI9341_Delay>
  ILI9341_RST_HIGH;
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cae:	481a      	ldr	r0, [pc, #104]	; (8000d18 <ILI9341_Init+0xa4>)
 8000cb0:	f002 ffa8 	bl	8003c04 <HAL_GPIO_WritePin>
  ILI9341_Delay(10);
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	f7ff fe64 	bl	8000982 <ILI9341_Delay>
  ILI9341_SendCommand(ILI9341_SWRESET); // Engage software reset
  ILI9341_Delay(150);
#endif

  // As long as value under address is not 0 loop
  while ((cmd = *(addr++)) > 0)
 8000cba:	e01a      	b.n	8000cf2 <ILI9341_Init+0x7e>
    {
      // assign value form address to x (second value that is number of data to
      // be send)
      x = *(addr++);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60fa      	str	r2, [r7, #12]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	72bb      	strb	r3, [r7, #10]

      // mask this value to maximum of 127
      // 0x7F	0111 1111
      // so if we send 0x80 as second argument then we just send command ->
      // without data
      numArgs = x & 0x7F;
 8000cc6:	7abb      	ldrb	r3, [r7, #10]
 8000cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ccc:	727b      	strb	r3, [r7, #9]

      // send command then array of data
      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs);
 8000cce:	7a7b      	ldrb	r3, [r7, #9]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	7afb      	ldrb	r3, [r7, #11]
 8000cd4:	68f9      	ldr	r1, [r7, #12]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fea4 	bl	8000a24 <ILI9341_SendCommandAndData>

      // move adress to next command
      addr += numArgs;
 8000cdc:	7a7b      	ldrb	r3, [r7, #9]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]

      // if only command is sent then make a delay
      if (x & 0x80)
 8000ce4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	da02      	bge.n	8000cf2 <ILI9341_Init+0x7e>
        {
          ILI9341_Delay(150);
 8000cec:	2096      	movs	r0, #150	; 0x96
 8000cee:	f7ff fe48 	bl	8000982 <ILI9341_Delay>
  while ((cmd = *(addr++)) > 0)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	60fa      	str	r2, [r7, #12]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	72fb      	strb	r3, [r7, #11]
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1dc      	bne.n	8000cbc <ILI9341_Init+0x48>
        }
    }

  ILI9341_SetRotation(ILI9341_ROTATION);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff feb2 	bl	8000a6c <ILI9341_SetRotation>
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200001e8 	.word	0x200001e8
 8000d14:	08005c78 	.word	0x08005c78
 8000d18:	40010c00 	.word	0x40010c00

08000d1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_DMA_Init+0x38>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <MX_DMA_Init+0x38>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6153      	str	r3, [r2, #20]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_DMA_Init+0x38>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	200d      	movs	r0, #13
 8000d40:	f002 fb11 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d44:	200d      	movs	r0, #13
 8000d46:	f002 fb2a 	bl	800339e <HAL_NVIC_EnableIRQ>

}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000

08000d58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MX_GPIO_Init+0x90>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a1d      	ldr	r2, [pc, #116]	; (8000de8 <MX_GPIO_Init+0x90>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_GPIO_Init+0x90>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MX_GPIO_Init+0x90>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <MX_GPIO_Init+0x90>)
 8000d8a:	f043 0308 	orr.w	r3, r3, #8
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_GPIO_Init+0x90>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f240 4102 	movw	r1, #1026	; 0x402
 8000da2:	4812      	ldr	r0, [pc, #72]	; (8000dec <MX_GPIO_Init+0x94>)
 8000da4:	f002 ff2e 	bl	8003c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_RST_Pin;
 8000da8:	f240 4302 	movw	r3, #1026	; 0x402
 8000dac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2302      	movs	r3, #2
 8000db8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480a      	ldr	r0, [pc, #40]	; (8000dec <MX_GPIO_Init+0x94>)
 8000dc2:	f002 fda5 	bl	8003910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BUTTON_LEFT_Pin|BUTTON_RIGHT_Pin|BUTTON_DOWN_Pin|BUTTON_UP_Pin
 8000dc6:	23f8      	movs	r3, #248	; 0xf8
 8000dc8:	60bb      	str	r3, [r7, #8]
                          |BUTTON_ENTER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_GPIO_Init+0x98>)
 8000dcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_GPIO_Init+0x94>)
 8000dda:	f002 fd99 	bl	8003910 <HAL_GPIO_Init>

}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010c00 	.word	0x40010c00
 8000df0:	10210000 	.word	0x10210000

08000df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df8:	f002 f958 	bl	80030ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfc:	f000 f80d 	bl	8000e1a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e00:	f7ff ffaa 	bl	8000d58 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e04:	f000 f87c 	bl	8000f00 <MX_SPI1_Init>
  MX_DMA_Init();
 8000e08:	f7ff ff88 	bl	8000d1c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e0c:	f000 f9f2 	bl	80011f4 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000e10:	f000 f844 	bl	8000e9c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */



  hmi_main();
 8000e14:	f000 fab4 	bl	8001380 <hmi_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000e18:	e7fe      	b.n	8000e18 <main+0x24>

08000e1a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b090      	sub	sp, #64	; 0x40
 8000e1e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	2228      	movs	r2, #40	; 0x28
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 fa3f 	bl	80052ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e40:	2301      	movs	r3, #1
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e44:	2310      	movs	r3, #16
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e50:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 ff02 	bl	8003c64 <HAL_RCC_OscConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e66:	f000 f845 	bl	8000ef4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2102      	movs	r1, #2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f003 f96d 	bl	8004164 <HAL_RCC_ClockConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e90:	f000 f830 	bl	8000ef4 <Error_Handler>
  }
}
 8000e94:	bf00      	nop
 8000e96:	3740      	adds	r7, #64	; 0x40
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	200f      	movs	r0, #15
 8000ea6:	f002 fa5e 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000eaa:	200f      	movs	r0, #15
 8000eac:	f002 fa77 	bl	800339e <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2025      	movs	r0, #37	; 0x25
 8000eb6:	f002 fa56 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000eba:	2025      	movs	r0, #37	; 0x25
 8000ebc:	f002 fa6f 	bl	800339e <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2017      	movs	r0, #23
 8000ec6:	f002 fa4e 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eca:	2017      	movs	r0, #23
 8000ecc:	f002 fa67 	bl	800339e <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	200a      	movs	r0, #10
 8000ed6:	f002 fa46 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000eda:	200a      	movs	r0, #10
 8000edc:	f002 fa5f 	bl	800339e <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2009      	movs	r0, #9
 8000ee6:	f002 fa3e 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000eea:	2009      	movs	r0, #9
 8000eec:	f002 fa57 	bl	800339e <HAL_NVIC_EnableIRQ>
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
}
 8000efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000efc:	e7fe      	b.n	8000efc <Error_Handler+0x8>
	...

08000f00 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f06:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <MX_SPI1_Init+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f34:	2210      	movs	r2, #16
 8000f36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f4c:	220a      	movs	r2, #10
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f52:	f003 faa1 	bl	8004498 <HAL_SPI_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f5c:	f7ff ffca 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200001ec 	.word	0x200001ec
 8000f68:	40013000 	.word	0x40013000

08000f6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a2e      	ldr	r2, [pc, #184]	; (8001040 <HAL_SPI_MspInit+0xd4>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d155      	bne.n	8001038 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <HAL_SPI_MspInit+0xd8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a2c      	ldr	r2, [pc, #176]	; (8001044 <HAL_SPI_MspInit+0xd8>)
 8000f92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <HAL_SPI_MspInit+0xd8>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <HAL_SPI_MspInit+0xd8>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a26      	ldr	r2, [pc, #152]	; (8001044 <HAL_SPI_MspInit+0xd8>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b24      	ldr	r3, [pc, #144]	; (8001044 <HAL_SPI_MspInit+0xd8>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000fbc:	23a0      	movs	r3, #160	; 0xa0
 8000fbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481e      	ldr	r0, [pc, #120]	; (8001048 <HAL_SPI_MspInit+0xdc>)
 8000fd0:	f002 fc9e 	bl	8003910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fd4:	2340      	movs	r3, #64	; 0x40
 8000fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4818      	ldr	r0, [pc, #96]	; (8001048 <HAL_SPI_MspInit+0xdc>)
 8000fe8:	f002 fc92 	bl	8003910 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8000fee:	4a18      	ldr	r2, [pc, #96]	; (8001050 <HAL_SPI_MspInit+0xe4>)
 8000ff0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8000ff4:	2210      	movs	r2, #16
 8000ff6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_SPI_MspInit+0xe0>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <HAL_SPI_MspInit+0xe0>)
 800101e:	f002 f9d9 	bl	80033d4 <HAL_DMA_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8001028:	f7ff ff64 	bl	8000ef4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8001030:	649a      	str	r2, [r3, #72]	; 0x48
 8001032:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40013000 	.word	0x40013000
 8001044:	40021000 	.word	0x40021000
 8001048:	40010800 	.word	0x40010800
 800104c:	20000244 	.word	0x20000244
 8001050:	40020030 	.word	0x40020030

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_MspInit+0x5c>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <HAL_MspInit+0x5c>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6193      	str	r3, [r2, #24]
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_MspInit+0x5c>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_MspInit+0x5c>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <HAL_MspInit+0x5c>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	61d3      	str	r3, [r2, #28]
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_MspInit+0x5c>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_MspInit+0x60>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_MspInit+0x60>)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010000 	.word	0x40010000

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr

080010fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fe:	f002 f81b 	bl	8003138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}

08001106 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800110a:	2008      	movs	r0, #8
 800110c:	f002 fd92 	bl	8003c34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001118:	2010      	movs	r0, #16
 800111a:	f002 fd8b 	bl	8003c34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <DMA1_Channel3_IRQHandler+0x10>)
 800112a:	f002 fabd 	bl	80036a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000244 	.word	0x20000244

08001138 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <DMA1_Channel5_IRQHandler+0x10>)
 800113e:	f002 fab3 	bl	80036a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000288 	.word	0x20000288

0800114c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001150:	2020      	movs	r0, #32
 8001152:	f002 fd6f 	bl	8003c34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001156:	2040      	movs	r0, #64	; 0x40
 8001158:	f002 fd6c 	bl	8003c34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800115c:	2080      	movs	r0, #128	; 0x80
 800115e:	f002 fd69 	bl	8003c34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <USART1_IRQHandler+0x10>)
 800116e:	f003 fb45 	bl	80047fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200002cc 	.word	0x200002cc

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f004 f846 	bl	800523c <__errno>
 80011b0:	4603      	mov	r3, r0
 80011b2:	220c      	movs	r2, #12
 80011b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20002800 	.word	0x20002800
 80011dc:	00000400 	.word	0x00000400
 80011e0:	200000a8 	.word	0x200000a8
 80011e4:	20000328 	.word	0x20000328

080011e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <MX_USART1_UART_Init+0x50>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 8001200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001204:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 800122c:	f003 f9b8 	bl	80045a0 <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001236:	f7ff fe5d 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200002cc 	.word	0x200002cc
 8001244:	40013800 	.word	0x40013800

08001248 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a2f      	ldr	r2, [pc, #188]	; (8001320 <HAL_UART_MspInit+0xd8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d157      	bne.n	8001318 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001268:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <HAL_UART_MspInit+0xdc>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a2d      	ldr	r2, [pc, #180]	; (8001324 <HAL_UART_MspInit+0xdc>)
 800126e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <HAL_UART_MspInit+0xdc>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <HAL_UART_MspInit+0xdc>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a27      	ldr	r2, [pc, #156]	; (8001324 <HAL_UART_MspInit+0xdc>)
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <HAL_UART_MspInit+0xdc>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4619      	mov	r1, r3
 80012ac:	481e      	ldr	r0, [pc, #120]	; (8001328 <HAL_UART_MspInit+0xe0>)
 80012ae:	f002 fb2f 	bl	8003910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	4818      	ldr	r0, [pc, #96]	; (8001328 <HAL_UART_MspInit+0xe0>)
 80012c8:	f002 fb22 	bl	8003910 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012ce:	4a18      	ldr	r2, [pc, #96]	; (8001330 <HAL_UART_MspInit+0xe8>)
 80012d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012e0:	2280      	movs	r2, #128	; 0x80
 80012e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80012fc:	480b      	ldr	r0, [pc, #44]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012fe:	f002 f869 	bl	80033d4 <HAL_DMA_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001308:	f7ff fdf4 	bl	8000ef4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_UART_MspInit+0xe4>)
 8001310:	639a      	str	r2, [r3, #56]	; 0x38
 8001312:	4a06      	ldr	r2, [pc, #24]	; (800132c <HAL_UART_MspInit+0xe4>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40013800 	.word	0x40013800
 8001324:	40021000 	.word	0x40021000
 8001328:	40010800 	.word	0x40010800
 800132c:	20000288 	.word	0x20000288
 8001330:	40020058 	.word	0x40020058

08001334 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001336:	490d      	ldr	r1, [pc, #52]	; (800136c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800134c:	4c0a      	ldr	r4, [pc, #40]	; (8001378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800135a:	f7ff ff45 	bl	80011e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135e:	f003 ff73 	bl	8005248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001362:	f7ff fd47 	bl	8000df4 <main>
  bx lr
 8001366:	4770      	bx	lr
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001370:	08005fdc 	.word	0x08005fdc
  ldr r2, =_sbss
 8001374:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001378:	20000324 	.word	0x20000324

0800137c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC1_2_IRQHandler>
	...

08001380 <hmi_main>:
static void main_menu_active(void);
static void init_edit_menu(void);
static void edit_menu_active(void);

void hmi_main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  hmi_state = READ_EEPROM;
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <hmi_main+0x5c>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
  while (1)
    {
      switch (hmi_state)
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <hmi_main+0x5c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b05      	cmp	r3, #5
 8001392:	d8fa      	bhi.n	800138a <hmi_main+0xa>
 8001394:	a201      	add	r2, pc, #4	; (adr r2, 800139c <hmi_main+0x1c>)
 8001396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139a:	bf00      	nop
 800139c:	080013b5 	.word	0x080013b5
 80013a0:	080013bb 	.word	0x080013bb
 80013a4:	080013c1 	.word	0x080013c1
 80013a8:	080013c7 	.word	0x080013c7
 80013ac:	080013cd 	.word	0x080013cd
 80013b0:	080013d3 	.word	0x080013d3
        {
        case (READ_EEPROM):
          {
            init_read_eeprom();
 80013b4:	f000 f974 	bl	80016a0 <init_read_eeprom>
            break;
 80013b8:	e00e      	b.n	80013d8 <hmi_main+0x58>
          }

        case (INIT_TFT):
          {
            init_tft();
 80013ba:	f000 f97d 	bl	80016b8 <init_tft>
            break;
 80013be:	e00b      	b.n	80013d8 <hmi_main+0x58>
          }

        case (INIT_MAIN_MENU):
          {
            init_main_menu();
 80013c0:	f000 f98e 	bl	80016e0 <init_main_menu>
            break;
 80013c4:	e008      	b.n	80013d8 <hmi_main+0x58>
          }

        case (MAIN_MENU):
          {
            main_menu_active();
 80013c6:	f000 f947 	bl	8001658 <main_menu_active>
            break;
 80013ca:	e005      	b.n	80013d8 <hmi_main+0x58>
          }

        case (INIT_EDIT_MENU):
          {
            init_edit_menu();
 80013cc:	f000 f99e 	bl	800170c <init_edit_menu>
            break;
 80013d0:	e002      	b.n	80013d8 <hmi_main+0x58>
          }

        case (EDIT_MENU):
          {
            edit_menu_active();
 80013d2:	f000 f9a9 	bl	8001728 <edit_menu_active>
            break;
 80013d6:	bf00      	nop
      switch (hmi_state)
 80013d8:	e7d7      	b.n	800138a <hmi_main+0xa>
 80013da:	bf00      	nop
 80013dc:	200000ac 	.word	0x200000ac

080013e0 <hmi_read_tile_function>:
  return;
}

#if (HMI_MOCK_COMM_READ == 0U)
void hmi_read_tile_function(const struct frame_data *frame_send)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  frame_returned = false;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <hmi_read_tile_function+0x88>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
  bool timeout_error = false;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  char msg_to_print[16];
  u_frame *p_frame_received = {0};
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
  hmi_tile_t *p_edited_tile = &main_screen_data.tiles[frame_send->tile_number];
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4613      	mov	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4a19      	ldr	r2, [pc, #100]	; (800146c <hmi_read_tile_function+0x8c>)
 8001408:	4413      	add	r3, r2
 800140a:	3304      	adds	r3, #4
 800140c:	61fb      	str	r3, [r7, #28]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)p_frame_received,
 800140e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001412:	6a39      	ldr	r1, [r7, #32]
 8001414:	4816      	ldr	r0, [pc, #88]	; (8001470 <hmi_read_tile_function+0x90>)
 8001416:	f003 f9a2 	bl	800475e <HAL_UARTEx_ReceiveToIdle_DMA>
                               MAX_FRAME_SIZE);

  xgb_read_single_device(frame_send->device_type, frame_send->size_mark,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7898      	ldrb	r0, [r3, #2]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	78d9      	ldrb	r1, [r3, #3]
                         frame_send->address);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3304      	adds	r3, #4
  xgb_read_single_device(frame_send->device_type, frame_send->size_mark,
 8001426:	461a      	mov	r2, r3
 8001428:	f001 fa5c 	bl	80028e4 <xgb_read_single_device>

  timeout_error = wait_for_frame_until_timeout();
 800142c:	f000 f98e 	bl	800174c <wait_for_frame_until_timeout>
 8001430:	4603      	mov	r3, r0
 8001432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (is_new_text_neccessary(msg_to_print, p_frame_received, timeout_error,
 8001436:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800143a:	f107 000c 	add.w	r0, r7, #12
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	6a39      	ldr	r1, [r7, #32]
 8001442:	f000 fa05 	bl	8001850 <is_new_text_neccessary>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d008      	beq.n	800145e <hmi_read_tile_function+0x7e>
                             p_edited_tile))
    {
      draw_small_tile_text(frame_send->tile_number, msg_to_print, true);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	f107 010c 	add.w	r1, r7, #12
 8001454:	2201      	movs	r2, #1
 8001456:	4618      	mov	r0, r3
 8001458:	f000 faae 	bl	80019b8 <draw_small_tile_text>
    }

  return;
 800145c:	bf00      	nop
 800145e:	bf00      	nop
}
 8001460:	3728      	adds	r7, #40	; 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200000ad 	.word	0x200000ad
 800146c:	200000b0 	.word	0x200000b0
 8001470:	200002cc 	.word	0x200002cc

08001474 <HAL_UARTEx_RxEventCallback>:
#endif /* (HMI_MOCK_COMM_READ == 0U) */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
  frame_returned = true;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_UARTEx_RxEventCallback+0x1c>)
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	200000ad 	.word	0x200000ad

08001494 <update_main_cursor_val>:

static void update_main_cursor_val(buttons_state_t pending_flag)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  switch (pending_flag)
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d86a      	bhi.n	800157c <update_main_cursor_val+0xe8>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <update_main_cursor_val+0x18>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	080014bd 	.word	0x080014bd
 80014b0:	080014e1 	.word	0x080014e1
 80014b4:	08001541 	.word	0x08001541
 80014b8:	08001505 	.word	0x08001505
    {
    case (LEFT_FLAG):
      {
        main_screen_data.active_main_tile =
            (main_screen_data.active_main_tile + 5) % 10;
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <update_main_cursor_val+0xf4>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	1d5a      	adds	r2, r3, #5
 80014c2:	4b32      	ldr	r3, [pc, #200]	; (800158c <update_main_cursor_val+0xf8>)
 80014c4:	fb83 1302 	smull	r1, r3, r3, r2
 80014c8:	1099      	asrs	r1, r3, #2
 80014ca:	17d3      	asrs	r3, r2, #31
 80014cc:	1ac9      	subs	r1, r1, r3
 80014ce:	460b      	mov	r3, r1
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	1ad1      	subs	r1, r2, r3
        main_screen_data.active_main_tile =
 80014d8:	b2ca      	uxtb	r2, r1
 80014da:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <update_main_cursor_val+0xf4>)
 80014dc:	701a      	strb	r2, [r3, #0]
        break;
 80014de:	e04e      	b.n	800157e <update_main_cursor_val+0xea>
      }
    case (RIGHT_FLAG):
      {
        main_screen_data.active_main_tile =
            (main_screen_data.active_main_tile + 5) % 10;
 80014e0:	4b29      	ldr	r3, [pc, #164]	; (8001588 <update_main_cursor_val+0xf4>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	1d5a      	adds	r2, r3, #5
 80014e6:	4b29      	ldr	r3, [pc, #164]	; (800158c <update_main_cursor_val+0xf8>)
 80014e8:	fb83 1302 	smull	r1, r3, r3, r2
 80014ec:	1099      	asrs	r1, r3, #2
 80014ee:	17d3      	asrs	r3, r2, #31
 80014f0:	1ac9      	subs	r1, r1, r3
 80014f2:	460b      	mov	r3, r1
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	1ad1      	subs	r1, r2, r3
        main_screen_data.active_main_tile =
 80014fc:	b2ca      	uxtb	r2, r1
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <update_main_cursor_val+0xf4>)
 8001500:	701a      	strb	r2, [r3, #0]
        break;
 8001502:	e03c      	b.n	800157e <update_main_cursor_val+0xea>
      }
    case (UP_FLAG):
      {
        main_screen_data.active_main_tile =
            (main_screen_data.active_main_tile + 4) % 5 +
 8001504:	4b20      	ldr	r3, [pc, #128]	; (8001588 <update_main_cursor_val+0xf4>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	1d1a      	adds	r2, r3, #4
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <update_main_cursor_val+0xf8>)
 800150c:	fb83 1302 	smull	r1, r3, r3, r2
 8001510:	1059      	asrs	r1, r3, #1
 8001512:	17d3      	asrs	r3, r2, #31
 8001514:	1ac9      	subs	r1, r1, r3
 8001516:	460b      	mov	r3, r1
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	1ad1      	subs	r1, r2, r3
 800151e:	b2ca      	uxtb	r2, r1
            (5 * (main_screen_data.active_main_tile / 5));
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <update_main_cursor_val+0xf4>)
 8001522:	781b      	ldrb	r3, [r3, #0]
            (main_screen_data.active_main_tile + 4) % 5 +
 8001524:	491a      	ldr	r1, [pc, #104]	; (8001590 <update_main_cursor_val+0xfc>)
 8001526:	fba1 1303 	umull	r1, r3, r1, r3
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4619      	mov	r1, r3
 8001530:	0089      	lsls	r1, r1, #2
 8001532:	440b      	add	r3, r1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4413      	add	r3, r2
 8001538:	b2da      	uxtb	r2, r3
        main_screen_data.active_main_tile =
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <update_main_cursor_val+0xf4>)
 800153c:	701a      	strb	r2, [r3, #0]
        break;
 800153e:	e01e      	b.n	800157e <update_main_cursor_val+0xea>
      }
    case (DOWN_FLAG):
      {
        main_screen_data.active_main_tile =
            (main_screen_data.active_main_tile + 1) % 5 +
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <update_main_cursor_val+0xf4>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <update_main_cursor_val+0xf8>)
 8001548:	fb83 1302 	smull	r1, r3, r3, r2
 800154c:	1059      	asrs	r1, r3, #1
 800154e:	17d3      	asrs	r3, r2, #31
 8001550:	1ac9      	subs	r1, r1, r3
 8001552:	460b      	mov	r3, r1
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	1ad1      	subs	r1, r2, r3
 800155a:	b2ca      	uxtb	r2, r1
            (5 * (main_screen_data.active_main_tile / 5));
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <update_main_cursor_val+0xf4>)
 800155e:	781b      	ldrb	r3, [r3, #0]
            (main_screen_data.active_main_tile + 1) % 5 +
 8001560:	490b      	ldr	r1, [pc, #44]	; (8001590 <update_main_cursor_val+0xfc>)
 8001562:	fba1 1303 	umull	r1, r3, r1, r3
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4619      	mov	r1, r3
 800156c:	0089      	lsls	r1, r1, #2
 800156e:	440b      	add	r3, r1
 8001570:	b2db      	uxtb	r3, r3
 8001572:	4413      	add	r3, r2
 8001574:	b2da      	uxtb	r2, r3
        main_screen_data.active_main_tile =
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <update_main_cursor_val+0xf4>)
 8001578:	701a      	strb	r2, [r3, #0]
        break;
 800157a:	e000      	b.n	800157e <update_main_cursor_val+0xea>
    case (ENTER_FLAG):
      /* FALLTHROUGH */
    case (IDLE):
      /* FALLTHROUGH */
    default:
      break;
 800157c:	bf00      	nop
    }

  return;
 800157e:	bf00      	nop
}
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	200000b0 	.word	0x200000b0
 800158c:	66666667 	.word	0x66666667
 8001590:	cccccccd 	.word	0xcccccccd

08001594 <redraw_main_cursor>:

static void redraw_main_cursor(buttons_state_t pending_flag)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  draw_main_menu_cursor(HMI_BACKGROUND_COLOR,
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <redraw_main_cursor+0x34>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	4619      	mov	r1, r3
 80015a4:	2000      	movs	r0, #0
 80015a6:	f000 fa69 	bl	8001a7c <draw_main_menu_cursor>
                        main_screen_data.active_main_tile);
  update_main_cursor_val(pending_flag);
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff71 	bl	8001494 <update_main_cursor_val>
  draw_main_menu_cursor(HMI_CURSOR_COLOR, main_screen_data.active_main_tile);
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <redraw_main_cursor+0x34>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	4619      	mov	r1, r3
 80015b8:	f240 30ef 	movw	r0, #1007	; 0x3ef
 80015bc:	f000 fa5e 	bl	8001a7c <draw_main_menu_cursor>

  return;
 80015c0:	bf00      	nop
}
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200000b0 	.word	0x200000b0

080015cc <edit_screen_if_button_pressed>:

static hmi_change_screen_t edit_screen_if_button_pressed(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
  buttons_state_t pending_flag = buttons_get_pending_flag();
 80015d2:	f7fe fdf7 	bl	80001c4 <buttons_get_pending_flag>
 80015d6:	4603      	mov	r3, r0
 80015d8:	71bb      	strb	r3, [r7, #6]

  hmi_change_screen_t change_screen = NO_CHANGE;
 80015da:	2300      	movs	r3, #0
 80015dc:	71fb      	strb	r3, [r7, #7]

  if (IDLE != pending_flag)
 80015de:	79bb      	ldrb	r3, [r7, #6]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d010      	beq.n	8001606 <edit_screen_if_button_pressed+0x3a>
    {
      switch (pending_flag)
 80015e4:	79bb      	ldrb	r3, [r7, #6]
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	dc02      	bgt.n	80015f0 <edit_screen_if_button_pressed+0x24>
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	dc03      	bgt.n	80015f6 <edit_screen_if_button_pressed+0x2a>
          change_screen = OPEN_EDIT_MENU;
          break;
        case (IDLE):
          /* FALLTHROUGH */
        default:
          break;
 80015ee:	e00b      	b.n	8001608 <edit_screen_if_button_pressed+0x3c>
      switch (pending_flag)
 80015f0:	2b05      	cmp	r3, #5
 80015f2:	d005      	beq.n	8001600 <edit_screen_if_button_pressed+0x34>
          break;
 80015f4:	e008      	b.n	8001608 <edit_screen_if_button_pressed+0x3c>
          redraw_main_cursor(pending_flag);
 80015f6:	79bb      	ldrb	r3, [r7, #6]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ffcb 	bl	8001594 <redraw_main_cursor>
          break;
 80015fe:	e003      	b.n	8001608 <edit_screen_if_button_pressed+0x3c>
          change_screen = OPEN_EDIT_MENU;
 8001600:	2301      	movs	r3, #1
 8001602:	71fb      	strb	r3, [r7, #7]
          break;
 8001604:	e000      	b.n	8001608 <edit_screen_if_button_pressed+0x3c>
        }
    }
 8001606:	bf00      	nop

  buttons_reset_flag(pending_flag);
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe fe0e 	bl	800022c <buttons_reset_flag>
  return change_screen;
 8001610:	79fb      	ldrb	r3, [r7, #7]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <write_initial_values_to_tiles>:

static void write_initial_values_to_tiles(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0

  for (uint8_t i = 0; i < 10; i++)
 8001622:	2300      	movs	r3, #0
 8001624:	71fb      	strb	r3, [r7, #7]
 8001626:	e00d      	b.n	8001644 <write_initial_values_to_tiles+0x28>
    {
      main_screen_data.tiles[i].value = INITIAL_VAL;
 8001628:	79fa      	ldrb	r2, [r7, #7]
 800162a:	490a      	ldr	r1, [pc, #40]	; (8001654 <write_initial_values_to_tiles+0x38>)
 800162c:	4613      	mov	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	331c      	adds	r3, #28
 8001638:	f06f 0201 	mvn.w	r2, #1
 800163c:	601a      	str	r2, [r3, #0]
  for (uint8_t i = 0; i < 10; i++)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	3301      	adds	r3, #1
 8001642:	71fb      	strb	r3, [r7, #7]
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b09      	cmp	r3, #9
 8001648:	d9ee      	bls.n	8001628 <write_initial_values_to_tiles+0xc>
    }

  return;
 800164a:	bf00      	nop
}
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	200000b0 	.word	0x200000b0

08001658 <main_menu_active>:

static void main_menu_active(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  while (1)
    {

      hmi_change_screen_t ret_action = NO_CHANGE;
 800165e:	2300      	movs	r3, #0
 8001660:	71bb      	strb	r3, [r7, #6]
      for (uint8_t i = 0; i < 10; i++)
 8001662:	2300      	movs	r3, #0
 8001664:	71fb      	strb	r3, [r7, #7]
 8001666:	e011      	b.n	800168c <main_menu_active+0x34>
        {
          call_tile_function(i);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f890 	bl	8001790 <call_tile_function>
          ret_action = edit_screen_if_button_pressed();
 8001670:	f7ff ffac 	bl	80015cc <edit_screen_if_button_pressed>
 8001674:	4603      	mov	r3, r0
 8001676:	71bb      	strb	r3, [r7, #6]

          if (OPEN_EDIT_MENU == ret_action)
 8001678:	79bb      	ldrb	r3, [r7, #6]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d103      	bne.n	8001686 <main_menu_active+0x2e>
            {
              hmi_state = INIT_EDIT_MENU;
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <main_menu_active+0x44>)
 8001680:	2204      	movs	r2, #4
 8001682:	701a      	strb	r2, [r3, #0]
              return;
 8001684:	e006      	b.n	8001694 <main_menu_active+0x3c>
      for (uint8_t i = 0; i < 10; i++)
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	3301      	adds	r3, #1
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	2b09      	cmp	r3, #9
 8001690:	d9ea      	bls.n	8001668 <main_menu_active+0x10>
    {
 8001692:	e7e4      	b.n	800165e <main_menu_active+0x6>
            }
        }
    }
}
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200000ac 	.word	0x200000ac

080016a0 <init_read_eeprom>:

static void init_read_eeprom(void) { hmi_state = INIT_TFT; }
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <init_read_eeprom+0x14>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	200000ac 	.word	0x200000ac

080016b8 <init_tft>:

static void init_tft(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  ILI9341_Init(&hspi1);
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <init_tft+0x1c>)
 80016be:	f7ff fad9 	bl	8000c74 <ILI9341_Init>
  GFX_SetFont(font_8x5);
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <init_tft+0x20>)
 80016c4:	f7fe fdf2 	bl	80002ac <GFX_SetFont>
  hmi_state = INIT_MAIN_MENU;
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <init_tft+0x24>)
 80016ca:	2202      	movs	r2, #2
 80016cc:	701a      	strb	r2, [r3, #0]
  return;
 80016ce:	bf00      	nop
}
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001ec 	.word	0x200001ec
 80016d8:	08005d00 	.word	0x08005d00
 80016dc:	200000ac 	.word	0x200000ac

080016e0 <init_main_menu>:

static void init_main_menu(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  main_screen_data.active_main_tile = 0;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <init_main_menu+0x24>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
  write_initial_values_to_tiles();
 80016ea:	f7ff ff97 	bl	800161c <write_initial_values_to_tiles>
  draw_main_screen(main_screen_data.active_main_tile);
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <init_main_menu+0x24>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fa28 	bl	8001b48 <draw_main_screen>
  hmi_state = MAIN_MENU;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <init_main_menu+0x28>)
 80016fa:	2203      	movs	r2, #3
 80016fc:	701a      	strb	r2, [r3, #0]
  return;
 80016fe:	bf00      	nop
}
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200000b0 	.word	0x200000b0
 8001708:	200000ac 	.word	0x200000ac

0800170c <init_edit_menu>:

static void init_edit_menu(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  em_open_edit_menu(&main_screen_data);
 8001710:	4803      	ldr	r0, [pc, #12]	; (8001720 <init_edit_menu+0x14>)
 8001712:	f000 fcb7 	bl	8002084 <em_open_edit_menu>
  hmi_state = EDIT_MENU;
 8001716:	4b03      	ldr	r3, [pc, #12]	; (8001724 <init_edit_menu+0x18>)
 8001718:	2205      	movs	r2, #5
 800171a:	701a      	strb	r2, [r3, #0]
  return;
 800171c:	bf00      	nop
}
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200000b0 	.word	0x200000b0
 8001724:	200000ac 	.word	0x200000ac

08001728 <edit_menu_active>:

static void edit_menu_active(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  if (OPEN_MAIN_MENU == em_active_screen(&main_screen_data))
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <edit_menu_active+0x1c>)
 800172e:	f000 fcc1 	bl	80020b4 <em_active_screen>
 8001732:	4603      	mov	r3, r0
 8001734:	2b02      	cmp	r3, #2
 8001736:	d103      	bne.n	8001740 <edit_menu_active+0x18>
    {
      hmi_state = INIT_MAIN_MENU;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <edit_menu_active+0x20>)
 800173a:	2202      	movs	r2, #2
 800173c:	701a      	strb	r2, [r3, #0]
    }

  return;
 800173e:	bf00      	nop
 8001740:	bf00      	nop
}
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200000b0 	.word	0x200000b0
 8001748:	200000ac 	.word	0x200000ac

0800174c <wait_for_frame_until_timeout>:

static bool wait_for_frame_until_timeout(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
  uint32_t current_tick = HAL_GetTick();
 8001752:	f001 fd03 	bl	800315c <HAL_GetTick>
 8001756:	6038      	str	r0, [r7, #0]
  bool timeout_error = false;
 8001758:	2300      	movs	r3, #0
 800175a:	71fb      	strb	r3, [r7, #7]
  while (false == frame_returned)
 800175c:	e009      	b.n	8001772 <wait_for_frame_until_timeout+0x26>
    {
      if (HAL_GetTick() - current_tick > RETURN_FRAME_TIMEOUT)
 800175e:	f001 fcfd 	bl	800315c <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b32      	cmp	r3, #50	; 0x32
 800176a:	d902      	bls.n	8001772 <wait_for_frame_until_timeout+0x26>
        {
          timeout_error = true;
 800176c:	2301      	movs	r3, #1
 800176e:	71fb      	strb	r3, [r7, #7]
          break;
 8001770:	e007      	b.n	8001782 <wait_for_frame_until_timeout+0x36>
  while (false == frame_returned)
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <wait_for_frame_until_timeout+0x40>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f083 0301 	eor.w	r3, r3, #1
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1ed      	bne.n	800175e <wait_for_frame_until_timeout+0x12>
        }
    }

  return timeout_error;
 8001782:	79fb      	ldrb	r3, [r7, #7]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200000ad 	.word	0x200000ad

08001790 <call_tile_function>:

static void call_tile_function(uint8_t tile_number)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]

  if (NULL != main_screen_data.tiles[tile_number].callback)
 800179a:	79fa      	ldrb	r2, [r7, #7]
 800179c:	4911      	ldr	r1, [pc, #68]	; (80017e4 <call_tile_function+0x54>)
 800179e:	4613      	mov	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	1a9b      	subs	r3, r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	3318      	adds	r3, #24
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d014      	beq.n	80017da <call_tile_function+0x4a>
    {
      main_screen_data.tiles[tile_number].callback(
 80017b0:	79fa      	ldrb	r2, [r7, #7]
 80017b2:	490c      	ldr	r1, [pc, #48]	; (80017e4 <call_tile_function+0x54>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	3318      	adds	r3, #24
 80017c0:	6819      	ldr	r1, [r3, #0]
          &main_screen_data.tiles[tile_number].data);
 80017c2:	79fa      	ldrb	r2, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	3308      	adds	r3, #8
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <call_tile_function+0x54>)
 80017d0:	4413      	add	r3, r2
 80017d2:	3304      	adds	r3, #4
      main_screen_data.tiles[tile_number].callback(
 80017d4:	4618      	mov	r0, r3
 80017d6:	4788      	blx	r1
    }

  return;
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
}
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200000b0 	.word	0x200000b0

080017e8 <parse_text_from_frame>:

static int32_t parse_text_from_frame(char *new_text,
                                     const u_frame *p_frame_data, bool timeout)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	4613      	mov	r3, r2
 80017f4:	71fb      	strb	r3, [r7, #7]
  int32_t ret_value;

  if (true == timeout)
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d009      	beq.n	8001810 <parse_text_from_frame+0x28>
    {
      strcpy(new_text, "TIMEOUT");
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4907      	ldr	r1, [pc, #28]	; (800181c <parse_text_from_frame+0x34>)
 8001800:	461a      	mov	r2, r3
 8001802:	460b      	mov	r3, r1
 8001804:	cb03      	ldmia	r3!, {r0, r1}
 8001806:	6010      	str	r0, [r2, #0]
 8001808:	6051      	str	r1, [r2, #4]
      ret_value = TIMEOUT_VAL;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	617b      	str	r3, [r7, #20]
    }

  return ret_value;
 8001810:	697b      	ldr	r3, [r7, #20]
}
 8001812:	4618      	mov	r0, r3
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	08005b3c 	.word	0x08005b3c

08001820 <is_new_val_different>:

static bool is_new_val_different(int32_t new_val, int32_t current_val)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  return ((new_val != current_val) || INITIAL_VAL == current_val);
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d103      	bne.n	800183a <is_new_val_different+0x1a>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	f113 0f02 	cmn.w	r3, #2
 8001838:	d101      	bne.n	800183e <is_new_val_different+0x1e>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <is_new_val_different+0x20>
 800183e:	2300      	movs	r3, #0
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	b2db      	uxtb	r3, r3
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <is_new_text_neccessary>:

static bool is_new_text_neccessary(char *text_in_tile,
                                   const u_frame *p_frame_data, bool timeout,
                                   hmi_tile_t *p_tile)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	; 0x30
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	4613      	mov	r3, r2
 800185e:	71fb      	strb	r3, [r7, #7]

  // parse value
  char new_text[16] = {0};
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	f107 0318 	add.w	r3, r7, #24
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
  int32_t new_value = parse_text_from_frame(new_text, p_frame_data, timeout);
 8001870:	79fa      	ldrb	r2, [r7, #7]
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	68b9      	ldr	r1, [r7, #8]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ffb5 	bl	80017e8 <parse_text_from_frame>
 800187e:	62b8      	str	r0, [r7, #40]	; 0x28
  int32_t current_value = p_tile->value;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  bool draw_new_text = false;
 8001886:	2300      	movs	r3, #0
 8001888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  // check if its different than one before
  if (true == is_new_val_different(new_value, current_value))
 800188c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800188e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001890:	f7ff ffc6 	bl	8001820 <is_new_val_different>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <is_new_text_neccessary+0x5c>
    {
      strcpy(text_in_tile, new_text);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f003 fd2b 	bl	80052fc <strcpy>
      draw_new_text = true;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

  p_tile->value = new_value;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018b0:	619a      	str	r2, [r3, #24]
  return draw_new_text;
 80018b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3730      	adds	r7, #48	; 0x30
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <draw_small_tile>:
                                      uint32_t right_limit);
static uint32_t get_switch_cursor_val(const hmi_edit_cursors_t *p_cursors);
static void draw_initial_address_switch(void);

void draw_small_tile(uint8_t tile_number, const char *text, bool center_text)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	4613      	mov	r3, r2
 80018ce:	71bb      	strb	r3, [r7, #6]
  uint8_t column = tile_number / 5;
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	4a19      	ldr	r2, [pc, #100]	; (8001938 <draw_small_tile+0x78>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	75fb      	strb	r3, [r7, #23]
  uint8_t row = tile_number % 5;
 80018dc:	79fa      	ldrb	r2, [r7, #7]
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <draw_small_tile+0x78>)
 80018e0:	fba3 1302 	umull	r1, r3, r3, r2
 80018e4:	0899      	lsrs	r1, r3, #2
 80018e6:	460b      	mov	r3, r1
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	75bb      	strb	r3, [r7, #22]

  uint32_t x_pos = (column * OFFSET_X_SECOND_COLUMN) + OFFSET_X_LEFT_BORDER;
 80018f0:	7dfa      	ldrb	r2, [r7, #23]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	015b      	lsls	r3, r3, #5
 80018fa:	1a9b      	subs	r3, r3, r2
 80018fc:	3303      	adds	r3, #3
 80018fe:	613b      	str	r3, [r7, #16]
  uint32_t y_pos = (row * DISTANCE_Y_BETWEEN_TILES) + OFFSET_Y_FIRST_TILE;
 8001900:	7dba      	ldrb	r2, [r7, #22]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4413      	add	r3, r2
 800190c:	331d      	adds	r3, #29
 800190e:	60fb      	str	r3, [r7, #12]

  GFX_DrawRectangle(x_pos, y_pos, SMALL_TILE_WIDTH, SMALL_TILE_HEIGHT,
 8001910:	6938      	ldr	r0, [r7, #16]
 8001912:	68f9      	ldr	r1, [r7, #12]
 8001914:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2328      	movs	r3, #40	; 0x28
 800191c:	229b      	movs	r2, #155	; 0x9b
 800191e:	f7fe fe80 	bl	8000622 <GFX_DrawRectangle>
                    HMI_TILE_COLOR);

  draw_small_tile_text(tile_number, text, center_text);
 8001922:	79ba      	ldrb	r2, [r7, #6]
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	6839      	ldr	r1, [r7, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f000 f845 	bl	80019b8 <draw_small_tile_text>
  return;
 800192e:	bf00      	nop
}
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	cccccccd 	.word	0xcccccccd

0800193c <draw_wide_tile>:

void draw_wide_tile(const char *text, uint8_t tile_number, bool center_text,
                    ColorType color)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af02      	add	r7, sp, #8
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4603      	mov	r3, r0
 800194c:	70fb      	strb	r3, [r7, #3]
 800194e:	460b      	mov	r3, r1
 8001950:	70bb      	strb	r3, [r7, #2]
 8001952:	4613      	mov	r3, r2
 8001954:	803b      	strh	r3, [r7, #0]
  GFX_DrawRectangle(OFFSET_X_LEFT_BORDER,
                    (GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * tile_number,
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	4613      	mov	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	1a9b      	subs	r3, r3, r2
 800195e:	009b      	lsls	r3, r3, #2
  GFX_DrawRectangle(OFFSET_X_LEFT_BORDER,
 8001960:	4619      	mov	r1, r3
 8001962:	883b      	ldrh	r3, [r7, #0]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	231b      	movs	r3, #27
 8001968:	f44f 729d 	mov.w	r2, #314	; 0x13a
 800196c:	2003      	movs	r0, #3
 800196e:	f7fe fe58 	bl	8000622 <GFX_DrawRectangle>
                    WIDE_TILE_WIDTH, WIDE_TILE_HEIGHT, color);

  uint32_t x_pos = TEXT_X_OFFSET_WIDE_TILE;
 8001972:	230a      	movs	r3, #10
 8001974:	60fb      	str	r3, [r7, #12]
  uint32_t y_pos = ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * tile_number) +
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	1a9b      	subs	r3, r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	330a      	adds	r3, #10
 8001982:	60bb      	str	r3, [r7, #8]
                   TEXT_Y_OFFSET_WIDE_TILE;

  if (true == center_text)
 8001984:	78bb      	ldrb	r3, [r7, #2]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <draw_wide_tile+0x5c>
    {
      x_pos = find_x_to_center_text(text, OFFSET_X_LEFT_BORDER,
 800198a:	f240 123d 	movw	r2, #317	; 0x13d
 800198e:	2103      	movs	r1, #3
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 fb33 	bl	8001ffc <find_x_to_center_text>
 8001996:	60f8      	str	r0, [r7, #12]
                                    (ILI9341_TFTWIDTH - OFFSET_X_LEFT_BORDER));
    }

  if (NULL != text)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <draw_wide_tile+0x72>
    {
      GFX_DrawString(x_pos, y_pos, text, HMI_TEXT_COLOR);
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	f7fe fd0c 	bl	80003c4 <GFX_DrawString>
    }

  return;
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
}
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <draw_small_tile_text>:

void draw_small_tile_text(uint8_t tile_number, const char *text,
                          bool center_text)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af02      	add	r7, sp, #8
 80019be:	4603      	mov	r3, r0
 80019c0:	6039      	str	r1, [r7, #0]
 80019c2:	71fb      	strb	r3, [r7, #7]
 80019c4:	4613      	mov	r3, r2
 80019c6:	71bb      	strb	r3, [r7, #6]
  if (NULL == text)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d04d      	beq.n	8001a6a <draw_small_tile_text+0xb2>
    return;

  uint8_t column = tile_number / 5;
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4a28      	ldr	r2, [pc, #160]	; (8001a74 <draw_small_tile_text+0xbc>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	76fb      	strb	r3, [r7, #27]
  uint8_t row = tile_number % 5;
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <draw_small_tile_text+0xbc>)
 80019de:	fba3 1302 	umull	r1, r3, r3, r2
 80019e2:	0899      	lsrs	r1, r3, #2
 80019e4:	460b      	mov	r3, r1
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	76bb      	strb	r3, [r7, #26]
  uint32_t left_limit = (column * OFFSET_X_SECOND_COLUMN) +
 80019ee:	7efa      	ldrb	r2, [r7, #27]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	015b      	lsls	r3, r3, #5
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	3317      	adds	r3, #23
 80019fc:	617b      	str	r3, [r7, #20]
                        OFFSET_X_LEFT_BORDER + OFFSET_X_CURSOR_POINTER;
  uint32_t right_limit = (column * OFFSET_X_SECOND_COLUMN) +
 80019fe:	7efa      	ldrb	r2, [r7, #27]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	015b      	lsls	r3, r3, #5
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	339e      	adds	r3, #158	; 0x9e
 8001a0c:	613b      	str	r3, [r7, #16]
                         OFFSET_X_LEFT_BORDER + SMALL_TILE_WIDTH;
  uint32_t x_start_draw = left_limit + 1;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t y_start_draw = (row * DISTANCE_Y_BETWEEN_TILES) +
 8001a14:	7eba      	ldrb	r2, [r7, #26]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4413      	add	r3, r2
 8001a20:	332f      	adds	r3, #47	; 0x2f
 8001a22:	60fb      	str	r3, [r7, #12]
                          OFFSET_Y_FIRST_TILE + TEXT_X_OFFSET_SMALL_TILE;
  uint32_t text_width = strlen(text) * (FONT_WIDTH + FONT_SPACE);
 8001a24:	6838      	ldr	r0, [r7, #0]
 8001a26:	f7fe fb91 	bl	800014c <strlen>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	60bb      	str	r3, [r7, #8]

  if (true == center_text)
 8001a36:	79bb      	ldrb	r3, [r7, #6]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <draw_small_tile_text+0x90>
    {
      x_start_draw = find_x_to_center_text(text, left_limit, right_limit);
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	6979      	ldr	r1, [r7, #20]
 8001a40:	6838      	ldr	r0, [r7, #0]
 8001a42:	f000 fadb 	bl	8001ffc <find_x_to_center_text>
 8001a46:	61f8      	str	r0, [r7, #28]
    }

  GFX_DrawFillRectangle(x_start_draw, y_start_draw, text_width, FONT_HEIGHT,
 8001a48:	69f8      	ldr	r0, [r7, #28]
 8001a4a:	68f9      	ldr	r1, [r7, #12]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	2300      	movs	r3, #0
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2308      	movs	r3, #8
 8001a56:	f7fe fe11 	bl	800067c <GFX_DrawFillRectangle>
                        HMI_BACKGROUND_COLOR);

  GFX_DrawString(x_start_draw, y_start_draw, "TIMEOUT", HMI_TEXT_COLOR);
 8001a5a:	69f8      	ldr	r0, [r7, #28]
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <draw_small_tile_text+0xc0>)
 8001a64:	f7fe fcae 	bl	80003c4 <GFX_DrawString>

  return;
 8001a68:	e000      	b.n	8001a6c <draw_small_tile_text+0xb4>
    return;
 8001a6a:	bf00      	nop
}
 8001a6c:	3720      	adds	r7, #32
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	cccccccd 	.word	0xcccccccd
 8001a78:	08005b44 	.word	0x08005b44

08001a7c <draw_main_menu_cursor>:

void draw_main_menu_cursor(ColorType color, uint8_t active_tile)
{
 8001a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7e:	b08f      	sub	sp, #60	; 0x3c
 8001a80:	af04      	add	r7, sp, #16
 8001a82:	4603      	mov	r3, r0
 8001a84:	460a      	mov	r2, r1
 8001a86:	80fb      	strh	r3, [r7, #6]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	717b      	strb	r3, [r7, #5]
  uint8_t column = active_tile / 5;
 8001a8c:	797b      	ldrb	r3, [r7, #5]
 8001a8e:	4a2d      	ldr	r2, [pc, #180]	; (8001b44 <draw_main_menu_cursor+0xc8>)
 8001a90:	fba2 2303 	umull	r2, r3, r2, r3
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t row = active_tile % 5;
 8001a9a:	797a      	ldrb	r2, [r7, #5]
 8001a9c:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <draw_main_menu_cursor+0xc8>)
 8001a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8001aa2:	0899      	lsrs	r1, r3, #2
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  uint32_t x0_pos =
      (column * OFFSET_X_SECOND_COLUMN) + LINE_SIZE + OFFSET_X_LEFT_BORDER;
 8001ab0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	015b      	lsls	r3, r3, #5
 8001abc:	1a9b      	subs	r3, r3, r2
  uint32_t x0_pos =
 8001abe:	3304      	adds	r3, #4
 8001ac0:	623b      	str	r3, [r7, #32]

  uint32_t y0_pos =
      (row * DISTANCE_Y_BETWEEN_TILES) + OFFSET_Y_FIRST_TILE + LINE_SIZE;
 8001ac2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4413      	add	r3, r2
  uint32_t y0_pos =
 8001ad0:	331e      	adds	r3, #30
 8001ad2:	61fb      	str	r3, [r7, #28]

  uint32_t x1_pos =
      (column * OFFSET_X_SECOND_COLUMN) + LINE_SIZE + OFFSET_X_LEFT_BORDER;
 8001ad4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	015b      	lsls	r3, r3, #5
 8001ae0:	1a9b      	subs	r3, r3, r2
  uint32_t x1_pos =
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  uint32_t y1_pos = (row * DISTANCE_Y_BETWEEN_TILES) + OFFSET_Y_FIRST_TILE +
 8001ae6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4413      	add	r3, r2
 8001af4:	3344      	adds	r3, #68	; 0x44
 8001af6:	617b      	str	r3, [r7, #20]
                    SMALL_TILE_HEIGHT - LINE_SIZE;

  uint32_t x2_pos = (column * OFFSET_X_SECOND_COLUMN) + OFFSET_X_LEFT_BORDER +
 8001af8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	015b      	lsls	r3, r3, #5
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	3317      	adds	r3, #23
 8001b08:	613b      	str	r3, [r7, #16]
                    OFFSET_X_CURSOR_POINTER;

  uint32_t y2_pos = (row * DISTANCE_Y_BETWEEN_TILES) + OFFSET_Y_FIRST_TILE +
 8001b0a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4413      	add	r3, r2
 8001b18:	3331      	adds	r3, #49	; 0x31
 8001b1a:	60fb      	str	r3, [r7, #12]
                    (SMALL_TILE_HEIGHT / 2);

  GFX_DrawFillTriangle(x0_pos, y0_pos, x1_pos, y1_pos, x2_pos, y2_pos, color);
 8001b1c:	6a38      	ldr	r0, [r7, #32]
 8001b1e:	69fc      	ldr	r4, [r7, #28]
 8001b20:	69bd      	ldr	r5, [r7, #24]
 8001b22:	697e      	ldr	r6, [r7, #20]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	88f9      	ldrh	r1, [r7, #6]
 8001b2a:	9102      	str	r1, [sp, #8]
 8001b2c:	9201      	str	r2, [sp, #4]
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	4633      	mov	r3, r6
 8001b32:	462a      	mov	r2, r5
 8001b34:	4621      	mov	r1, r4
 8001b36:	f7fe fdc3 	bl	80006c0 <GFX_DrawFillTriangle>

  return;
 8001b3a:	bf00      	nop
}
 8001b3c:	372c      	adds	r7, #44	; 0x2c
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	cccccccd 	.word	0xcccccccd

08001b48 <draw_main_screen>:

void draw_main_screen(uint8_t active_tile)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  ILI9341_ClearDisplay(HMI_BACKGROUND_COLOR);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f7ff f83c 	bl	8000bd0 <ILI9341_ClearDisplay>
  draw_wide_tile("XGB PLC COMMUNICATION", 0, true, HMI_TILE_COLOR);
 8001b58:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2100      	movs	r1, #0
 8001b60:	480d      	ldr	r0, [pc, #52]	; (8001b98 <draw_main_screen+0x50>)
 8001b62:	f7ff feeb 	bl	800193c <draw_wide_tile>
  for (uint8_t i = 0; i < 10; i++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]
 8001b6a:	e008      	b.n	8001b7e <draw_main_screen+0x36>
    {
      draw_small_tile(i, NULL, false);
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fea4 	bl	80018c0 <draw_small_tile>
  for (uint8_t i = 0; i < 10; i++)
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	2b09      	cmp	r3, #9
 8001b82:	d9f3      	bls.n	8001b6c <draw_main_screen+0x24>
    }

  draw_main_menu_cursor(HMI_CURSOR_COLOR, active_tile);
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	4619      	mov	r1, r3
 8001b88:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001b8c:	f7ff ff76 	bl	8001a7c <draw_main_menu_cursor>
  return;
 8001b90:	bf00      	nop
}
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	08005b4c 	.word	0x08005b4c

08001b9c <draw_edit_menu>:

void draw_edit_menu(uint8_t active_main_tile)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08e      	sub	sp, #56	; 0x38
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]

  ILI9341_ClearDisplay(HMI_EDIT_MENU_COLOR);
 8001ba6:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001baa:	f7ff f811 	bl	8000bd0 <ILI9341_ClearDisplay>

  char message[16] = {0};
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
  sprintf(message, "TILE NUMBER %d", active_main_tile);
 8001bbe:	79fa      	ldrb	r2, [r7, #7]
 8001bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc4:	491f      	ldr	r1, [pc, #124]	; (8001c44 <draw_edit_menu+0xa8>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 fb78 	bl	80052bc <siprintf>

  const char *tile_text[] = {
 8001bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <draw_edit_menu+0xac>)
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <draw_edit_menu+0xb0>)
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <draw_edit_menu+0xb4>)
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <draw_edit_menu+0xb8>)
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <draw_edit_menu+0xbc>)
 8001be4:	623b      	str	r3, [r7, #32]
      message,        "Tile function:",  "Device Type:",
      "Device Size:", "Device Address:", "Confirm - Discard"};

  draw_wide_tile(tile_text[TILE_HEADER], TILE_HEADER, true, HMI_TILE_COLOR);
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001bec:	2201      	movs	r2, #1
 8001bee:	2100      	movs	r1, #0
 8001bf0:	f7ff fea4 	bl	800193c <draw_wide_tile>

  for (uint8_t i = TILE_LEFT_ALLIGN_START; i <= TILE_LEFT_ALLIGN_END; i++)
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001bfa:	e013      	b.n	8001c24 <draw_edit_menu+0x88>
    {
      draw_wide_tile(tile_text[i], i, false, HMI_TILE_COLOR);
 8001bfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c06:	4413      	add	r3, r2
 8001c08:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 8001c0c:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8001c10:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c14:	2200      	movs	r2, #0
 8001c16:	f7ff fe91 	bl	800193c <draw_wide_tile>
  for (uint8_t i = TILE_LEFT_ALLIGN_START; i <= TILE_LEFT_ALLIGN_END; i++)
 8001c1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d9e7      	bls.n	8001bfc <draw_edit_menu+0x60>
    }

  draw_wide_tile(tile_text[TILE_EXIT], TILE_EXIT, true, HMI_TILE_COLOR);
 8001c2c:	6a38      	ldr	r0, [r7, #32]
 8001c2e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c32:	2201      	movs	r2, #1
 8001c34:	2105      	movs	r1, #5
 8001c36:	f7ff fe81 	bl	800193c <draw_wide_tile>

  return;
 8001c3a:	bf00      	nop
}
 8001c3c:	3738      	adds	r7, #56	; 0x38
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	08005b64 	.word	0x08005b64
 8001c48:	08005b74 	.word	0x08005b74
 8001c4c:	08005b84 	.word	0x08005b84
 8001c50:	08005b94 	.word	0x08005b94
 8001c54:	08005ba4 	.word	0x08005ba4
 8001c58:	08005bb4 	.word	0x08005bb4

08001c5c <draw_arrows_icon>:

void draw_arrows_icon(ColorType color)
{
 8001c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5e:	b08b      	sub	sp, #44	; 0x2c
 8001c60:	af04      	add	r7, sp, #16
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]
  uint32_t x_icon_pos =
      find_x_to_center_text("000000", STD_SW_LEFT_LIMIT, STD_SW_RIGHT_LIMIT);
 8001c66:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8001c6a:	2196      	movs	r1, #150	; 0x96
 8001c6c:	4822      	ldr	r0, [pc, #136]	; (8001cf8 <draw_arrows_icon+0x9c>)
 8001c6e:	f000 f9c5 	bl	8001ffc <find_x_to_center_text>
 8001c72:	6178      	str	r0, [r7, #20]

  uint32_t selected_tile = (uint32_t)TILE_ADDRESS;
 8001c74:	2304      	movs	r3, #4
 8001c76:	613b      	str	r3, [r7, #16]

  uint32_t y_icon_pos =
      ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * selected_tile) +
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
  uint32_t y_icon_pos =
 8001c82:	330a      	adds	r3, #10
 8001c84:	60fb      	str	r3, [r7, #12]
      TEXT_Y_OFFSET_WIDE_TILE;

  x_icon_pos = x_icon_pos + (8 * (FONT_WIDTH + FONT_SPACE));
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3330      	adds	r3, #48	; 0x30
 8001c8a:	617b      	str	r3, [r7, #20]

  GFX_DrawFillTriangle(x_icon_pos, y_icon_pos - 1, x_icon_pos - 4,
 8001c8c:	6978      	ldr	r0, [r7, #20]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	461c      	mov	r4, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3b04      	subs	r3, #4
 8001c98:	461d      	mov	r5, r3
                       y_icon_pos + 3, x_icon_pos + 4, y_icon_pos + 3, color);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3303      	adds	r3, #3
  GFX_DrawFillTriangle(x_icon_pos, y_icon_pos - 1, x_icon_pos - 4,
 8001c9e:	461e      	mov	r6, r3
                       y_icon_pos + 3, x_icon_pos + 4, y_icon_pos + 3, color);
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3304      	adds	r3, #4
  GFX_DrawFillTriangle(x_icon_pos, y_icon_pos - 1, x_icon_pos - 4,
 8001ca4:	461a      	mov	r2, r3
                       y_icon_pos + 3, x_icon_pos + 4, y_icon_pos + 3, color);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3303      	adds	r3, #3
  GFX_DrawFillTriangle(x_icon_pos, y_icon_pos - 1, x_icon_pos - 4,
 8001caa:	4619      	mov	r1, r3
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	9302      	str	r3, [sp, #8]
 8001cb0:	9101      	str	r1, [sp, #4]
 8001cb2:	9200      	str	r2, [sp, #0]
 8001cb4:	4633      	mov	r3, r6
 8001cb6:	462a      	mov	r2, r5
 8001cb8:	4621      	mov	r1, r4
 8001cba:	f7fe fd01 	bl	80006c0 <GFX_DrawFillTriangle>
  GFX_DrawFillTriangle(x_icon_pos, y_icon_pos + 9, x_icon_pos - 4,
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	3309      	adds	r3, #9
 8001cc4:	461c      	mov	r4, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	3b04      	subs	r3, #4
 8001cca:	461d      	mov	r5, r3
                       y_icon_pos + 5, x_icon_pos + 4, y_icon_pos + 5, color);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3305      	adds	r3, #5
  GFX_DrawFillTriangle(x_icon_pos, y_icon_pos + 9, x_icon_pos - 4,
 8001cd0:	461e      	mov	r6, r3
                       y_icon_pos + 5, x_icon_pos + 4, y_icon_pos + 5, color);
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3304      	adds	r3, #4
  GFX_DrawFillTriangle(x_icon_pos, y_icon_pos + 9, x_icon_pos - 4,
 8001cd6:	461a      	mov	r2, r3
                       y_icon_pos + 5, x_icon_pos + 4, y_icon_pos + 5, color);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3305      	adds	r3, #5
  GFX_DrawFillTriangle(x_icon_pos, y_icon_pos + 9, x_icon_pos - 4,
 8001cdc:	4619      	mov	r1, r3
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	9302      	str	r3, [sp, #8]
 8001ce2:	9101      	str	r1, [sp, #4]
 8001ce4:	9200      	str	r2, [sp, #0]
 8001ce6:	4633      	mov	r3, r6
 8001ce8:	462a      	mov	r2, r5
 8001cea:	4621      	mov	r1, r4
 8001cec:	f7fe fce8 	bl	80006c0 <GFX_DrawFillTriangle>
  return;
 8001cf0:	bf00      	nop
}
 8001cf2:	371c      	adds	r7, #28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	08005bc8 	.word	0x08005bc8

08001cfc <draw_address_char>:

void draw_address_char(const hmi_edit_cursors_t *p_cursors)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	6078      	str	r0, [r7, #4]

  uint32_t x_char_pos =
      find_x_to_center_text("000000", STD_SW_LEFT_LIMIT, STD_SW_RIGHT_LIMIT);
 8001d04:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8001d08:	2196      	movs	r1, #150	; 0x96
 8001d0a:	4818      	ldr	r0, [pc, #96]	; (8001d6c <draw_address_char+0x70>)
 8001d0c:	f000 f976 	bl	8001ffc <find_x_to_center_text>
 8001d10:	61f8      	str	r0, [r7, #28]
  ;

  uint32_t selected_char = p_cursors->horiz_address;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	791b      	ldrb	r3, [r3, #4]
 8001d16:	61bb      	str	r3, [r7, #24]
  uint32_t selected_tile = (uint32_t)TILE_ADDRESS;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	617b      	str	r3, [r7, #20]
  uint32_t y_pos = ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * selected_tile) +
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	330a      	adds	r3, #10
 8001d28:	613b      	str	r3, [r7, #16]
                   TEXT_Y_OFFSET_WIDE_TILE;

  char to_draw = p_cursors->vert_address_num + '0';
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	795b      	ldrb	r3, [r3, #5]
 8001d2e:	3330      	adds	r3, #48	; 0x30
 8001d30:	73fb      	strb	r3, [r7, #15]

  x_char_pos = x_char_pos + (selected_char * (FONT_WIDTH + FONT_SPACE));
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	4413      	add	r3, r2
 8001d42:	61fb      	str	r3, [r7, #28]

  GFX_DrawFillRectangle(x_char_pos, y_pos, FONT_WIDTH, FONT_HEIGHT,
 8001d44:	69f8      	ldr	r0, [r7, #28]
 8001d46:	6939      	ldr	r1, [r7, #16]
 8001d48:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2308      	movs	r3, #8
 8001d50:	2205      	movs	r2, #5
 8001d52:	f7fe fc93 	bl	800067c <GFX_DrawFillRectangle>
                        HMI_EDIT_MENU_COLOR);

  GFX_DrawChar(x_char_pos, y_pos, to_draw, HMI_TEXT_COLOR);
 8001d56:	69f8      	ldr	r0, [r7, #28]
 8001d58:	6939      	ldr	r1, [r7, #16]
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d60:	f7fe fab2 	bl	80002c8 <GFX_DrawChar>

  return;
 8001d64:	bf00      	nop
}
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	08005bc8 	.word	0x08005bc8

08001d70 <draw_exit_cursor>:

void draw_exit_cursor(const hmi_edit_cursors_t *p_cursors, ColorType color)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]

  uint32_t x_start_line =
      find_x_to_center_text("Confirm - Discard", OFFSET_X_LEFT_BORDER,
 8001d7c:	f240 123d 	movw	r2, #317	; 0x13d
 8001d80:	2103      	movs	r1, #3
 8001d82:	4812      	ldr	r0, [pc, #72]	; (8001dcc <draw_exit_cursor+0x5c>)
 8001d84:	f000 f93a 	bl	8001ffc <find_x_to_center_text>
 8001d88:	6178      	str	r0, [r7, #20]
                            (ILI9341_TFTWIDTH - OFFSET_X_LEFT_BORDER));
  ;

  uint32_t x_offset = ((strlen("Confirm - ") * (FONT_WIDTH + FONT_SPACE))) *
                      p_cursors->horiz_exit;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	799b      	ldrb	r3, [r3, #6]
 8001d8e:	461a      	mov	r2, r3
  uint32_t x_offset = ((strlen("Confirm - ") * (FONT_WIDTH + FONT_SPACE))) *
 8001d90:	4613      	mov	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	613b      	str	r3, [r7, #16]

  x_start_line = x_start_line + x_offset;
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4413      	add	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]

  uint32_t y_start_line =
 8001da2:	239f      	movs	r3, #159	; 0x9f
 8001da4:	60fb      	str	r3, [r7, #12]
      ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * TILE_EXIT) +
      TEXT_Y_OFFSET_WIDE_TILE + (FONT_HEIGHT + FONT_SPACE);

  uint32_t len = strlen("Confirm") * (FONT_WIDTH + FONT_SPACE);
 8001da6:	232a      	movs	r3, #42	; 0x2a
 8001da8:	60bb      	str	r3, [r7, #8]

  GFX_DrawLine(x_start_line, y_start_line, x_start_line + len, y_start_line,
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	68f9      	ldr	r1, [r7, #12]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4413      	add	r3, r2
 8001db4:	461c      	mov	r4, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	4622      	mov	r2, r4
 8001dc0:	f7fe fbec 	bl	800059c <GFX_DrawLine>
               color);

  return;
 8001dc4:	bf00      	nop
}
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd90      	pop	{r4, r7, pc}
 8001dcc:	08005bb4 	.word	0x08005bb4

08001dd0 <draw_address_cursor>:

void draw_address_cursor(const hmi_edit_cursors_t *p_cursors, ColorType color)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
  uint32_t x_start_line =
      find_x_to_center_text("000000", STD_SW_LEFT_LIMIT, STD_SW_RIGHT_LIMIT);
 8001ddc:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8001de0:	2196      	movs	r1, #150	; 0x96
 8001de2:	4812      	ldr	r0, [pc, #72]	; (8001e2c <draw_address_cursor+0x5c>)
 8001de4:	f000 f90a 	bl	8001ffc <find_x_to_center_text>
 8001de8:	6178      	str	r0, [r7, #20]
  ;
  uint32_t selected_char = p_cursors->horiz_address;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	791b      	ldrb	r3, [r3, #4]
 8001dee:	613b      	str	r3, [r7, #16]

  x_start_line = x_start_line + (selected_char * (FONT_WIDTH + FONT_SPACE));
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	4413      	add	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]

  uint32_t y_start_line =
 8001e02:	237a      	movs	r3, #122	; 0x7a
 8001e04:	60fb      	str	r3, [r7, #12]
      ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * TILE_ADDRESS) +
      TEXT_Y_OFFSET_WIDE_TILE;
  y_start_line = y_start_line + FONT_HEIGHT + 1;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3309      	adds	r3, #9
 8001e0a:	60fb      	str	r3, [r7, #12]

  GFX_DrawLine(x_start_line, y_start_line, x_start_line + FONT_WIDTH,
 8001e0c:	6978      	ldr	r0, [r7, #20]
 8001e0e:	68f9      	ldr	r1, [r7, #12]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3305      	adds	r3, #5
 8001e14:	461c      	mov	r4, r3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	887b      	ldrh	r3, [r7, #2]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	4622      	mov	r2, r4
 8001e20:	f7fe fbbc 	bl	800059c <GFX_DrawLine>
               y_start_line, color);

  return;
 8001e24:	bf00      	nop
}
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd90      	pop	{r4, r7, pc}
 8001e2c:	08005bc8 	.word	0x08005bc8

08001e30 <draw_update_header_number>:

void draw_update_header_number(char new_number)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  uint32_t x_start_draw =
      find_x_to_center_text("TILE NUMBER  ", OFFSET_X_LEFT_BORDER,
 8001e3a:	f240 123d 	movw	r2, #317	; 0x13d
 8001e3e:	2103      	movs	r1, #3
 8001e40:	480e      	ldr	r0, [pc, #56]	; (8001e7c <draw_update_header_number+0x4c>)
 8001e42:	f000 f8db 	bl	8001ffc <find_x_to_center_text>
 8001e46:	60f8      	str	r0, [r7, #12]
                            (ILI9341_TFTWIDTH - OFFSET_X_LEFT_BORDER));

  x_start_draw =
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3348      	adds	r3, #72	; 0x48
 8001e4c:	60fb      	str	r3, [r7, #12]
      x_start_draw + strlen("TILE NUMBER ") * (FONT_WIDTH + FONT_SPACE);

  uint32_t y_start_draw =
 8001e4e:	230a      	movs	r3, #10
 8001e50:	60bb      	str	r3, [r7, #8]
      ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * TILE_HEADER) +
      TEXT_Y_OFFSET_WIDE_TILE;

  GFX_DrawFillRectangle(x_start_draw, y_start_draw, FONT_WIDTH, FONT_HEIGHT,
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	2205      	movs	r2, #5
 8001e60:	f7fe fc0c 	bl	800067c <GFX_DrawFillRectangle>
                        HMI_EDIT_MENU_COLOR);

  GFX_DrawChar(x_start_draw, y_start_draw, new_number, HMI_TEXT_COLOR);
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	79fa      	ldrb	r2, [r7, #7]
 8001e6a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e6e:	f7fe fa2b 	bl	80002c8 <GFX_DrawChar>

  return;
 8001e72:	bf00      	nop
}
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	08005bd0 	.word	0x08005bd0

08001e80 <draw_erase_std_switch_text>:

void draw_erase_std_switch_text(const hmi_edit_cursors_t *p_cursors,
                                const edit_option_t **p_std_switch)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t selected_switch = p_cursors->vert_tile;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	61fb      	str	r3, [r7, #28]

  uint32_t selected_switch_val = get_switch_cursor_val(p_cursors);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f8d2 	bl	800203a <get_switch_cursor_val>
 8001e96:	61b8      	str	r0, [r7, #24]

  uint32_t lenght_to_erase =
      strlen(p_std_switch[selected_switch][selected_switch_val].display_text) *
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe f94e 	bl	800014c <strlen>
 8001eb0:	4602      	mov	r2, r0
  uint32_t lenght_to_erase =
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
      (FONT_WIDTH + FONT_SPACE);

  uint32_t x_start_erase = find_x_to_center_text(
      p_std_switch[selected_switch][selected_switch_val].display_text,
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	681b      	ldr	r3, [r3, #0]
  uint32_t x_start_erase = find_x_to_center_text(
 8001ece:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8001ed2:	2196      	movs	r1, #150	; 0x96
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 f891 	bl	8001ffc <find_x_to_center_text>
 8001eda:	6138      	str	r0, [r7, #16]
      STD_SW_LEFT_LIMIT, STD_SW_RIGHT_LIMIT);
  ;
  uint32_t y_start_erase =
      ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * p_cursors->vert_tile) +
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
  uint32_t y_start_erase =
 8001eea:	330a      	adds	r3, #10
 8001eec:	60fb      	str	r3, [r7, #12]
      TEXT_Y_OFFSET_WIDE_TILE;

  GFX_DrawFillRectangle(x_start_erase, y_start_erase, lenght_to_erase,
 8001eee:	6938      	ldr	r0, [r7, #16]
 8001ef0:	68f9      	ldr	r1, [r7, #12]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2308      	movs	r3, #8
 8001efe:	f7fe fbbd 	bl	800067c <GFX_DrawFillRectangle>
                        FONT_HEIGHT, HMI_EDIT_MENU_COLOR);

  return;
 8001f02:	bf00      	nop
}
 8001f04:	3720      	adds	r7, #32
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <draw_std_switch_text>:

void draw_std_switch_text(const hmi_edit_cursors_t *p_cursors,
                          uint8_t switch_number,
                          const edit_option_t **p_std_switch_array)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b088      	sub	sp, #32
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	460b      	mov	r3, r1
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	72fb      	strb	r3, [r7, #11]

  uint32_t selected_switch_val = get_switch_cursor_val(p_cursors);
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 f88e 	bl	800203a <get_switch_cursor_val>
 8001f1e:	61f8      	str	r0, [r7, #28]

  char *selected_text =
      p_std_switch_array[switch_number][selected_switch_val].display_text;
 8001f20:	7afb      	ldrb	r3, [r7, #11]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
  char *selected_text =
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	61bb      	str	r3, [r7, #24]

  uint32_t x_start_text = find_x_to_center_text(
      p_std_switch_array[switch_number][selected_switch_val].display_text,
 8001f34:	7afb      	ldrb	r3, [r7, #11]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	681b      	ldr	r3, [r3, #0]
  uint32_t x_start_text = find_x_to_center_text(
 8001f46:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8001f4a:	2196      	movs	r1, #150	; 0x96
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 f855 	bl	8001ffc <find_x_to_center_text>
 8001f52:	6178      	str	r0, [r7, #20]
      STD_SW_LEFT_LIMIT, STD_SW_RIGHT_LIMIT);
  ;
  uint32_t y_start_text =
      ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * switch_number) +
 8001f54:	7afa      	ldrb	r2, [r7, #11]
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
  uint32_t y_start_text =
 8001f5e:	330a      	adds	r3, #10
 8001f60:	613b      	str	r3, [r7, #16]
      TEXT_Y_OFFSET_WIDE_TILE;

  GFX_DrawString(x_start_text, y_start_text, selected_text, HMI_TEXT_COLOR);
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	6939      	ldr	r1, [r7, #16]
 8001f66:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	f7fe fa2a 	bl	80003c4 <GFX_DrawString>

  return;
 8001f70:	bf00      	nop
}
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <draw_cursors_initial_values>:

void draw_cursors_initial_values(const hmi_edit_cursors_t *p_cursors,
                                 const edit_option_t **p_std_switch)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  for (uint8_t i = TILE_STD_SWITCH_START; i <= TILE_STD_SWITCH_END; i++)
 8001f82:	2301      	movs	r3, #1
 8001f84:	73fb      	strb	r3, [r7, #15]
 8001f86:	e008      	b.n	8001f9a <draw_cursors_initial_values+0x22>
    {
      draw_std_switch_text(p_cursors, i, p_std_switch);
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffbb 	bl	8001f0a <draw_std_switch_text>
  for (uint8_t i = TILE_STD_SWITCH_START; i <= TILE_STD_SWITCH_END; i++)
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	3301      	adds	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d9f3      	bls.n	8001f88 <draw_cursors_initial_values+0x10>
    }

  draw_initial_address_switch();
 8001fa0:	f000 f80c 	bl	8001fbc <draw_initial_address_switch>

  /* Tile selection cursor */
  draw_wide_tile(NULL, TILE_HEADER, false, HMI_HIGHLIGHT_TILE_COLOR);
 8001fa4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	2000      	movs	r0, #0
 8001fae:	f7ff fcc5 	bl	800193c <draw_wide_tile>

  return;
 8001fb2:	bf00      	nop
}
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <draw_initial_address_switch>:

static void draw_initial_address_switch(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0

  uint32_t tile_position = (uint32_t)TILE_ADDRESS;
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	60fb      	str	r3, [r7, #12]

  uint32_t x_start_text =
      find_x_to_center_text("000000", STD_SW_LEFT_LIMIT, STD_SW_RIGHT_LIMIT);
 8001fc6:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8001fca:	2196      	movs	r1, #150	; 0x96
 8001fcc:	480a      	ldr	r0, [pc, #40]	; (8001ff8 <draw_initial_address_switch+0x3c>)
 8001fce:	f000 f815 	bl	8001ffc <find_x_to_center_text>
 8001fd2:	60b8      	str	r0, [r7, #8]
  ;
  uint32_t y_start_text =
      ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * tile_position) +
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
  uint32_t y_start_text =
 8001fde:	330a      	adds	r3, #10
 8001fe0:	607b      	str	r3, [r7, #4]
      TEXT_Y_OFFSET_WIDE_TILE;

  GFX_DrawString(x_start_text, y_start_text, "000000", HMI_TEXT_COLOR);
 8001fe2:	68b8      	ldr	r0, [r7, #8]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001fea:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <draw_initial_address_switch+0x3c>)
 8001fec:	f7fe f9ea 	bl	80003c4 <GFX_DrawString>

  return;
 8001ff0:	bf00      	nop
}
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	08005bc8 	.word	0x08005bc8

08001ffc <find_x_to_center_text>:

static uint32_t find_x_to_center_text(const char *text, uint32_t left_limit,
                                      uint32_t right_limit)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t string_lenght = strlen(text) * (FONT_WIDTH + FONT_SPACE);
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f7fe f89f 	bl	800014c <strlen>
 800200e:	4602      	mov	r2, r0
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	61fb      	str	r3, [r7, #28]
  uint32_t tile_width = right_limit - left_limit;
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	61bb      	str	r3, [r7, #24]
  uint32_t start_text_pos = ((tile_width - string_lenght) / 2) + left_limit;
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	085b      	lsrs	r3, r3, #1
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	4413      	add	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
  return start_text_pos;
 8002030:	697b      	ldr	r3, [r7, #20]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3720      	adds	r7, #32
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <get_switch_cursor_val>:

static uint32_t get_switch_cursor_val(const hmi_edit_cursors_t *p_cursors)
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  uint32_t position = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
  switch (p_cursors->vert_tile)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b03      	cmp	r3, #3
 800204c:	d00e      	beq.n	800206c <get_switch_cursor_val+0x32>
 800204e:	2b03      	cmp	r3, #3
 8002050:	dc10      	bgt.n	8002074 <get_switch_cursor_val+0x3a>
 8002052:	2b01      	cmp	r3, #1
 8002054:	d002      	beq.n	800205c <get_switch_cursor_val+0x22>
 8002056:	2b02      	cmp	r3, #2
 8002058:	d004      	beq.n	8002064 <get_switch_cursor_val+0x2a>
    case (TILE_ADDRESS):
      /* FALLTHORUGH */
    case (TILE_EXIT):
      /* FALLTHORUGH */
    default:
      break;
 800205a:	e00b      	b.n	8002074 <get_switch_cursor_val+0x3a>
      position = p_cursors->horiz_fun;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	785b      	ldrb	r3, [r3, #1]
 8002060:	60fb      	str	r3, [r7, #12]
      break;
 8002062:	e008      	b.n	8002076 <get_switch_cursor_val+0x3c>
      position = p_cursors->horiz_dev;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	789b      	ldrb	r3, [r3, #2]
 8002068:	60fb      	str	r3, [r7, #12]
      break;
 800206a:	e004      	b.n	8002076 <get_switch_cursor_val+0x3c>
      position = p_cursors->horiz_size;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	78db      	ldrb	r3, [r3, #3]
 8002070:	60fb      	str	r3, [r7, #12]
      break;
 8002072:	e000      	b.n	8002076 <get_switch_cursor_val+0x3c>
      break;
 8002074:	bf00      	nop
    }

  return position;
 8002076:	68fb      	ldr	r3, [r7, #12]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
	...

08002084 <em_open_edit_menu>:
static hmi_change_screen_t
edit_menu_if_button_pressed(hmi_main_screen_t *p_main_screen_data);
static void save_data_to_tile(hmi_main_screen_t *p_main_screen_data);

void em_open_edit_menu(const hmi_main_screen_t *p_main_screen_data)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  draw_edit_menu(p_main_screen_data->active_main_tile);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fd83 	bl	8001b9c <draw_edit_menu>
  init_edit_menu_cursors();
 8002096:	f000 fb53 	bl	8002740 <init_edit_menu_cursors>
  draw_cursors_initial_values(&edit_menu_cursors, std_switches);
 800209a:	4904      	ldr	r1, [pc, #16]	; (80020ac <em_open_edit_menu+0x28>)
 800209c:	4804      	ldr	r0, [pc, #16]	; (80020b0 <em_open_edit_menu+0x2c>)
 800209e:	f7ff ff6b 	bl	8001f78 <draw_cursors_initial_values>

  return;
 80020a2:	bf00      	nop
}
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000008 	.word	0x20000008
 80020b0:	200001cc 	.word	0x200001cc

080020b4 <em_active_screen>:

/* Active screen super loop */
hmi_change_screen_t em_active_screen(hmi_main_screen_t *p_main_screen_data)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  hmi_change_screen_t ret_action = OPEN_MAIN_MENU;
 80020bc:	2302      	movs	r3, #2
 80020be:	73fb      	strb	r3, [r7, #15]

  while (1)
    {
      ret_action = edit_menu_if_button_pressed(p_main_screen_data);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 fb67 	bl	8002794 <edit_menu_if_button_pressed>
 80020c6:	4603      	mov	r3, r0
 80020c8:	73fb      	strb	r3, [r7, #15]

      if (NO_CHANGE != ret_action)
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f7      	beq.n	80020c0 <em_active_screen+0xc>
        {
          if (SAVE_DATA_TO_TILE == ret_action)
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d104      	bne.n	80020e0 <em_active_screen+0x2c>
            {
              save_data_to_tile(p_main_screen_data);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fb92 	bl	8002800 <save_data_to_tile>
              ret_action = OPEN_MAIN_MENU;
 80020dc:	2302      	movs	r3, #2
 80020de:	73fb      	strb	r3, [r7, #15]
            }
          break;
 80020e0:	bf00      	nop
        }
    }

  return ret_action;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <update_horiz_cursor_val>:

/*** HORIZONTAL CURSOR FUNCTIONS **/

static void update_horiz_cursor_val(buttons_state_t pending_flag)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  if (pending_flag == LEFT_FLAG)
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d160      	bne.n	80021be <update_horiz_cursor_val+0xd2>
    {
      switch (edit_menu_cursors.vert_tile)
 80020fc:	4b65      	ldr	r3, [pc, #404]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	3b01      	subs	r3, #1
 8002102:	2b04      	cmp	r3, #4
 8002104:	f200 80bc 	bhi.w	8002280 <update_horiz_cursor_val+0x194>
 8002108:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <update_horiz_cursor_val+0x24>)
 800210a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210e:	bf00      	nop
 8002110:	08002125 	.word	0x08002125
 8002114:	0800213d 	.word	0x0800213d
 8002118:	08002163 	.word	0x08002163
 800211c:	08002185 	.word	0x08002185
 8002120:	080021a7 	.word	0x080021a7
        {
        case (TILE_FUNCTION):
          edit_menu_cursors.horiz_fun = (edit_menu_cursors.horiz_fun + 1) % 2;
 8002124:	4b5b      	ldr	r3, [pc, #364]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 8002126:	785b      	ldrb	r3, [r3, #1]
 8002128:	3301      	adds	r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	bfb8      	it	lt
 8002132:	425b      	neglt	r3, r3
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b57      	ldr	r3, [pc, #348]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 8002138:	705a      	strb	r2, [r3, #1]
          break;
 800213a:	e0a6      	b.n	800228a <update_horiz_cursor_val+0x19e>
        case (TILE_DEVICE):
          edit_menu_cursors.horiz_dev = (edit_menu_cursors.horiz_dev + 11) % 12;
 800213c:	4b55      	ldr	r3, [pc, #340]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 800213e:	789b      	ldrb	r3, [r3, #2]
 8002140:	f103 020b 	add.w	r2, r3, #11
 8002144:	4b54      	ldr	r3, [pc, #336]	; (8002298 <update_horiz_cursor_val+0x1ac>)
 8002146:	fb83 1302 	smull	r1, r3, r3, r2
 800214a:	1059      	asrs	r1, r3, #1
 800214c:	17d3      	asrs	r3, r2, #31
 800214e:	1ac9      	subs	r1, r1, r3
 8002150:	460b      	mov	r3, r1
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	440b      	add	r3, r1
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	1ad1      	subs	r1, r2, r3
 800215a:	b2ca      	uxtb	r2, r1
 800215c:	4b4d      	ldr	r3, [pc, #308]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 800215e:	709a      	strb	r2, [r3, #2]
          break;
 8002160:	e093      	b.n	800228a <update_horiz_cursor_val+0x19e>
        case (TILE_SIZE):
          edit_menu_cursors.horiz_size = (edit_menu_cursors.horiz_size + 4) % 5;
 8002162:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 8002164:	78db      	ldrb	r3, [r3, #3]
 8002166:	1d1a      	adds	r2, r3, #4
 8002168:	4b4c      	ldr	r3, [pc, #304]	; (800229c <update_horiz_cursor_val+0x1b0>)
 800216a:	fb83 1302 	smull	r1, r3, r3, r2
 800216e:	1059      	asrs	r1, r3, #1
 8002170:	17d3      	asrs	r3, r2, #31
 8002172:	1ac9      	subs	r1, r1, r3
 8002174:	460b      	mov	r3, r1
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	1ad1      	subs	r1, r2, r3
 800217c:	b2ca      	uxtb	r2, r1
 800217e:	4b45      	ldr	r3, [pc, #276]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 8002180:	70da      	strb	r2, [r3, #3]
          break;
 8002182:	e082      	b.n	800228a <update_horiz_cursor_val+0x19e>
        case (TILE_ADDRESS):
          edit_menu_cursors.horiz_address =
              (edit_menu_cursors.horiz_address + 5) % 6;
 8002184:	4b43      	ldr	r3, [pc, #268]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 8002186:	791b      	ldrb	r3, [r3, #4]
 8002188:	1d5a      	adds	r2, r3, #5
 800218a:	4b43      	ldr	r3, [pc, #268]	; (8002298 <update_horiz_cursor_val+0x1ac>)
 800218c:	fb83 3102 	smull	r3, r1, r3, r2
 8002190:	17d3      	asrs	r3, r2, #31
 8002192:	1ac9      	subs	r1, r1, r3
 8002194:	460b      	mov	r3, r1
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	440b      	add	r3, r1
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	1ad1      	subs	r1, r2, r3
          edit_menu_cursors.horiz_address =
 800219e:	b2ca      	uxtb	r2, r1
 80021a0:	4b3c      	ldr	r3, [pc, #240]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 80021a2:	711a      	strb	r2, [r3, #4]
          break;
 80021a4:	e071      	b.n	800228a <update_horiz_cursor_val+0x19e>
        case (TILE_EXIT):
          edit_menu_cursors.horiz_exit = (edit_menu_cursors.horiz_exit + 1) % 2;
 80021a6:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 80021a8:	799b      	ldrb	r3, [r3, #6]
 80021aa:	3301      	adds	r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	bfb8      	it	lt
 80021b4:	425b      	neglt	r3, r3
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b36      	ldr	r3, [pc, #216]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 80021ba:	719a      	strb	r2, [r3, #6]
          break;
 80021bc:	e065      	b.n	800228a <update_horiz_cursor_val+0x19e>
          /* FALLTHORUGH */
        default:
          break;
        }
    }
  else if (pending_flag == RIGHT_FLAG)
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d15f      	bne.n	8002284 <update_horiz_cursor_val+0x198>
    {
      switch (edit_menu_cursors.vert_tile)
 80021c4:	4b33      	ldr	r3, [pc, #204]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d85c      	bhi.n	8002288 <update_horiz_cursor_val+0x19c>
 80021ce:	a201      	add	r2, pc, #4	; (adr r2, 80021d4 <update_horiz_cursor_val+0xe8>)
 80021d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d4:	080021e9 	.word	0x080021e9
 80021d8:	08002201 	.word	0x08002201
 80021dc:	08002225 	.word	0x08002225
 80021e0:	08002247 	.word	0x08002247
 80021e4:	08002269 	.word	0x08002269
        {
        case (TILE_FUNCTION):
          edit_menu_cursors.horiz_fun = (edit_menu_cursors.horiz_fun + 1) % 2;
 80021e8:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 80021ea:	785b      	ldrb	r3, [r3, #1]
 80021ec:	3301      	adds	r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	bfb8      	it	lt
 80021f6:	425b      	neglt	r3, r3
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 80021fc:	705a      	strb	r2, [r3, #1]
          break;
 80021fe:	e044      	b.n	800228a <update_horiz_cursor_val+0x19e>
        case (TILE_DEVICE):
          edit_menu_cursors.horiz_dev = (edit_menu_cursors.horiz_dev + 1) % 12;
 8002200:	4b24      	ldr	r3, [pc, #144]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 8002202:	789b      	ldrb	r3, [r3, #2]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <update_horiz_cursor_val+0x1ac>)
 8002208:	fb83 1302 	smull	r1, r3, r3, r2
 800220c:	1059      	asrs	r1, r3, #1
 800220e:	17d3      	asrs	r3, r2, #31
 8002210:	1ac9      	subs	r1, r1, r3
 8002212:	460b      	mov	r3, r1
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	440b      	add	r3, r1
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	1ad1      	subs	r1, r2, r3
 800221c:	b2ca      	uxtb	r2, r1
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 8002220:	709a      	strb	r2, [r3, #2]
          break;
 8002222:	e032      	b.n	800228a <update_horiz_cursor_val+0x19e>
        case (TILE_SIZE):
          edit_menu_cursors.horiz_size = (edit_menu_cursors.horiz_size + 1) % 5;
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 8002226:	78db      	ldrb	r3, [r3, #3]
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	4b1c      	ldr	r3, [pc, #112]	; (800229c <update_horiz_cursor_val+0x1b0>)
 800222c:	fb83 1302 	smull	r1, r3, r3, r2
 8002230:	1059      	asrs	r1, r3, #1
 8002232:	17d3      	asrs	r3, r2, #31
 8002234:	1ac9      	subs	r1, r1, r3
 8002236:	460b      	mov	r3, r1
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	1ad1      	subs	r1, r2, r3
 800223e:	b2ca      	uxtb	r2, r1
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 8002242:	70da      	strb	r2, [r3, #3]
          break;
 8002244:	e021      	b.n	800228a <update_horiz_cursor_val+0x19e>
        case (TILE_ADDRESS):
          edit_menu_cursors.horiz_address =
              (edit_menu_cursors.horiz_address + 1) % 6;
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 8002248:	791b      	ldrb	r3, [r3, #4]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <update_horiz_cursor_val+0x1ac>)
 800224e:	fb83 3102 	smull	r3, r1, r3, r2
 8002252:	17d3      	asrs	r3, r2, #31
 8002254:	1ac9      	subs	r1, r1, r3
 8002256:	460b      	mov	r3, r1
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	440b      	add	r3, r1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	1ad1      	subs	r1, r2, r3
          edit_menu_cursors.horiz_address =
 8002260:	b2ca      	uxtb	r2, r1
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 8002264:	711a      	strb	r2, [r3, #4]
          break;
 8002266:	e010      	b.n	800228a <update_horiz_cursor_val+0x19e>
        case (TILE_EXIT):
          edit_menu_cursors.horiz_exit = (edit_menu_cursors.horiz_exit + 1) % 2;
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 800226a:	799b      	ldrb	r3, [r3, #6]
 800226c:	3301      	adds	r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	bfb8      	it	lt
 8002276:	425b      	neglt	r3, r3
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <update_horiz_cursor_val+0x1a8>)
 800227c:	719a      	strb	r2, [r3, #6]
          break;
 800227e:	e004      	b.n	800228a <update_horiz_cursor_val+0x19e>
          break;
 8002280:	bf00      	nop
 8002282:	e002      	b.n	800228a <update_horiz_cursor_val+0x19e>
        case (TILE_HEADER):
          /* FALLTHORUGH */
        default:
          break;
        }
    }
 8002284:	bf00      	nop
 8002286:	e000      	b.n	800228a <update_horiz_cursor_val+0x19e>
          break;
 8002288:	bf00      	nop

  return;
 800228a:	bf00      	nop
}
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	200001cc 	.word	0x200001cc
 8002298:	2aaaaaab 	.word	0x2aaaaaab
 800229c:	66666667 	.word	0x66666667

080022a0 <redraw_horiz_std_switch>:

/* Standard switches : function,device,size */
static void redraw_horiz_std_switch(buttons_state_t pending_flag)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  draw_erase_std_switch_text(&edit_menu_cursors, std_switches);
 80022aa:	4909      	ldr	r1, [pc, #36]	; (80022d0 <redraw_horiz_std_switch+0x30>)
 80022ac:	4809      	ldr	r0, [pc, #36]	; (80022d4 <redraw_horiz_std_switch+0x34>)
 80022ae:	f7ff fde7 	bl	8001e80 <draw_erase_std_switch_text>
  update_horiz_cursor_val(pending_flag);
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff19 	bl	80020ec <update_horiz_cursor_val>
  draw_std_switch_text(&edit_menu_cursors, edit_menu_cursors.vert_tile,
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <redraw_horiz_std_switch+0x34>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <redraw_horiz_std_switch+0x30>)
 80022c0:	4619      	mov	r1, r3
 80022c2:	4804      	ldr	r0, [pc, #16]	; (80022d4 <redraw_horiz_std_switch+0x34>)
 80022c4:	f7ff fe21 	bl	8001f0a <draw_std_switch_text>
                       std_switches);
  return;
 80022c8:	bf00      	nop
}
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000008 	.word	0x20000008
 80022d4:	200001cc 	.word	0x200001cc

080022d8 <redraw_horiz_address_switch>:

static void redraw_horiz_address_switch(buttons_state_t pending_flag)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  draw_address_cursor(&edit_menu_cursors, HMI_EDIT_MENU_COLOR);
 80022e2:	f240 31ef 	movw	r1, #1007	; 0x3ef
 80022e6:	4811      	ldr	r0, [pc, #68]	; (800232c <redraw_horiz_address_switch+0x54>)
 80022e8:	f7ff fd72 	bl	8001dd0 <draw_address_cursor>
  update_horiz_cursor_val(pending_flag);
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fefc 	bl	80020ec <update_horiz_cursor_val>

  /* Save char to main menu data */
  edit_menu_cursors.vert_address_num =
      (uint8_t)edit_menu_cursors.address[edit_menu_cursors.horiz_address];
 80022f4:	4b0d      	ldr	r3, [pc, #52]	; (800232c <redraw_horiz_address_switch+0x54>)
 80022f6:	791b      	ldrb	r3, [r3, #4]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <redraw_horiz_address_switch+0x54>)
 80022fc:	4413      	add	r3, r2
 80022fe:	79da      	ldrb	r2, [r3, #7]
  edit_menu_cursors.vert_address_num =
 8002300:	4b0a      	ldr	r3, [pc, #40]	; (800232c <redraw_horiz_address_switch+0x54>)
 8002302:	715a      	strb	r2, [r3, #5]

  if (true == edit_menu_cursors.is_edit_mode_active)
 8002304:	4b09      	ldr	r3, [pc, #36]	; (800232c <redraw_horiz_address_switch+0x54>)
 8002306:	7b5b      	ldrb	r3, [r3, #13]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <redraw_horiz_address_switch+0x40>
    {
      draw_address_cursor(&edit_menu_cursors, HMI_HIGHLIGHT_TILE_COLOR);
 800230c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002310:	4806      	ldr	r0, [pc, #24]	; (800232c <redraw_horiz_address_switch+0x54>)
 8002312:	f7ff fd5d 	bl	8001dd0 <draw_address_cursor>
  else
    {
      draw_address_cursor(&edit_menu_cursors, HMI_TEXT_COLOR);
    }

  return;
 8002316:	e005      	b.n	8002324 <redraw_horiz_address_switch+0x4c>
      draw_address_cursor(&edit_menu_cursors, HMI_TEXT_COLOR);
 8002318:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800231c:	4803      	ldr	r0, [pc, #12]	; (800232c <redraw_horiz_address_switch+0x54>)
 800231e:	f7ff fd57 	bl	8001dd0 <draw_address_cursor>
  return;
 8002322:	bf00      	nop
}
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200001cc 	.word	0x200001cc

08002330 <redraw_horiz_exit_switch>:

static void redraw_horiz_exit_switch(buttons_state_t pending_flag)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  draw_exit_cursor(&edit_menu_cursors, HMI_EDIT_MENU_COLOR);
 800233a:	f240 31ef 	movw	r1, #1007	; 0x3ef
 800233e:	4808      	ldr	r0, [pc, #32]	; (8002360 <redraw_horiz_exit_switch+0x30>)
 8002340:	f7ff fd16 	bl	8001d70 <draw_exit_cursor>
  update_horiz_cursor_val(pending_flag);
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fed0 	bl	80020ec <update_horiz_cursor_val>
  draw_exit_cursor(&edit_menu_cursors, HMI_TEXT_COLOR);
 800234c:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8002350:	4803      	ldr	r0, [pc, #12]	; (8002360 <redraw_horiz_exit_switch+0x30>)
 8002352:	f7ff fd0d 	bl	8001d70 <draw_exit_cursor>

  return;
 8002356:	bf00      	nop
}
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200001cc 	.word	0x200001cc

08002364 <redraw_horiz_header>:

static void redraw_horiz_header(buttons_state_t pending_flag,
                                hmi_main_screen_t *p_main_screen_data)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
  if (RIGHT_FLAG == pending_flag)
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d111      	bne.n	800239a <redraw_horiz_header+0x36>
    {
      p_main_screen_data->active_main_tile =
          (p_main_screen_data->active_main_tile + 1) % 10;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	4b17      	ldr	r3, [pc, #92]	; (80023dc <redraw_horiz_header+0x78>)
 800237e:	fb83 1302 	smull	r1, r3, r3, r2
 8002382:	1099      	asrs	r1, r3, #2
 8002384:	17d3      	asrs	r3, r2, #31
 8002386:	1ac9      	subs	r1, r1, r3
 8002388:	460b      	mov	r3, r1
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	1ad1      	subs	r1, r2, r3
      p_main_screen_data->active_main_tile =
 8002392:	b2ca      	uxtb	r2, r1
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	701a      	strb	r2, [r3, #0]
 8002398:	e014      	b.n	80023c4 <redraw_horiz_header+0x60>
    }
  else if (LEFT_FLAG == pending_flag)
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d111      	bne.n	80023c4 <redraw_horiz_header+0x60>
    {
      p_main_screen_data->active_main_tile =
          (p_main_screen_data->active_main_tile + 9) % 10;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	f103 0209 	add.w	r2, r3, #9
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <redraw_horiz_header+0x78>)
 80023aa:	fb83 1302 	smull	r1, r3, r3, r2
 80023ae:	1099      	asrs	r1, r3, #2
 80023b0:	17d3      	asrs	r3, r2, #31
 80023b2:	1ac9      	subs	r1, r1, r3
 80023b4:	460b      	mov	r3, r1
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	1ad1      	subs	r1, r2, r3
      p_main_screen_data->active_main_tile =
 80023be:	b2ca      	uxtb	r2, r1
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	701a      	strb	r2, [r3, #0]
    }

  draw_update_header_number(p_main_screen_data->active_main_tile + '0');
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	3330      	adds	r3, #48	; 0x30
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fd2f 	bl	8001e30 <draw_update_header_number>

  return;
 80023d2:	bf00      	nop
}
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	66666667 	.word	0x66666667

080023e0 <shift_vert_cursor_up>:

static void shift_vert_cursor_up(cursor *p_cursor_to_update,
                                 uint8_t no_positions)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
  cursor cursor_value = *p_cursor_to_update;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	73fb      	strb	r3, [r7, #15]
  cursor_value = (cursor_value + (no_positions - 1)) % no_positions;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	78fa      	ldrb	r2, [r7, #3]
 80023fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8002400:	fb02 f201 	mul.w	r2, r2, r1
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	73fb      	strb	r3, [r7, #15]
  *p_cursor_to_update = cursor_value;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	701a      	strb	r2, [r3, #0]
  return;
 800240e:	bf00      	nop
}
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <shift_vert_cursor_down>:

static void shift_vert_cursor_down(cursor *p_cursor_to_update,
                                   uint8_t no_positions)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	70fb      	strb	r3, [r7, #3]
  cursor cursor_value = *p_cursor_to_update;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	73fb      	strb	r3, [r7, #15]
  cursor_value = (cursor_value + 1) % no_positions;
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	3301      	adds	r3, #1
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	fb93 f1f2 	sdiv	r1, r3, r2
 8002434:	fb02 f201 	mul.w	r2, r2, r1
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	73fb      	strb	r3, [r7, #15]
  *p_cursor_to_update = cursor_value;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	701a      	strb	r2, [r3, #0]
  return;
 8002442:	bf00      	nop
}
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <is_edit_mode_active>:

static bool is_edit_mode_active(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return (TILE_ADDRESS == edit_menu_cursors.vert_tile &&
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <is_edit_mode_active+0x28>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b04      	cmp	r3, #4
 8002456:	d105      	bne.n	8002464 <is_edit_mode_active+0x18>
          true == edit_menu_cursors.is_edit_mode_active);
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <is_edit_mode_active+0x28>)
 800245a:	7b5b      	ldrb	r3, [r3, #13]
  return (TILE_ADDRESS == edit_menu_cursors.vert_tile &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <is_edit_mode_active+0x18>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <is_edit_mode_active+0x1a>
 8002464:	2300      	movs	r3, #0
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	b2db      	uxtb	r3, r3
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	200001cc 	.word	0x200001cc

08002478 <update_vert_cursor_val>:

static void update_vert_cursor_val(buttons_state_t pending_flag)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]

  if (UP_FLAG == pending_flag)
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	2b04      	cmp	r3, #4
 8002486:	d10c      	bne.n	80024a2 <update_vert_cursor_val+0x2a>
    {
      if (true == is_edit_mode_active)
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <update_vert_cursor_val+0x54>)
 800248a:	2b01      	cmp	r3, #1
 800248c:	d104      	bne.n	8002498 <update_vert_cursor_val+0x20>
        {
          shift_vert_cursor_up(&edit_menu_cursors.vert_address_num,
 800248e:	210a      	movs	r1, #10
 8002490:	480f      	ldr	r0, [pc, #60]	; (80024d0 <update_vert_cursor_val+0x58>)
 8002492:	f7ff ffa5 	bl	80023e0 <shift_vert_cursor_up>
          shift_vert_cursor_down(&edit_menu_cursors.vert_tile,
                                 NO_EDIT_MENU_TILES);
        }
    }

  return;
 8002496:	e014      	b.n	80024c2 <update_vert_cursor_val+0x4a>
          shift_vert_cursor_up(&edit_menu_cursors.vert_tile,
 8002498:	2106      	movs	r1, #6
 800249a:	480e      	ldr	r0, [pc, #56]	; (80024d4 <update_vert_cursor_val+0x5c>)
 800249c:	f7ff ffa0 	bl	80023e0 <shift_vert_cursor_up>
  return;
 80024a0:	e00f      	b.n	80024c2 <update_vert_cursor_val+0x4a>
  else if (DOWN_FLAG == pending_flag)
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d10c      	bne.n	80024c2 <update_vert_cursor_val+0x4a>
      if (true == is_edit_mode_active)
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <update_vert_cursor_val+0x54>)
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d104      	bne.n	80024b8 <update_vert_cursor_val+0x40>
          shift_vert_cursor_down(&edit_menu_cursors.vert_address_num,
 80024ae:	210a      	movs	r1, #10
 80024b0:	4807      	ldr	r0, [pc, #28]	; (80024d0 <update_vert_cursor_val+0x58>)
 80024b2:	f7ff ffb1 	bl	8002418 <shift_vert_cursor_down>
  return;
 80024b6:	e004      	b.n	80024c2 <update_vert_cursor_val+0x4a>
          shift_vert_cursor_down(&edit_menu_cursors.vert_tile,
 80024b8:	2106      	movs	r1, #6
 80024ba:	4806      	ldr	r0, [pc, #24]	; (80024d4 <update_vert_cursor_val+0x5c>)
 80024bc:	f7ff ffac 	bl	8002418 <shift_vert_cursor_down>
  return;
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
}
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	0800244d 	.word	0x0800244d
 80024d0:	200001d1 	.word	0x200001d1
 80024d4:	200001cc 	.word	0x200001cc

080024d8 <select_horiz_cursor_to_edit>:

static void select_horiz_cursor_to_edit(buttons_state_t pending_flag,
                                        hmi_main_screen_t *p_main_screen_data)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	71fb      	strb	r3, [r7, #7]
  switch (edit_menu_cursors.vert_tile)
 80024e4:	4b18      	ldr	r3, [pc, #96]	; (8002548 <select_horiz_cursor_to_edit+0x70>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b05      	cmp	r3, #5
 80024ea:	d824      	bhi.n	8002536 <select_horiz_cursor_to_edit+0x5e>
 80024ec:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <select_horiz_cursor_to_edit+0x1c>)
 80024ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f2:	bf00      	nop
 80024f4:	0800250d 	.word	0x0800250d
 80024f8:	08002519 	.word	0x08002519
 80024fc:	08002519 	.word	0x08002519
 8002500:	08002519 	.word	0x08002519
 8002504:	08002523 	.word	0x08002523
 8002508:	0800252d 	.word	0x0800252d
    {
    case (TILE_HEADER):
      redraw_horiz_header(pending_flag, p_main_screen_data);
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	6839      	ldr	r1, [r7, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff27 	bl	8002364 <redraw_horiz_header>
      break;
 8002516:	e00e      	b.n	8002536 <select_horiz_cursor_to_edit+0x5e>
    case (TILE_DEVICE):
      /* FALLTHORUGH */
    case (TILE_FUNCTION):
      /* FALLTHORUGH */
    case (TILE_SIZE):
      redraw_horiz_std_switch(pending_flag);
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fec0 	bl	80022a0 <redraw_horiz_std_switch>
      break;
 8002520:	e009      	b.n	8002536 <select_horiz_cursor_to_edit+0x5e>

    case (TILE_ADDRESS):
      redraw_horiz_address_switch(pending_flag);
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fed7 	bl	80022d8 <redraw_horiz_address_switch>
      break;
 800252a:	e004      	b.n	8002536 <select_horiz_cursor_to_edit+0x5e>

    case (TILE_EXIT):
      redraw_horiz_exit_switch(pending_flag);
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fefe 	bl	8002330 <redraw_horiz_exit_switch>
      break;
 8002534:	bf00      	nop
    }

  buttons_reset_flag(pending_flag);
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	4618      	mov	r0, r3
 800253a:	f7fd fe77 	bl	800022c <buttons_reset_flag>

  return;
 800253e:	bf00      	nop
}
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200001cc 	.word	0x200001cc

0800254c <redraw_vert_address_char>:

/*** VERTICAL CURSOR CHANGE FUNCTIONS **/

static void redraw_vert_address_char(buttons_state_t pending_flag)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
  update_vert_cursor_val(pending_flag);
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff8d 	bl	8002478 <update_vert_cursor_val>
  draw_address_char(&edit_menu_cursors);
 800255e:	4807      	ldr	r0, [pc, #28]	; (800257c <redraw_vert_address_char+0x30>)
 8002560:	f7ff fbcc 	bl	8001cfc <draw_address_char>
  edit_menu_cursors.address[edit_menu_cursors.horiz_address] =
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <redraw_vert_address_char+0x30>)
 8002566:	791b      	ldrb	r3, [r3, #4]
 8002568:	4619      	mov	r1, r3
      (char)edit_menu_cursors.vert_address_num;
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <redraw_vert_address_char+0x30>)
 800256c:	795a      	ldrb	r2, [r3, #5]
  edit_menu_cursors.address[edit_menu_cursors.horiz_address] =
 800256e:	4b03      	ldr	r3, [pc, #12]	; (800257c <redraw_vert_address_char+0x30>)
 8002570:	440b      	add	r3, r1
 8002572:	71da      	strb	r2, [r3, #7]

  return;
 8002574:	bf00      	nop
}
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	200001cc 	.word	0x200001cc

08002580 <redraw_vert_tile_cursor>:

// update and redraw vertical tile selection
static void redraw_vert_tile_cursor(buttons_state_t pending_flag)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
  draw_wide_tile(NULL, edit_menu_cursors.vert_tile, false, HMI_TILE_COLOR);
 800258a:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <redraw_vert_tile_cursor+0x78>)
 800258c:	7819      	ldrb	r1, [r3, #0]
 800258e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002592:	2200      	movs	r2, #0
 8002594:	2000      	movs	r0, #0
 8002596:	f7ff f9d1 	bl	800193c <draw_wide_tile>
  update_vert_cursor_val(pending_flag);
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff6b 	bl	8002478 <update_vert_cursor_val>
  draw_wide_tile(NULL, edit_menu_cursors.vert_tile, false,
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <redraw_vert_tile_cursor+0x78>)
 80025a4:	7819      	ldrb	r1, [r3, #0]
 80025a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025aa:	2200      	movs	r2, #0
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7ff f9c5 	bl	800193c <draw_wide_tile>
                 HMI_HIGHLIGHT_TILE_COLOR);

  if (TILE_ADDRESS == edit_menu_cursors.vert_tile)
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <redraw_vert_tile_cursor+0x78>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d105      	bne.n	80025c6 <redraw_vert_tile_cursor+0x46>
    {
      draw_address_cursor(&edit_menu_cursors, HMI_TEXT_COLOR);
 80025ba:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80025be:	480e      	ldr	r0, [pc, #56]	; (80025f8 <redraw_vert_tile_cursor+0x78>)
 80025c0:	f7ff fc06 	bl	8001dd0 <draw_address_cursor>
 80025c4:	e004      	b.n	80025d0 <redraw_vert_tile_cursor+0x50>
    }
  else
    {
      draw_address_cursor(&edit_menu_cursors, HMI_EDIT_MENU_COLOR);
 80025c6:	f240 31ef 	movw	r1, #1007	; 0x3ef
 80025ca:	480b      	ldr	r0, [pc, #44]	; (80025f8 <redraw_vert_tile_cursor+0x78>)
 80025cc:	f7ff fc00 	bl	8001dd0 <draw_address_cursor>
    }

  if (TILE_EXIT == edit_menu_cursors.vert_tile)
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <redraw_vert_tile_cursor+0x78>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	d105      	bne.n	80025e4 <redraw_vert_tile_cursor+0x64>
    {
      draw_exit_cursor(&edit_menu_cursors, HMI_TEXT_COLOR);
 80025d8:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80025dc:	4806      	ldr	r0, [pc, #24]	; (80025f8 <redraw_vert_tile_cursor+0x78>)
 80025de:	f7ff fbc7 	bl	8001d70 <draw_exit_cursor>
  else
    {
      draw_exit_cursor(&edit_menu_cursors, HMI_EDIT_MENU_COLOR);
    }

  return;
 80025e2:	e005      	b.n	80025f0 <redraw_vert_tile_cursor+0x70>
      draw_exit_cursor(&edit_menu_cursors, HMI_EDIT_MENU_COLOR);
 80025e4:	f240 31ef 	movw	r1, #1007	; 0x3ef
 80025e8:	4803      	ldr	r0, [pc, #12]	; (80025f8 <redraw_vert_tile_cursor+0x78>)
 80025ea:	f7ff fbc1 	bl	8001d70 <draw_exit_cursor>
  return;
 80025ee:	bf00      	nop
}
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	200001cc 	.word	0x200001cc

080025fc <select_vert_cursor_to_edit>:

// change tile cursor position on screen vertically
static void select_vert_cursor_to_edit(buttons_state_t pending_flag)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]

  if (TILE_ADDRESS == edit_menu_cursors.vert_tile &&
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <select_vert_cursor_to_edit+0x3c>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b04      	cmp	r3, #4
 800260c:	d108      	bne.n	8002620 <select_vert_cursor_to_edit+0x24>
      true == edit_menu_cursors.is_edit_mode_active)
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <select_vert_cursor_to_edit+0x3c>)
 8002610:	7b5b      	ldrb	r3, [r3, #13]
  if (TILE_ADDRESS == edit_menu_cursors.vert_tile &&
 8002612:	2b00      	cmp	r3, #0
 8002614:	d004      	beq.n	8002620 <select_vert_cursor_to_edit+0x24>
    {
      redraw_vert_address_char(pending_flag);
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff97 	bl	800254c <redraw_vert_address_char>
 800261e:	e003      	b.n	8002628 <select_vert_cursor_to_edit+0x2c>
    }
  else
    {
      redraw_vert_tile_cursor(pending_flag);
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ffac 	bl	8002580 <redraw_vert_tile_cursor>
    }

  buttons_reset_flag(pending_flag);
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd fdfe 	bl	800022c <buttons_reset_flag>

  return;
 8002630:	bf00      	nop
}
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	200001cc 	.word	0x200001cc

0800263c <show_arrows_icon_if_edit_active>:

/*** ENTER PRESSED FUNCTIONS **/

static void show_arrows_icon_if_edit_active(bool edit_mode_active)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  if (true == edit_mode_active)
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d009      	beq.n	8002660 <show_arrows_icon_if_edit_active+0x24>
    {
      draw_arrows_icon(HMI_TEXT_COLOR);
 800264c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002650:	f7ff fb04 	bl	8001c5c <draw_arrows_icon>
      draw_address_cursor(&edit_menu_cursors, HMI_HIGHLIGHT_TILE_COLOR);
 8002654:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002658:	4808      	ldr	r0, [pc, #32]	; (800267c <show_arrows_icon_if_edit_active+0x40>)
 800265a:	f7ff fbb9 	bl	8001dd0 <draw_address_cursor>
    {
      draw_arrows_icon(HMI_EDIT_MENU_COLOR);
      draw_address_cursor(&edit_menu_cursors, HMI_TEXT_COLOR);
    }

  return;
 800265e:	e009      	b.n	8002674 <show_arrows_icon_if_edit_active+0x38>
      draw_arrows_icon(HMI_EDIT_MENU_COLOR);
 8002660:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8002664:	f7ff fafa 	bl	8001c5c <draw_arrows_icon>
      draw_address_cursor(&edit_menu_cursors, HMI_TEXT_COLOR);
 8002668:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800266c:	4803      	ldr	r0, [pc, #12]	; (800267c <show_arrows_icon_if_edit_active+0x40>)
 800266e:	f7ff fbaf 	bl	8001dd0 <draw_address_cursor>
  return;
 8002672:	bf00      	nop
}
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200001cc 	.word	0x200001cc

08002680 <action_if_enter_pressed>:

static hmi_change_screen_t action_if_enter_pressed(buttons_state_t pending_flag)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]

  hmi_change_screen_t ret_action = NO_CHANGE;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]

  switch (edit_menu_cursors.vert_tile)
 800268e:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <action_if_enter_pressed+0x74>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b04      	cmp	r3, #4
 8002694:	d002      	beq.n	800269c <action_if_enter_pressed+0x1c>
 8002696:	2b05      	cmp	r3, #5
 8002698:	d015      	beq.n	80026c6 <action_if_enter_pressed+0x46>
    case (TILE_SIZE):
      /* FALLTHORUGH */
    case (TILE_FUNCTION):
      /* FALLTHORUGH */
    default:
      break;
 800269a:	e022      	b.n	80026e2 <action_if_enter_pressed+0x62>
            !(edit_menu_cursors.is_edit_mode_active);
 800269c:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <action_if_enter_pressed+0x74>)
 800269e:	7b5b      	ldrb	r3, [r3, #13]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f083 0301 	eor.w	r3, r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	b2da      	uxtb	r2, r3
        edit_menu_cursors.is_edit_mode_active =
 80026b6:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <action_if_enter_pressed+0x74>)
 80026b8:	735a      	strb	r2, [r3, #13]
        show_arrows_icon_if_edit_active(edit_menu_cursors.is_edit_mode_active);
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <action_if_enter_pressed+0x74>)
 80026bc:	7b5b      	ldrb	r3, [r3, #13]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff ffbc 	bl	800263c <show_arrows_icon_if_edit_active>
        break;
 80026c4:	e00d      	b.n	80026e2 <action_if_enter_pressed+0x62>
        if (edit_menu_cursors.horiz_exit == CONFIRM)
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <action_if_enter_pressed+0x74>)
 80026c8:	799b      	ldrb	r3, [r3, #6]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d102      	bne.n	80026d4 <action_if_enter_pressed+0x54>
            ret_action = SAVE_DATA_TO_TILE;
 80026ce:	2303      	movs	r3, #3
 80026d0:	73fb      	strb	r3, [r7, #15]
        break;
 80026d2:	e005      	b.n	80026e0 <action_if_enter_pressed+0x60>
        else if (edit_menu_cursors.horiz_exit == DISCARD)
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <action_if_enter_pressed+0x74>)
 80026d6:	799b      	ldrb	r3, [r3, #6]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <action_if_enter_pressed+0x60>
            ret_action = OPEN_MAIN_MENU;
 80026dc:	2302      	movs	r3, #2
 80026de:	73fb      	strb	r3, [r7, #15]
        break;
 80026e0:	bf00      	nop
    }

  buttons_reset_flag(pending_flag);
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd fda1 	bl	800022c <buttons_reset_flag>

  return ret_action;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200001cc 	.word	0x200001cc

080026f8 <get_callback_to_tile>:

static tile_callback_t get_callback_to_tile(tile_function_t tile_function)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
  tile_callback_t ret_ptr = NULL;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]

  switch (tile_function)
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d00c      	beq.n	8002726 <get_callback_to_tile+0x2e>
 800270c:	2b02      	cmp	r3, #2
 800270e:	dc0d      	bgt.n	800272c <get_callback_to_tile+0x34>
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <get_callback_to_tile+0x22>
 8002714:	2b01      	cmp	r3, #1
 8002716:	d003      	beq.n	8002720 <get_callback_to_tile+0x28>
      {
        ret_ptr = NULL;
        break;
      }
    default:
      break;
 8002718:	e008      	b.n	800272c <get_callback_to_tile+0x34>
        ret_ptr = &hmi_read_tile_function;
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <get_callback_to_tile+0x44>)
 800271c:	60fb      	str	r3, [r7, #12]
        break;
 800271e:	e006      	b.n	800272e <get_callback_to_tile+0x36>
        ret_ptr = NULL;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
        break;
 8002724:	e003      	b.n	800272e <get_callback_to_tile+0x36>
        ret_ptr = NULL;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
        break;
 800272a:	e000      	b.n	800272e <get_callback_to_tile+0x36>
      break;
 800272c:	bf00      	nop
    }

  return ret_ptr;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	080013e1 	.word	0x080013e1

08002740 <init_edit_menu_cursors>:

static void init_edit_menu_cursors(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  memcpy(&edit_menu_cursors.address, "00000", 6);
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <init_edit_menu_cursors+0x4c>)
 8002746:	4a12      	ldr	r2, [pc, #72]	; (8002790 <init_edit_menu_cursors+0x50>)
 8002748:	3307      	adds	r3, #7
 800274a:	6810      	ldr	r0, [r2, #0]
 800274c:	6018      	str	r0, [r3, #0]
 800274e:	8892      	ldrh	r2, [r2, #4]
 8002750:	809a      	strh	r2, [r3, #4]
  edit_menu_cursors.is_edit_mode_active = false;
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <init_edit_menu_cursors+0x4c>)
 8002754:	2200      	movs	r2, #0
 8002756:	735a      	strb	r2, [r3, #13]
  edit_menu_cursors.horiz_address = 0;
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <init_edit_menu_cursors+0x4c>)
 800275a:	2200      	movs	r2, #0
 800275c:	711a      	strb	r2, [r3, #4]
  edit_menu_cursors.horiz_dev = 0;
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <init_edit_menu_cursors+0x4c>)
 8002760:	2200      	movs	r2, #0
 8002762:	709a      	strb	r2, [r3, #2]
  edit_menu_cursors.horiz_exit = 0;
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <init_edit_menu_cursors+0x4c>)
 8002766:	2200      	movs	r2, #0
 8002768:	719a      	strb	r2, [r3, #6]
  edit_menu_cursors.horiz_fun = 0;
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <init_edit_menu_cursors+0x4c>)
 800276c:	2200      	movs	r2, #0
 800276e:	705a      	strb	r2, [r3, #1]
  edit_menu_cursors.horiz_size = 0;
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <init_edit_menu_cursors+0x4c>)
 8002772:	2200      	movs	r2, #0
 8002774:	70da      	strb	r2, [r3, #3]
  edit_menu_cursors.vert_address_num = 0;
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <init_edit_menu_cursors+0x4c>)
 8002778:	2200      	movs	r2, #0
 800277a:	715a      	strb	r2, [r3, #5]
  edit_menu_cursors.vert_tile = TILE_HEADER;
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <init_edit_menu_cursors+0x4c>)
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]

  return;
 8002782:	bf00      	nop
}
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	200001cc 	.word	0x200001cc
 8002790:	08005c60 	.word	0x08005c60

08002794 <edit_menu_if_button_pressed>:

static hmi_change_screen_t
edit_menu_if_button_pressed(hmi_main_screen_t *p_main_screen_data)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  hmi_change_screen_t ret_action = NO_CHANGE;
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
  buttons_state_t pending_flag = buttons_get_pending_flag();
 80027a0:	f7fd fd10 	bl	80001c4 <buttons_get_pending_flag>
 80027a4:	4603      	mov	r3, r0
 80027a6:	73bb      	strb	r3, [r7, #14]

  if (IDLE != pending_flag)
 80027a8:	7bbb      	ldrb	r3, [r7, #14]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01f      	beq.n	80027ee <edit_menu_if_button_pressed+0x5a>
    {
      switch (pending_flag)
 80027ae:	7bbb      	ldrb	r3, [r7, #14]
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	d015      	beq.n	80027e0 <edit_menu_if_button_pressed+0x4c>
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	dc1c      	bgt.n	80027f2 <edit_menu_if_button_pressed+0x5e>
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	dc02      	bgt.n	80027c2 <edit_menu_if_button_pressed+0x2e>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	dc04      	bgt.n	80027ca <edit_menu_if_button_pressed+0x36>
          (ret_action = action_if_enter_pressed(pending_flag));
          break;
        case (IDLE):
          /* FALLTHORUGH */
        default:
          break;
 80027c0:	e017      	b.n	80027f2 <edit_menu_if_button_pressed+0x5e>
 80027c2:	3b03      	subs	r3, #3
      switch (pending_flag)
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d814      	bhi.n	80027f2 <edit_menu_if_button_pressed+0x5e>
 80027c8:	e005      	b.n	80027d6 <edit_menu_if_button_pressed+0x42>
          select_horiz_cursor_to_edit(pending_flag, p_main_screen_data);
 80027ca:	7bbb      	ldrb	r3, [r7, #14]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fe82 	bl	80024d8 <select_horiz_cursor_to_edit>
          break;
 80027d4:	e00e      	b.n	80027f4 <edit_menu_if_button_pressed+0x60>
          select_vert_cursor_to_edit(pending_flag);
 80027d6:	7bbb      	ldrb	r3, [r7, #14]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff0f 	bl	80025fc <select_vert_cursor_to_edit>
          break;
 80027de:	e009      	b.n	80027f4 <edit_menu_if_button_pressed+0x60>
          (ret_action = action_if_enter_pressed(pending_flag));
 80027e0:	7bbb      	ldrb	r3, [r7, #14]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff4c 	bl	8002680 <action_if_enter_pressed>
 80027e8:	4603      	mov	r3, r0
 80027ea:	73fb      	strb	r3, [r7, #15]
          break;
 80027ec:	e002      	b.n	80027f4 <edit_menu_if_button_pressed+0x60>
        }
    }
 80027ee:	bf00      	nop
 80027f0:	e000      	b.n	80027f4 <edit_menu_if_button_pressed+0x60>
          break;
 80027f2:	bf00      	nop

  return ret_action;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <save_data_to_tile>:

static void save_data_to_tile(hmi_main_screen_t *p_main_screen_data)
{
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint8_t save_tile_number = p_main_screen_data->active_main_tile;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	73fb      	strb	r3, [r7, #15]
  uint8_t save_device = edit_menu_cursors.horiz_dev;
 800280e:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <save_data_to_tile+0xd4>)
 8002810:	789b      	ldrb	r3, [r3, #2]
 8002812:	73bb      	strb	r3, [r7, #14]
  uint8_t save_size = edit_menu_cursors.horiz_size;
 8002814:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <save_data_to_tile+0xd4>)
 8002816:	78db      	ldrb	r3, [r3, #3]
 8002818:	737b      	strb	r3, [r7, #13]
  uint8_t save_function = edit_menu_cursors.horiz_fun;
 800281a:	4b2e      	ldr	r3, [pc, #184]	; (80028d4 <save_data_to_tile+0xd4>)
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	733b      	strb	r3, [r7, #12]

  /* Copy all the significant data*/
  p_main_screen_data->tiles[save_tile_number].data.tile_number =
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	330c      	adds	r3, #12
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	701a      	strb	r2, [r3, #0]
      save_tile_number;
  p_main_screen_data->tiles[save_tile_number].data.device_type =
      device_switch[save_device].frame_letter;
 8002834:	7bbb      	ldrb	r3, [r7, #14]
  p_main_screen_data->tiles[save_tile_number].data.device_type =
 8002836:	7bfa      	ldrb	r2, [r7, #15]
      device_switch[save_device].frame_letter;
 8002838:	4927      	ldr	r1, [pc, #156]	; (80028d8 <save_data_to_tile+0xd8>)
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	440b      	add	r3, r1
 800283e:	7918      	ldrb	r0, [r3, #4]
  p_main_screen_data->tiles[save_tile_number].data.device_type =
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	330e      	adds	r3, #14
 800284e:	4602      	mov	r2, r0
 8002850:	701a      	strb	r2, [r3, #0]
  p_main_screen_data->tiles[save_tile_number].data.size_mark =
      size_switch[save_size].frame_letter;
 8002852:	7b7b      	ldrb	r3, [r7, #13]
  p_main_screen_data->tiles[save_tile_number].data.size_mark =
 8002854:	7bfa      	ldrb	r2, [r7, #15]
      size_switch[save_size].frame_letter;
 8002856:	4921      	ldr	r1, [pc, #132]	; (80028dc <save_data_to_tile+0xdc>)
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	440b      	add	r3, r1
 800285c:	7918      	ldrb	r0, [r3, #4]
  p_main_screen_data->tiles[save_tile_number].data.size_mark =
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	330f      	adds	r3, #15
 800286c:	4602      	mov	r2, r0
 800286e:	701a      	strb	r2, [r3, #0]
  p_main_screen_data->tiles[save_tile_number].data.function =
      fun_switch[save_function].frame_letter;
 8002870:	7b3b      	ldrb	r3, [r7, #12]
  p_main_screen_data->tiles[save_tile_number].data.function =
 8002872:	7bfa      	ldrb	r2, [r7, #15]
      fun_switch[save_function].frame_letter;
 8002874:	491a      	ldr	r1, [pc, #104]	; (80028e0 <save_data_to_tile+0xe0>)
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	440b      	add	r3, r1
 800287a:	7918      	ldrb	r0, [r3, #4]
  p_main_screen_data->tiles[save_tile_number].data.function =
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	330d      	adds	r3, #13
 800288a:	4602      	mov	r2, r0
 800288c:	701a      	strb	r2, [r3, #0]
  memcpy(p_main_screen_data->tiles[save_tile_number].data.address,
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	3308      	adds	r3, #8
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	f103 0208 	add.w	r2, r3, #8
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <save_data_to_tile+0xd4>)
 80028a4:	3307      	adds	r3, #7
 80028a6:	6819      	ldr	r1, [r3, #0]
 80028a8:	6011      	str	r1, [r2, #0]
 80028aa:	889b      	ldrh	r3, [r3, #4]
 80028ac:	8093      	strh	r3, [r2, #4]
         &(edit_menu_cursors.address), 6);

  p_main_screen_data->tiles[save_tile_number].callback =
 80028ae:	7bfc      	ldrb	r4, [r7, #15]
      get_callback_to_tile(save_function);
 80028b0:	7b3b      	ldrb	r3, [r7, #12]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff20 	bl	80026f8 <get_callback_to_tile>
 80028b8:	4601      	mov	r1, r0
  p_main_screen_data->tiles[save_tile_number].callback =
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	4623      	mov	r3, r4
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	1b1b      	subs	r3, r3, r4
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	3318      	adds	r3, #24
 80028c8:	6019      	str	r1, [r3, #0]

  return;
 80028ca:	bf00      	nop
}
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd90      	pop	{r4, r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200001cc 	.word	0x200001cc
 80028d8:	08005ef8 	.word	0x08005ef8
 80028dc:	08005f58 	.word	0x08005f58
 80028e0:	08005ee0 	.word	0x08005ee0

080028e4 <xgb_read_single_device>:
static uint8_t data_marking_to_size(xgb_data_size_marking_t data_size);

xgb_comm_err_t xgb_read_single_device(xgb_device_type_t type,
                                      xgb_data_size_marking_t size_mark,
                                      const char *address)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	603a      	str	r2, [r7, #0]
 80028ee:	71fb      	strb	r3, [r7, #7]
 80028f0:	460b      	mov	r3, r1
 80028f2:	71bb      	strb	r3, [r7, #6]
  cmd_frame_data frame = {0};
 80028f4:	f107 0308 	add.w	r3, r7, #8
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
  xgb_comm_err_t comm_status = XGB_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	75fb      	strb	r3, [r7, #23]

  frame.ind_read.data_size = size_mark;
 8002904:	79bb      	ldrb	r3, [r7, #6]
 8002906:	72bb      	strb	r3, [r7, #10]
  frame.ind_read.device_type = type;
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	72fb      	strb	r3, [r7, #11]
  frame.ind_read.no_of_blocks = 1;
 800290c:	2301      	movs	r3, #1
 800290e:	727b      	strb	r3, [r7, #9]
  frame.ind_read.p_device_address = address;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	60fb      	str	r3, [r7, #12]
  frame.ind_read.station_number = STATION_NUMBER;
 8002914:	2301      	movs	r3, #1
 8002916:	723b      	strb	r3, [r7, #8]

  comm_status = send_specific_cmd(&frame, INDIVI_READ);
 8002918:	f107 0308 	add.w	r3, r7, #8
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fb42 	bl	8002fa8 <send_specific_cmd>
 8002924:	4603      	mov	r3, r0
 8002926:	75fb      	strb	r3, [r7, #23]

  return comm_status;
 8002928:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <send_frame>:

static xgb_comm_err_t send_frame(const uint8_t *p_frame, uint32_t lenght)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  xgb_comm_err_t comm_status = XGB_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]

  if ((HAL_UART_Transmit(&huart1, (uint8_t *)p_frame, lenght, 1000) != HAL_OK))
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b29a      	uxth	r2, r3
 8002946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4806      	ldr	r0, [pc, #24]	; (8002968 <send_frame+0x34>)
 800294e:	f001 fe74 	bl	800463a <HAL_UART_Transmit>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <send_frame+0x28>
    {
      comm_status = XGB_ERR_TRANSMIT_TIMEOUT;
 8002958:	23ff      	movs	r3, #255	; 0xff
 800295a:	73fb      	strb	r3, [r7, #15]
    }

  return comm_status;
 800295c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	200002cc 	.word	0x200002cc

0800296c <prep_frame>:

/*
 * Delete all the empty spaces between parts of frame and add NULL at the end
 */
static xgb_comm_err_t prep_frame(const u_frame *raw_frame, u_frame *ready_frame)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint8_t j = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
  xgb_comm_err_t comm_status = XGB_ERR_EOT_MISSING;
 800297a:	23fe      	movs	r3, #254	; 0xfe
 800297c:	73bb      	strb	r3, [r7, #14]

  // go trough array and if cell is not empty
  // rewrite it to ready frame
  for (uint16_t i = 0; i < MAX_FRAME_SIZE; i++)
 800297e:	2300      	movs	r3, #0
 8002980:	81bb      	strh	r3, [r7, #12]
 8002982:	e01c      	b.n	80029be <prep_frame+0x52>
    {
      if (0 != raw_frame->frame_bytes[i])
 8002984:	89bb      	ldrh	r3, [r7, #12]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	5cd3      	ldrb	r3, [r2, r3]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d014      	beq.n	80029b8 <prep_frame+0x4c>
        {
          ready_frame->frame_bytes[j] = raw_frame->frame_bytes[i];
 800298e:	89ba      	ldrh	r2, [r7, #12]
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	5c89      	ldrb	r1, [r1, r2]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	54d1      	strb	r1, [r2, r3]

          if (XGB_CC_EOT == raw_frame->frame_bytes[i]) // if its EOT
 800299a:	89bb      	ldrh	r3, [r7, #12]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d106      	bne.n	80029b2 <prep_frame+0x46>
            {
              // finish the message with NULL to create a string
              ready_frame->frame_bytes[j + 1] = 0; // NULL
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	3301      	adds	r3, #1
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	2100      	movs	r1, #0
 80029ac:	54d1      	strb	r1, [r2, r3]
              comm_status = XGB_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73bb      	strb	r3, [r7, #14]
            }

          j++;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	3301      	adds	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
  for (uint16_t i = 0; i < MAX_FRAME_SIZE; i++)
 80029b8:	89bb      	ldrh	r3, [r7, #12]
 80029ba:	3301      	adds	r3, #1
 80029bc:	81bb      	strh	r3, [r7, #12]
 80029be:	89bb      	ldrh	r3, [r7, #12]
 80029c0:	2bff      	cmp	r3, #255	; 0xff
 80029c2:	d9df      	bls.n	8002984 <prep_frame+0x18>
        }
    }

  return comm_status;
 80029c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <prep_indivi_read_frame>:

static xgb_comm_err_t prep_indivi_read_frame(u_frame *destination,
                                             const cmd_frame_data *params)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b0c4      	sub	sp, #272	; 0x110
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	6018      	str	r0, [r3, #0]
 80029dc:	463b      	mov	r3, r7
 80029de:	6019      	str	r1, [r3, #0]
  u_frame temp_frame = {0};
 80029e0:	f107 030c 	add.w	r3, r7, #12
 80029e4:	4618      	mov	r0, r3
 80029e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ea:	461a      	mov	r2, r3
 80029ec:	2100      	movs	r1, #0
 80029ee:	f002 fc5d 	bl	80052ac <memset>
  xgb_comm_err_t comm_status = XGB_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

  temp_frame.ind_read_frame.header_enq = XGB_CC_ENQ;
 80029f8:	f107 030c 	add.w	r3, r7, #12
 80029fc:	2205      	movs	r2, #5
 80029fe:	701a      	strb	r2, [r3, #0]

  // station number
  temp_frame.ind_read_frame.station_number[0] =
      (params->ind_read.station_number / 16) + '0';
 8002a00:	463b      	mov	r3, r7
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	091b      	lsrs	r3, r3, #4
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	3330      	adds	r3, #48	; 0x30
 8002a0c:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.station_number[0] =
 8002a0e:	f107 030c 	add.w	r3, r7, #12
 8002a12:	705a      	strb	r2, [r3, #1]
  temp_frame.ind_read_frame.station_number[1] =
      (params->ind_read.station_number % 16) + '0';
 8002a14:	463b      	mov	r3, r7
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	3330      	adds	r3, #48	; 0x30
 8002a22:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.station_number[1] =
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	709a      	strb	r2, [r3, #2]

  // command
  temp_frame.ind_read_frame.command = 'R';
 8002a2a:	f107 030c 	add.w	r3, r7, #12
 8002a2e:	2252      	movs	r2, #82	; 0x52
 8002a30:	70da      	strb	r2, [r3, #3]

  // command type
  temp_frame.ind_read_frame.command_type[0] = 'S';
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	2253      	movs	r2, #83	; 0x53
 8002a38:	711a      	strb	r2, [r3, #4]
  temp_frame.ind_read_frame.command_type[1] = 'S';
 8002a3a:	f107 030c 	add.w	r3, r7, #12
 8002a3e:	2253      	movs	r2, #83	; 0x53
 8002a40:	715a      	strb	r2, [r3, #5]

  // no blocks
  temp_frame.ind_read_frame.no_blocks[0] =
      (params->ind_read.no_of_blocks / 16) + '0';
 8002a42:	463b      	mov	r3, r7
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	785b      	ldrb	r3, [r3, #1]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	3330      	adds	r3, #48	; 0x30
 8002a4e:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.no_blocks[0] =
 8002a50:	f107 030c 	add.w	r3, r7, #12
 8002a54:	719a      	strb	r2, [r3, #6]
  temp_frame.ind_read_frame.no_blocks[1] =
      (params->ind_read.no_of_blocks % 16) + '0';
 8002a56:	463b      	mov	r3, r7
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	785b      	ldrb	r3, [r3, #1]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	3330      	adds	r3, #48	; 0x30
 8002a64:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.no_blocks[1] =
 8002a66:	f107 030c 	add.w	r3, r7, #12
 8002a6a:	71da      	strb	r2, [r3, #7]

  // device lenght %MW <- this is 3 chars and then we add lenght of address
  // %MW100 = 3 + strlen("100") = 6
  temp_frame.ind_read_frame.device_lenght[0] =
      ((3 + strlen(params->ind_read.p_device_address)) / 16) + '0';
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fb6a 	bl	800014c <strlen>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	3303      	adds	r3, #3
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	3330      	adds	r3, #48	; 0x30
 8002a82:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.device_lenght[0] =
 8002a84:	f107 030c 	add.w	r3, r7, #12
 8002a88:	721a      	strb	r2, [r3, #8]
  temp_frame.ind_read_frame.device_lenght[1] =
      ((3 + strlen(params->ind_read.p_device_address)) % 16) + '0';
 8002a8a:	463b      	mov	r3, r7
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fd fb5b 	bl	800014c <strlen>
 8002a96:	4603      	mov	r3, r0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	3303      	adds	r3, #3
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	3330      	adds	r3, #48	; 0x30
 8002aa6:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.device_lenght[1] =
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	725a      	strb	r2, [r3, #9]

  // prepare device name
  temp_frame.ind_read_frame.device_name[0] = '%';
 8002aae:	f107 030c 	add.w	r3, r7, #12
 8002ab2:	2225      	movs	r2, #37	; 0x25
 8002ab4:	729a      	strb	r2, [r3, #10]
  temp_frame.ind_read_frame.device_name[1] =
      params->ind_read.device_type; // device memory group (P,M,L etc.)
 8002ab6:	463b      	mov	r3, r7
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	78da      	ldrb	r2, [r3, #3]
  temp_frame.ind_read_frame.device_name[1] =
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	72da      	strb	r2, [r3, #11]
  temp_frame.ind_read_frame.device_name[2] = params->ind_read.data_size;
 8002ac2:	463b      	mov	r3, r7
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	789a      	ldrb	r2, [r3, #2]
 8002ac8:	f107 030c 	add.w	r3, r7, #12
 8002acc:	731a      	strb	r2, [r3, #12]
  strcpy((char *restrict)(&temp_frame.ind_read_frame.device_name[3]),
         (const char *)params->ind_read.p_device_address);
 8002ace:	463b      	mov	r3, r7
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
  strcpy((char *restrict)(&temp_frame.ind_read_frame.device_name[3]),
 8002ad4:	f107 030c 	add.w	r3, r7, #12
 8002ad8:	330d      	adds	r3, #13
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f002 fc0d 	bl	80052fc <strcpy>

  temp_frame.ind_read_frame.tail_eot = XGB_CC_EOT;
 8002ae2:	f107 030c 	add.w	r3, r7, #12
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	769a      	strb	r2, [r3, #26]

  // prepare message
  comm_status = prep_frame(&temp_frame, destination);
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	f107 020c 	add.w	r2, r7, #12
 8002af0:	6819      	ldr	r1, [r3, #0]
 8002af2:	4610      	mov	r0, r2
 8002af4:	f7ff ff3a 	bl	800296c <prep_frame>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  return comm_status;
 8002afe:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <prep_indivi_write_frame>:

static xgb_comm_err_t prep_indivi_write_frame(u_frame *destination,
                                              const cmd_frame_data *params)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b0c4      	sub	sp, #272	; 0x110
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	6018      	str	r0, [r3, #0]
 8002b16:	463b      	mov	r3, r7
 8002b18:	6019      	str	r1, [r3, #0]
  // prepare message - fill union with 0s
  u_frame temp_frame = {0};
 8002b1a:	f107 030c 	add.w	r3, r7, #12
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b24:	461a      	mov	r2, r3
 8002b26:	2100      	movs	r1, #0
 8002b28:	f002 fbc0 	bl	80052ac <memset>
  xgb_comm_err_t comm_status = XGB_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  ;

  temp_frame.ind_write_frame.header_enq = XGB_CC_ENQ;
 8002b32:	f107 030c 	add.w	r3, r7, #12
 8002b36:	2205      	movs	r2, #5
 8002b38:	701a      	strb	r2, [r3, #0]

  // station number
  temp_frame.ind_write_frame.station_number[0] =
      (params->ind_write.station_number / 16) + '0';
 8002b3a:	463b      	mov	r3, r7
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	3330      	adds	r3, #48	; 0x30
 8002b46:	b2da      	uxtb	r2, r3
  temp_frame.ind_write_frame.station_number[0] =
 8002b48:	f107 030c 	add.w	r3, r7, #12
 8002b4c:	705a      	strb	r2, [r3, #1]
  temp_frame.ind_write_frame.station_number[1] =
      (params->ind_write.station_number % 16) + '0';
 8002b4e:	463b      	mov	r3, r7
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	3330      	adds	r3, #48	; 0x30
 8002b5c:	b2da      	uxtb	r2, r3
  temp_frame.ind_write_frame.station_number[1] =
 8002b5e:	f107 030c 	add.w	r3, r7, #12
 8002b62:	709a      	strb	r2, [r3, #2]

  // command
  temp_frame.ind_write_frame.command = 'W';
 8002b64:	f107 030c 	add.w	r3, r7, #12
 8002b68:	2257      	movs	r2, #87	; 0x57
 8002b6a:	70da      	strb	r2, [r3, #3]

  // command type
  temp_frame.ind_write_frame.command_type[0] = 'S';
 8002b6c:	f107 030c 	add.w	r3, r7, #12
 8002b70:	2253      	movs	r2, #83	; 0x53
 8002b72:	711a      	strb	r2, [r3, #4]
  temp_frame.ind_write_frame.command_type[1] = 'S';
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	2253      	movs	r2, #83	; 0x53
 8002b7a:	715a      	strb	r2, [r3, #5]

  // no blocks
  temp_frame.ind_write_frame.no_blocks[0] =
      (params->ind_write.no_of_blocks / 16) + '0';
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	785b      	ldrb	r3, [r3, #1]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	3330      	adds	r3, #48	; 0x30
 8002b88:	b2da      	uxtb	r2, r3
  temp_frame.ind_write_frame.no_blocks[0] =
 8002b8a:	f107 030c 	add.w	r3, r7, #12
 8002b8e:	719a      	strb	r2, [r3, #6]
  temp_frame.ind_write_frame.no_blocks[1] =
      (params->ind_write.no_of_blocks % 16) + '0';
 8002b90:	463b      	mov	r3, r7
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	785b      	ldrb	r3, [r3, #1]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	3330      	adds	r3, #48	; 0x30
 8002b9e:	b2da      	uxtb	r2, r3
  temp_frame.ind_write_frame.no_blocks[1] =
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	71da      	strb	r2, [r3, #7]

  // device lenght %MW <- this is 3 chars and then we add lenght of address
  // %MW100 = 3 + strlen("100") = 6
  temp_frame.ind_write_frame.device_lenght[0] =
      ((3 + strlen(params->ind_write.p_device_address)) / 16) + '0';
 8002ba6:	463b      	mov	r3, r7
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fd facd 	bl	800014c <strlen>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	3303      	adds	r3, #3
 8002bb6:	091b      	lsrs	r3, r3, #4
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	3330      	adds	r3, #48	; 0x30
 8002bbc:	b2da      	uxtb	r2, r3
  temp_frame.ind_write_frame.device_lenght[0] =
 8002bbe:	f107 030c 	add.w	r3, r7, #12
 8002bc2:	721a      	strb	r2, [r3, #8]
  temp_frame.ind_write_frame.device_lenght[1] =
      ((3 + strlen(params->ind_write.p_device_address)) % 16) + '0';
 8002bc4:	463b      	mov	r3, r7
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fabe 	bl	800014c <strlen>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	3303      	adds	r3, #3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	3330      	adds	r3, #48	; 0x30
 8002be0:	b2da      	uxtb	r2, r3
  temp_frame.ind_write_frame.device_lenght[1] =
 8002be2:	f107 030c 	add.w	r3, r7, #12
 8002be6:	725a      	strb	r2, [r3, #9]

  // prepare device name
  temp_frame.ind_write_frame.device_name[0] = '%';
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	2225      	movs	r2, #37	; 0x25
 8002bee:	729a      	strb	r2, [r3, #10]
  temp_frame.ind_write_frame.device_name[1] =
      params->ind_write.device_type; // device memory group (P,M,L etc.)
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	78da      	ldrb	r2, [r3, #3]
  temp_frame.ind_write_frame.device_name[1] =
 8002bf6:	f107 030c 	add.w	r3, r7, #12
 8002bfa:	72da      	strb	r2, [r3, #11]
  temp_frame.ind_write_frame.device_name[2] = params->ind_write.data_size;
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	789a      	ldrb	r2, [r3, #2]
 8002c02:	f107 030c 	add.w	r3, r7, #12
 8002c06:	731a      	strb	r2, [r3, #12]
  strcpy((char *restrict)(&temp_frame.ind_read_frame.device_name[3]),
         (const char *)params->ind_write.p_device_address);
 8002c08:	463b      	mov	r3, r7
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
  strcpy((char *restrict)(&temp_frame.ind_read_frame.device_name[3]),
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	330d      	adds	r3, #13
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f002 fb70 	bl	80052fc <strcpy>

  // prepare frame data
  uint8_t no_bytes_to_copy =
      params->ind_write.no_of_blocks *
      (data_marking_to_size(params->ind_write.data_size) * 2);
 8002c1c:	463b      	mov	r3, r7
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	789b      	ldrb	r3, [r3, #2]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f9f8 	bl	8003018 <data_marking_to_size>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	461a      	mov	r2, r3
      params->ind_write.no_of_blocks *
 8002c2c:	463b      	mov	r3, r7
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	785b      	ldrb	r3, [r3, #1]
  uint8_t no_bytes_to_copy =
 8002c32:	fb03 f302 	mul.w	r3, r3, r2
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
  memcpy(temp_frame.ind_write_frame.data, params->ind_write.p_data_buffer,
 8002c3e:	463b      	mov	r3, r7
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6899      	ldr	r1, [r3, #8]
 8002c44:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8002c48:	f107 030c 	add.w	r3, r7, #12
 8002c4c:	331a      	adds	r3, #26
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f002 fb1e 	bl	8005290 <memcpy>
         no_bytes_to_copy);

  for (uint8_t i = 0; i < no_bytes_to_copy; i++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002c5a:	e013      	b.n	8002c84 <prep_indivi_write_frame+0x178>
    {
      temp_frame.ind_write_frame.data[i] += '0';
 8002c5c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002c60:	f107 020c 	add.w	r2, r7, #12
 8002c64:	4413      	add	r3, r2
 8002c66:	7e9a      	ldrb	r2, [r3, #26]
 8002c68:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002c6c:	3230      	adds	r2, #48	; 0x30
 8002c6e:	b2d1      	uxtb	r1, r2
 8002c70:	f107 020c 	add.w	r2, r7, #12
 8002c74:	4413      	add	r3, r2
 8002c76:	460a      	mov	r2, r1
 8002c78:	769a      	strb	r2, [r3, #26]
  for (uint8_t i = 0; i < no_bytes_to_copy; i++)
 8002c7a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002c84:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002c88:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d3e5      	bcc.n	8002c5c <prep_indivi_write_frame+0x150>
    }

  temp_frame.ind_write_frame.tail_eot = XGB_CC_EOT; // EOT
 8002c90:	f107 030c 	add.w	r3, r7, #12
 8002c94:	2204      	movs	r2, #4
 8002c96:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

  comm_status = prep_frame(&temp_frame, destination);
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	f107 020c 	add.w	r2, r7, #12
 8002ca0:	6819      	ldr	r1, [r3, #0]
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f7ff fe62 	bl	800296c <prep_frame>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  return comm_status;
 8002cae:	f997 310e 	ldrsb.w	r3, [r7, #270]	; 0x10e
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <prep_cont_read_frame>:

static xgb_comm_err_t prep_cont_read_frame(u_frame *destination,
                                           const cmd_frame_data *params)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b0c4      	sub	sp, #272	; 0x110
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	6018      	str	r0, [r3, #0]
 8002cc6:	463b      	mov	r3, r7
 8002cc8:	6019      	str	r1, [r3, #0]
  u_frame temp_frame = {0};
 8002cca:	f107 030c 	add.w	r3, r7, #12
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	f002 fae8 	bl	80052ac <memset>
  xgb_comm_err_t comm_status = XGB_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

  temp_frame.cont_read_frame.header_enq = XGB_CC_ENQ; // ENQ
 8002ce2:	f107 030c 	add.w	r3, r7, #12
 8002ce6:	2205      	movs	r2, #5
 8002ce8:	701a      	strb	r2, [r3, #0]

  temp_frame.cont_read_frame.station_number[0] =
      (params->cont_read.station_number / 16) + '0';
 8002cea:	463b      	mov	r3, r7
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	3330      	adds	r3, #48	; 0x30
 8002cf6:	b2da      	uxtb	r2, r3
  temp_frame.cont_read_frame.station_number[0] =
 8002cf8:	f107 030c 	add.w	r3, r7, #12
 8002cfc:	705a      	strb	r2, [r3, #1]
  temp_frame.cont_read_frame.station_number[1] =
      (params->cont_read.station_number % 16) + '0';
 8002cfe:	463b      	mov	r3, r7
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	3330      	adds	r3, #48	; 0x30
 8002d0c:	b2da      	uxtb	r2, r3
  temp_frame.cont_read_frame.station_number[1] =
 8002d0e:	f107 030c 	add.w	r3, r7, #12
 8002d12:	709a      	strb	r2, [r3, #2]

  temp_frame.cont_read_frame.command = 'R';
 8002d14:	f107 030c 	add.w	r3, r7, #12
 8002d18:	2252      	movs	r2, #82	; 0x52
 8002d1a:	70da      	strb	r2, [r3, #3]

  temp_frame.cont_read_frame.command_type[0] = 'S';
 8002d1c:	f107 030c 	add.w	r3, r7, #12
 8002d20:	2253      	movs	r2, #83	; 0x53
 8002d22:	711a      	strb	r2, [r3, #4]
  temp_frame.cont_read_frame.command_type[1] = 'B';
 8002d24:	f107 030c 	add.w	r3, r7, #12
 8002d28:	2242      	movs	r2, #66	; 0x42
 8002d2a:	715a      	strb	r2, [r3, #5]

  // device lenght %MW <- this is 3 chars and then we add lenght of address
  // %MW100 = 3 + strlen("100") = 6
  temp_frame.cont_read_frame.device_lenght[0] =
      ((3 + strlen(params->cont_read.p_device_address)) / 16) + '0';
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fa0a 	bl	800014c <strlen>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	3303      	adds	r3, #3
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	3330      	adds	r3, #48	; 0x30
 8002d42:	b2da      	uxtb	r2, r3
  temp_frame.cont_read_frame.device_lenght[0] =
 8002d44:	f107 030c 	add.w	r3, r7, #12
 8002d48:	719a      	strb	r2, [r3, #6]
  temp_frame.cont_read_frame.device_lenght[1] =
      ((3 + strlen(params->cont_read.p_device_address)) % 16) + '0';
 8002d4a:	463b      	mov	r3, r7
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd f9fb 	bl	800014c <strlen>
 8002d56:	4603      	mov	r3, r0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	3303      	adds	r3, #3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	3330      	adds	r3, #48	; 0x30
 8002d66:	b2da      	uxtb	r2, r3
  temp_frame.cont_read_frame.device_lenght[1] =
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	71da      	strb	r2, [r3, #7]

  // prepare device name
  temp_frame.cont_read_frame.device_name[0] = '%';
 8002d6e:	f107 030c 	add.w	r3, r7, #12
 8002d72:	2225      	movs	r2, #37	; 0x25
 8002d74:	721a      	strb	r2, [r3, #8]
  temp_frame.cont_read_frame.device_name[1] =
      params->cont_read.device_type; // device memory group (P,M,L etc.)
 8002d76:	463b      	mov	r3, r7
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	789a      	ldrb	r2, [r3, #2]
  temp_frame.cont_read_frame.device_name[1] =
 8002d7c:	f107 030c 	add.w	r3, r7, #12
 8002d80:	725a      	strb	r2, [r3, #9]
  temp_frame.cont_read_frame.device_name[2] = params->cont_read.data_size;
 8002d82:	463b      	mov	r3, r7
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	785a      	ldrb	r2, [r3, #1]
 8002d88:	f107 030c 	add.w	r3, r7, #12
 8002d8c:	729a      	strb	r2, [r3, #10]
  strcpy((char *restrict)(&temp_frame.cont_read_frame.device_name[3]),
         (const char *)params->cont_read.p_device_address);
 8002d8e:	463b      	mov	r3, r7
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
  strcpy((char *restrict)(&temp_frame.cont_read_frame.device_name[3]),
 8002d94:	f107 030c 	add.w	r3, r7, #12
 8002d98:	330b      	adds	r3, #11
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f002 faad 	bl	80052fc <strcpy>

  // no of data
  temp_frame.cont_read_frame.no_data[0] =
      (params->cont_read.no_of_data / 16) + '0';
 8002da2:	463b      	mov	r3, r7
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	78db      	ldrb	r3, [r3, #3]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	3330      	adds	r3, #48	; 0x30
 8002dae:	b2da      	uxtb	r2, r3
  temp_frame.cont_read_frame.no_data[0] =
 8002db0:	f107 030c 	add.w	r3, r7, #12
 8002db4:	761a      	strb	r2, [r3, #24]
  temp_frame.cont_read_frame.no_data[1] =
      (params->cont_read.no_of_data % 16) + '0';
 8002db6:	463b      	mov	r3, r7
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	78db      	ldrb	r3, [r3, #3]
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	3330      	adds	r3, #48	; 0x30
 8002dc4:	b2da      	uxtb	r2, r3
  temp_frame.cont_read_frame.no_data[1] =
 8002dc6:	f107 030c 	add.w	r3, r7, #12
 8002dca:	765a      	strb	r2, [r3, #25]

  temp_frame.cont_read_frame.tail_eot = XGB_CC_EOT; // EOT
 8002dcc:	f107 030c 	add.w	r3, r7, #12
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	769a      	strb	r2, [r3, #26]

  // trimm message
  comm_status = prep_frame(&temp_frame, destination);
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	f107 020c 	add.w	r2, r7, #12
 8002dda:	6819      	ldr	r1, [r3, #0]
 8002ddc:	4610      	mov	r0, r2
 8002dde:	f7ff fdc5 	bl	800296c <prep_frame>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  return comm_status;
 8002de8:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <prep_cont_write_frame>:
/*
 * Prepare frame - request of continuous write
 */
static xgb_comm_err_t prep_cont_write_frame(u_frame *destination,
                                            const cmd_frame_data *params)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b0c4      	sub	sp, #272	; 0x110
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	1d3b      	adds	r3, r7, #4
 8002dfe:	6018      	str	r0, [r3, #0]
 8002e00:	463b      	mov	r3, r7
 8002e02:	6019      	str	r1, [r3, #0]
  // prepare message - fill union with 0s
  u_frame temp_frame = {0};
 8002e04:	f107 030c 	add.w	r3, r7, #12
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2100      	movs	r1, #0
 8002e12:	f002 fa4b 	bl	80052ac <memset>
  xgb_comm_err_t comm_status = XGB_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

  // header
  temp_frame.cont_write_frame.header_enq = XGB_CC_ENQ; // ENQ
 8002e1c:	f107 030c 	add.w	r3, r7, #12
 8002e20:	2205      	movs	r2, #5
 8002e22:	701a      	strb	r2, [r3, #0]

  // station number
  temp_frame.cont_write_frame.station_number[0] =
      (params->cont_write.station_number / 16) + '0';
 8002e24:	463b      	mov	r3, r7
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	3330      	adds	r3, #48	; 0x30
 8002e30:	b2da      	uxtb	r2, r3
  temp_frame.cont_write_frame.station_number[0] =
 8002e32:	f107 030c 	add.w	r3, r7, #12
 8002e36:	705a      	strb	r2, [r3, #1]
  temp_frame.cont_write_frame.station_number[1] =
      (params->cont_write.station_number % 16) + '0';
 8002e38:	463b      	mov	r3, r7
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3330      	adds	r3, #48	; 0x30
 8002e46:	b2da      	uxtb	r2, r3
  temp_frame.cont_write_frame.station_number[1] =
 8002e48:	f107 030c 	add.w	r3, r7, #12
 8002e4c:	709a      	strb	r2, [r3, #2]

  // command
  temp_frame.cont_write_frame.command = 'W';
 8002e4e:	f107 030c 	add.w	r3, r7, #12
 8002e52:	2257      	movs	r2, #87	; 0x57
 8002e54:	70da      	strb	r2, [r3, #3]

  // command type
  temp_frame.cont_write_frame.command_type[0] = 'S';
 8002e56:	f107 030c 	add.w	r3, r7, #12
 8002e5a:	2253      	movs	r2, #83	; 0x53
 8002e5c:	711a      	strb	r2, [r3, #4]
  temp_frame.cont_write_frame.command_type[1] = 'B';
 8002e5e:	f107 030c 	add.w	r3, r7, #12
 8002e62:	2242      	movs	r2, #66	; 0x42
 8002e64:	715a      	strb	r2, [r3, #5]

  // device lenght %MW <- this is 3 chars and then we add lenght of address
  // %MW100 = 3 + strlen("100") = 6
  temp_frame.cont_write_frame.device_lenght[0] =
      ((3 + strlen(params->cont_write.p_device_address)) / 16) + '0';
 8002e66:	463b      	mov	r3, r7
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fd f96d 	bl	800014c <strlen>
 8002e72:	4603      	mov	r3, r0
 8002e74:	3303      	adds	r3, #3
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	3330      	adds	r3, #48	; 0x30
 8002e7c:	b2da      	uxtb	r2, r3
  temp_frame.cont_write_frame.device_lenght[0] =
 8002e7e:	f107 030c 	add.w	r3, r7, #12
 8002e82:	719a      	strb	r2, [r3, #6]
  temp_frame.cont_write_frame.device_lenght[1] =
      ((3 + strlen(params->cont_write.p_device_address)) % 16) + '0';
 8002e84:	463b      	mov	r3, r7
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd f95e 	bl	800014c <strlen>
 8002e90:	4603      	mov	r3, r0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	3303      	adds	r3, #3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	3330      	adds	r3, #48	; 0x30
 8002ea0:	b2da      	uxtb	r2, r3
  temp_frame.cont_write_frame.device_lenght[1] =
 8002ea2:	f107 030c 	add.w	r3, r7, #12
 8002ea6:	71da      	strb	r2, [r3, #7]

  // prepare device name
  temp_frame.cont_write_frame.device_name[0] = '%';
 8002ea8:	f107 030c 	add.w	r3, r7, #12
 8002eac:	2225      	movs	r2, #37	; 0x25
 8002eae:	721a      	strb	r2, [r3, #8]
  temp_frame.cont_write_frame.device_name[1] =
      params->cont_write.device_type; // device memory group (P,M,L etc.)
 8002eb0:	463b      	mov	r3, r7
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	789a      	ldrb	r2, [r3, #2]
  temp_frame.cont_write_frame.device_name[1] =
 8002eb6:	f107 030c 	add.w	r3, r7, #12
 8002eba:	725a      	strb	r2, [r3, #9]
  temp_frame.cont_write_frame.device_name[2] = params->cont_write.data_size;
 8002ebc:	463b      	mov	r3, r7
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	785a      	ldrb	r2, [r3, #1]
 8002ec2:	f107 030c 	add.w	r3, r7, #12
 8002ec6:	729a      	strb	r2, [r3, #10]
  strcpy((char *restrict)(&temp_frame.cont_write_frame.device_name[3]),
         (const char *)params->cont_write.p_device_address);
 8002ec8:	463b      	mov	r3, r7
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
  strcpy((char *restrict)(&temp_frame.cont_write_frame.device_name[3]),
 8002ece:	f107 030c 	add.w	r3, r7, #12
 8002ed2:	330b      	adds	r3, #11
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f002 fa10 	bl	80052fc <strcpy>

  // no of data
  temp_frame.cont_write_frame.no_data[0] =
      (params->cont_write.no_of_data / 16) + '0';
 8002edc:	463b      	mov	r3, r7
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	78db      	ldrb	r3, [r3, #3]
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	3330      	adds	r3, #48	; 0x30
 8002ee8:	b2da      	uxtb	r2, r3
  temp_frame.cont_write_frame.no_data[0] =
 8002eea:	f107 030c 	add.w	r3, r7, #12
 8002eee:	761a      	strb	r2, [r3, #24]
  temp_frame.cont_write_frame.no_data[1] =
      (params->cont_write.no_of_data % 16) + '0';
 8002ef0:	463b      	mov	r3, r7
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	78db      	ldrb	r3, [r3, #3]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	3330      	adds	r3, #48	; 0x30
 8002efe:	b2da      	uxtb	r2, r3
  temp_frame.cont_write_frame.no_data[1] =
 8002f00:	f107 030c 	add.w	r3, r7, #12
 8002f04:	765a      	strb	r2, [r3, #25]

  // prepare frame data
  uint8_t no_bytes_to_copy =
      params->cont_write.no_of_data *
      (data_marking_to_size(params->cont_write.data_size) * 2);
 8002f06:	463b      	mov	r3, r7
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	785b      	ldrb	r3, [r3, #1]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 f883 	bl	8003018 <data_marking_to_size>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
      params->cont_write.no_of_data *
 8002f16:	463b      	mov	r3, r7
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	78db      	ldrb	r3, [r3, #3]
  uint8_t no_bytes_to_copy =
 8002f1c:	fb03 f302 	mul.w	r3, r3, r2
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d

  memcpy(temp_frame.cont_write_frame.data, params->cont_write.p_data_buffer,
 8002f28:	463b      	mov	r3, r7
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6899      	ldr	r1, [r3, #8]
 8002f2e:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8002f32:	f107 030c 	add.w	r3, r7, #12
 8002f36:	331a      	adds	r3, #26
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f002 f9a9 	bl	8005290 <memcpy>
         no_bytes_to_copy);

  for (uint8_t i = 0; i < no_bytes_to_copy; i++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002f44:	e013      	b.n	8002f6e <prep_cont_write_frame+0x178>
    {
      temp_frame.cont_write_frame.data[i] += '0';
 8002f46:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002f4a:	f107 020c 	add.w	r2, r7, #12
 8002f4e:	4413      	add	r3, r2
 8002f50:	7e9a      	ldrb	r2, [r3, #26]
 8002f52:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002f56:	3230      	adds	r2, #48	; 0x30
 8002f58:	b2d1      	uxtb	r1, r2
 8002f5a:	f107 020c 	add.w	r2, r7, #12
 8002f5e:	4413      	add	r3, r2
 8002f60:	460a      	mov	r2, r1
 8002f62:	769a      	strb	r2, [r3, #26]
  for (uint8_t i = 0; i < no_bytes_to_copy; i++)
 8002f64:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002f6e:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002f72:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d3e5      	bcc.n	8002f46 <prep_cont_write_frame+0x150>
    }

  temp_frame.cont_write_frame.tail_eot = XGB_CC_EOT; // EOT
 8002f7a:	f107 030c 	add.w	r3, r7, #12
 8002f7e:	2204      	movs	r2, #4
 8002f80:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

  // trimm message
  comm_status = prep_frame(&temp_frame, destination);
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	f107 020c 	add.w	r2, r7, #12
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	f7ff fced 	bl	800296c <prep_frame>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  return comm_status;
 8002f98:	f997 310e 	ldrsb.w	r3, [r7, #270]	; 0x10e
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <send_specific_cmd>:

static xgb_comm_err_t send_specific_cmd(const cmd_frame_data *p_frame_data,
                                        prep_frame_ID ID)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b0c4      	sub	sp, #272	; 0x110
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	1d3b      	adds	r3, r7, #4
 8002fb0:	6018      	str	r0, [r3, #0]
 8002fb2:	460a      	mov	r2, r1
 8002fb4:	1cfb      	adds	r3, r7, #3
 8002fb6:	701a      	strb	r2, [r3, #0]
      {INDIVI_READ, prep_indivi_read_frame},
      {CONT_READ, prep_cont_read_frame},
      {INDIVI_WRITE, prep_indivi_write_frame},
      {CONT_WRITE, prep_cont_write_frame}};

  xgb_comm_err_t status = XGB_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  u_frame frame;

  status = prep_fun_mapper[ID].function(&frame, p_frame_data);
 8002fbe:	1cfb      	adds	r3, r7, #3
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	4a14      	ldr	r2, [pc, #80]	; (8003014 <send_specific_cmd+0x6c>)
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	1d3a      	adds	r2, r7, #4
 8002fcc:	f107 0008 	add.w	r0, r7, #8
 8002fd0:	6811      	ldr	r1, [r2, #0]
 8002fd2:	4798      	blx	r3
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

  if (XGB_OK == status)
 8002fda:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d110      	bne.n	8003004 <send_specific_cmd+0x5c>
    {
      uint32_t len = (uint32_t)strlen((char *)frame.frame_bytes);
 8002fe2:	f107 0308 	add.w	r3, r7, #8
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd f8b0 	bl	800014c <strlen>
 8002fec:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
      status = send_frame((uint8_t *)&frame.frame_bytes, len);
 8002ff0:	f107 0308 	add.w	r3, r7, #8
 8002ff4:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fc9b 	bl	8002934 <send_frame>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    }

  return status;
 8003004:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8003008:	4618      	mov	r0, r3
 800300a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	08005f80 	.word	0x08005f80

08003018 <data_marking_to_size>:

static uint8_t data_marking_to_size(xgb_data_size_marking_t data_size)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
  switch (data_size)
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	3b42      	subs	r3, #66	; 0x42
 8003026:	2b16      	cmp	r3, #22
 8003028:	d83a      	bhi.n	80030a0 <data_marking_to_size+0x88>
 800302a:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <data_marking_to_size+0x18>)
 800302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003030:	08003091 	.word	0x08003091
 8003034:	080030a1 	.word	0x080030a1
 8003038:	08003099 	.word	0x08003099
 800303c:	080030a1 	.word	0x080030a1
 8003040:	080030a1 	.word	0x080030a1
 8003044:	080030a1 	.word	0x080030a1
 8003048:	080030a1 	.word	0x080030a1
 800304c:	080030a1 	.word	0x080030a1
 8003050:	080030a1 	.word	0x080030a1
 8003054:	080030a1 	.word	0x080030a1
 8003058:	0800309d 	.word	0x0800309d
 800305c:	080030a1 	.word	0x080030a1
 8003060:	080030a1 	.word	0x080030a1
 8003064:	080030a1 	.word	0x080030a1
 8003068:	080030a1 	.word	0x080030a1
 800306c:	080030a1 	.word	0x080030a1
 8003070:	080030a1 	.word	0x080030a1
 8003074:	080030a1 	.word	0x080030a1
 8003078:	080030a1 	.word	0x080030a1
 800307c:	080030a1 	.word	0x080030a1
 8003080:	080030a1 	.word	0x080030a1
 8003084:	08003095 	.word	0x08003095
 8003088:	0800308d 	.word	0x0800308d
    {
    case (XGB_DATA_SIZE_BIT):
      {
        return 1;
 800308c:	2301      	movs	r3, #1
 800308e:	e008      	b.n	80030a2 <data_marking_to_size+0x8a>
      }
    case (XGB_DATA_SIZE_BYTE):
      {
        return 1;
 8003090:	2301      	movs	r3, #1
 8003092:	e006      	b.n	80030a2 <data_marking_to_size+0x8a>
      }
    case (XGB_DATA_SIZE_WORD):
      {
        return 2;
 8003094:	2302      	movs	r3, #2
 8003096:	e004      	b.n	80030a2 <data_marking_to_size+0x8a>
      }
    case (XGB_DATA_SIZE_DWORD):
      {
        return 4;
 8003098:	2304      	movs	r3, #4
 800309a:	e002      	b.n	80030a2 <data_marking_to_size+0x8a>
      }
    case (XGB_DATA_SIZE_LWORD):
      {
        return 8;
 800309c:	2308      	movs	r3, #8
 800309e:	e000      	b.n	80030a2 <data_marking_to_size+0x8a>
      }
    default:
      {
        return 0;
 80030a0:	2300      	movs	r3, #0
      }
    }
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <HAL_Init+0x28>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <HAL_Init+0x28>)
 80030b6:	f043 0310 	orr.w	r3, r3, #16
 80030ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030bc:	2003      	movs	r0, #3
 80030be:	f000 f947 	bl	8003350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030c2:	200f      	movs	r0, #15
 80030c4:	f000 f808 	bl	80030d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030c8:	f7fd ffc4 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40022000 	.word	0x40022000

080030d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_InitTick+0x54>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <HAL_InitTick+0x58>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	4619      	mov	r1, r3
 80030ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80030f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f95f 	bl	80033ba <HAL_SYSTICK_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e00e      	b.n	8003124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b0f      	cmp	r3, #15
 800310a:	d80a      	bhi.n	8003122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800310c:	2200      	movs	r2, #0
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	f04f 30ff 	mov.w	r0, #4294967295
 8003114:	f000 f927 	bl	8003366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003118:	4a06      	ldr	r2, [pc, #24]	; (8003134 <HAL_InitTick+0x5c>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	e000      	b.n	8003124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20000004 	.word	0x20000004
 8003130:	2000001c 	.word	0x2000001c
 8003134:	20000018 	.word	0x20000018

08003138 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_IncTick+0x1c>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_IncTick+0x20>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4413      	add	r3, r2
 8003148:	4a03      	ldr	r2, [pc, #12]	; (8003158 <HAL_IncTick+0x20>)
 800314a:	6013      	str	r3, [r2, #0]
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	2000001c 	.word	0x2000001c
 8003158:	20000310 	.word	0x20000310

0800315c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return uwTick;
 8003160:	4b02      	ldr	r3, [pc, #8]	; (800316c <HAL_GetTick+0x10>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	20000310 	.word	0x20000310

08003170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003178:	f7ff fff0 	bl	800315c <HAL_GetTick>
 800317c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d005      	beq.n	8003196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <HAL_Delay+0x44>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003196:	bf00      	nop
 8003198:	f7ff ffe0 	bl	800315c <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d8f7      	bhi.n	8003198 <HAL_Delay+0x28>
  {
  }
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	2000001c 	.word	0x2000001c

080031b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d4:	4013      	ands	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ea:	4a04      	ldr	r2, [pc, #16]	; (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	60d3      	str	r3, [r2, #12]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <__NVIC_GetPriorityGrouping+0x18>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	f003 0307 	and.w	r3, r3, #7
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	2b00      	cmp	r3, #0
 800322c:	db0b      	blt.n	8003246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	f003 021f 	and.w	r2, r3, #31
 8003234:	4906      	ldr	r1, [pc, #24]	; (8003250 <__NVIC_EnableIRQ+0x34>)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2001      	movs	r0, #1
 800323e:	fa00 f202 	lsl.w	r2, r0, r2
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	e000e100 	.word	0xe000e100

08003254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	6039      	str	r1, [r7, #0]
 800325e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003264:	2b00      	cmp	r3, #0
 8003266:	db0a      	blt.n	800327e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	b2da      	uxtb	r2, r3
 800326c:	490c      	ldr	r1, [pc, #48]	; (80032a0 <__NVIC_SetPriority+0x4c>)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	0112      	lsls	r2, r2, #4
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	440b      	add	r3, r1
 8003278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800327c:	e00a      	b.n	8003294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4908      	ldr	r1, [pc, #32]	; (80032a4 <__NVIC_SetPriority+0x50>)
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	3b04      	subs	r3, #4
 800328c:	0112      	lsls	r2, r2, #4
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	440b      	add	r3, r1
 8003292:	761a      	strb	r2, [r3, #24]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b089      	sub	sp, #36	; 0x24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f1c3 0307 	rsb	r3, r3, #7
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	bf28      	it	cs
 80032c6:	2304      	movcs	r3, #4
 80032c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3304      	adds	r3, #4
 80032ce:	2b06      	cmp	r3, #6
 80032d0:	d902      	bls.n	80032d8 <NVIC_EncodePriority+0x30>
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3b03      	subs	r3, #3
 80032d6:	e000      	b.n	80032da <NVIC_EncodePriority+0x32>
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032dc:	f04f 32ff 	mov.w	r2, #4294967295
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43da      	mvns	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	401a      	ands	r2, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f0:	f04f 31ff 	mov.w	r1, #4294967295
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	43d9      	mvns	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003300:	4313      	orrs	r3, r2
         );
}
 8003302:	4618      	mov	r0, r3
 8003304:	3724      	adds	r7, #36	; 0x24
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800331c:	d301      	bcc.n	8003322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331e:	2301      	movs	r3, #1
 8003320:	e00f      	b.n	8003342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <SysTick_Config+0x40>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3b01      	subs	r3, #1
 8003328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800332a:	210f      	movs	r1, #15
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	f7ff ff90 	bl	8003254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <SysTick_Config+0x40>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800333a:	4b04      	ldr	r3, [pc, #16]	; (800334c <SysTick_Config+0x40>)
 800333c:	2207      	movs	r2, #7
 800333e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	e000e010 	.word	0xe000e010

08003350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ff2d 	bl	80031b8 <__NVIC_SetPriorityGrouping>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	4603      	mov	r3, r0
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003378:	f7ff ff42 	bl	8003200 <__NVIC_GetPriorityGrouping>
 800337c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	6978      	ldr	r0, [r7, #20]
 8003384:	f7ff ff90 	bl	80032a8 <NVIC_EncodePriority>
 8003388:	4602      	mov	r2, r0
 800338a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff5f 	bl	8003254 <__NVIC_SetPriority>
}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff35 	bl	800321c <__NVIC_EnableIRQ>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ffa2 	bl	800330c <SysTick_Config>
 80033c8:	4603      	mov	r3, r0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e043      	b.n	8003472 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	4b22      	ldr	r3, [pc, #136]	; (800347c <HAL_DMA_Init+0xa8>)
 80033f2:	4413      	add	r3, r2
 80033f4:	4a22      	ldr	r2, [pc, #136]	; (8003480 <HAL_DMA_Init+0xac>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	009a      	lsls	r2, r3, #2
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a1f      	ldr	r2, [pc, #124]	; (8003484 <HAL_DMA_Init+0xb0>)
 8003406:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800341e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003422:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800342c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	bffdfff8 	.word	0xbffdfff8
 8003480:	cccccccd 	.word	0xcccccccd
 8003484:	40020000 	.word	0x40020000

08003488 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_DMA_Start_IT+0x20>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e04a      	b.n	800353e <HAL_DMA_Start_IT+0xb6>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d13a      	bne.n	8003530 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0201 	bic.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f9e8 	bl	80038b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 020e 	orr.w	r2, r2, #14
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e00f      	b.n	800351e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0204 	bic.w	r2, r2, #4
 800350c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 020a 	orr.w	r2, r2, #10
 800351c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	e005      	b.n	800353c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003538:	2302      	movs	r3, #2
 800353a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800353c:	7dfb      	ldrb	r3, [r7, #23]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003558:	2b02      	cmp	r3, #2
 800355a:	d008      	beq.n	800356e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2204      	movs	r2, #4
 8003560:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e020      	b.n	80035b0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 020e 	bic.w	r2, r2, #14
 800357c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	2101      	movs	r1, #1
 8003598:	fa01 f202 	lsl.w	r2, r1, r2
 800359c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
	...

080035bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d005      	beq.n	80035de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2204      	movs	r2, #4
 80035d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
 80035dc:	e051      	b.n	8003682 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 020e 	bic.w	r2, r2, #14
 80035ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a22      	ldr	r2, [pc, #136]	; (800368c <HAL_DMA_Abort_IT+0xd0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d029      	beq.n	800365c <HAL_DMA_Abort_IT+0xa0>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a20      	ldr	r2, [pc, #128]	; (8003690 <HAL_DMA_Abort_IT+0xd4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d022      	beq.n	8003658 <HAL_DMA_Abort_IT+0x9c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1f      	ldr	r2, [pc, #124]	; (8003694 <HAL_DMA_Abort_IT+0xd8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d01a      	beq.n	8003652 <HAL_DMA_Abort_IT+0x96>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1d      	ldr	r2, [pc, #116]	; (8003698 <HAL_DMA_Abort_IT+0xdc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d012      	beq.n	800364c <HAL_DMA_Abort_IT+0x90>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1c      	ldr	r2, [pc, #112]	; (800369c <HAL_DMA_Abort_IT+0xe0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00a      	beq.n	8003646 <HAL_DMA_Abort_IT+0x8a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1a      	ldr	r2, [pc, #104]	; (80036a0 <HAL_DMA_Abort_IT+0xe4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d102      	bne.n	8003640 <HAL_DMA_Abort_IT+0x84>
 800363a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800363e:	e00e      	b.n	800365e <HAL_DMA_Abort_IT+0xa2>
 8003640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003644:	e00b      	b.n	800365e <HAL_DMA_Abort_IT+0xa2>
 8003646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800364a:	e008      	b.n	800365e <HAL_DMA_Abort_IT+0xa2>
 800364c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003650:	e005      	b.n	800365e <HAL_DMA_Abort_IT+0xa2>
 8003652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003656:	e002      	b.n	800365e <HAL_DMA_Abort_IT+0xa2>
 8003658:	2310      	movs	r3, #16
 800365a:	e000      	b.n	800365e <HAL_DMA_Abort_IT+0xa2>
 800365c:	2301      	movs	r3, #1
 800365e:	4a11      	ldr	r2, [pc, #68]	; (80036a4 <HAL_DMA_Abort_IT+0xe8>)
 8003660:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	4798      	blx	r3
    } 
  }
  return status;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40020008 	.word	0x40020008
 8003690:	4002001c 	.word	0x4002001c
 8003694:	40020030 	.word	0x40020030
 8003698:	40020044 	.word	0x40020044
 800369c:	40020058 	.word	0x40020058
 80036a0:	4002006c 	.word	0x4002006c
 80036a4:	40020000 	.word	0x40020000

080036a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	2204      	movs	r2, #4
 80036c6:	409a      	lsls	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d04f      	beq.n	8003770 <HAL_DMA_IRQHandler+0xc8>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d04a      	beq.n	8003770 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d107      	bne.n	80036f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0204 	bic.w	r2, r2, #4
 80036f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a66      	ldr	r2, [pc, #408]	; (8003898 <HAL_DMA_IRQHandler+0x1f0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d029      	beq.n	8003756 <HAL_DMA_IRQHandler+0xae>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a65      	ldr	r2, [pc, #404]	; (800389c <HAL_DMA_IRQHandler+0x1f4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d022      	beq.n	8003752 <HAL_DMA_IRQHandler+0xaa>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a63      	ldr	r2, [pc, #396]	; (80038a0 <HAL_DMA_IRQHandler+0x1f8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01a      	beq.n	800374c <HAL_DMA_IRQHandler+0xa4>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a62      	ldr	r2, [pc, #392]	; (80038a4 <HAL_DMA_IRQHandler+0x1fc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d012      	beq.n	8003746 <HAL_DMA_IRQHandler+0x9e>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a60      	ldr	r2, [pc, #384]	; (80038a8 <HAL_DMA_IRQHandler+0x200>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00a      	beq.n	8003740 <HAL_DMA_IRQHandler+0x98>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a5f      	ldr	r2, [pc, #380]	; (80038ac <HAL_DMA_IRQHandler+0x204>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d102      	bne.n	800373a <HAL_DMA_IRQHandler+0x92>
 8003734:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003738:	e00e      	b.n	8003758 <HAL_DMA_IRQHandler+0xb0>
 800373a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800373e:	e00b      	b.n	8003758 <HAL_DMA_IRQHandler+0xb0>
 8003740:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003744:	e008      	b.n	8003758 <HAL_DMA_IRQHandler+0xb0>
 8003746:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800374a:	e005      	b.n	8003758 <HAL_DMA_IRQHandler+0xb0>
 800374c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003750:	e002      	b.n	8003758 <HAL_DMA_IRQHandler+0xb0>
 8003752:	2340      	movs	r3, #64	; 0x40
 8003754:	e000      	b.n	8003758 <HAL_DMA_IRQHandler+0xb0>
 8003756:	2304      	movs	r3, #4
 8003758:	4a55      	ldr	r2, [pc, #340]	; (80038b0 <HAL_DMA_IRQHandler+0x208>)
 800375a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8094 	beq.w	800388e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800376e:	e08e      	b.n	800388e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	2202      	movs	r2, #2
 8003776:	409a      	lsls	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d056      	beq.n	800382e <HAL_DMA_IRQHandler+0x186>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d051      	beq.n	800382e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10b      	bne.n	80037b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 020a 	bic.w	r2, r2, #10
 80037a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a38      	ldr	r2, [pc, #224]	; (8003898 <HAL_DMA_IRQHandler+0x1f0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d029      	beq.n	800380e <HAL_DMA_IRQHandler+0x166>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a37      	ldr	r2, [pc, #220]	; (800389c <HAL_DMA_IRQHandler+0x1f4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d022      	beq.n	800380a <HAL_DMA_IRQHandler+0x162>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a35      	ldr	r2, [pc, #212]	; (80038a0 <HAL_DMA_IRQHandler+0x1f8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d01a      	beq.n	8003804 <HAL_DMA_IRQHandler+0x15c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a34      	ldr	r2, [pc, #208]	; (80038a4 <HAL_DMA_IRQHandler+0x1fc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d012      	beq.n	80037fe <HAL_DMA_IRQHandler+0x156>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a32      	ldr	r2, [pc, #200]	; (80038a8 <HAL_DMA_IRQHandler+0x200>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00a      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x150>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a31      	ldr	r2, [pc, #196]	; (80038ac <HAL_DMA_IRQHandler+0x204>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d102      	bne.n	80037f2 <HAL_DMA_IRQHandler+0x14a>
 80037ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80037f0:	e00e      	b.n	8003810 <HAL_DMA_IRQHandler+0x168>
 80037f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037f6:	e00b      	b.n	8003810 <HAL_DMA_IRQHandler+0x168>
 80037f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037fc:	e008      	b.n	8003810 <HAL_DMA_IRQHandler+0x168>
 80037fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003802:	e005      	b.n	8003810 <HAL_DMA_IRQHandler+0x168>
 8003804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003808:	e002      	b.n	8003810 <HAL_DMA_IRQHandler+0x168>
 800380a:	2320      	movs	r3, #32
 800380c:	e000      	b.n	8003810 <HAL_DMA_IRQHandler+0x168>
 800380e:	2302      	movs	r3, #2
 8003810:	4a27      	ldr	r2, [pc, #156]	; (80038b0 <HAL_DMA_IRQHandler+0x208>)
 8003812:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	2b00      	cmp	r3, #0
 8003822:	d034      	beq.n	800388e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800382c:	e02f      	b.n	800388e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2208      	movs	r2, #8
 8003834:	409a      	lsls	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d028      	beq.n	8003890 <HAL_DMA_IRQHandler+0x1e8>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d023      	beq.n	8003890 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 020e 	bic.w	r2, r2, #14
 8003856:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003860:	2101      	movs	r1, #1
 8003862:	fa01 f202 	lsl.w	r2, r1, r2
 8003866:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	2b00      	cmp	r3, #0
 8003884:	d004      	beq.n	8003890 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4798      	blx	r3
    }
  }
  return;
 800388e:	bf00      	nop
 8003890:	bf00      	nop
}
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40020008 	.word	0x40020008
 800389c:	4002001c 	.word	0x4002001c
 80038a0:	40020030 	.word	0x40020030
 80038a4:	40020044 	.word	0x40020044
 80038a8:	40020058 	.word	0x40020058
 80038ac:	4002006c 	.word	0x4002006c
 80038b0:	40020000 	.word	0x40020000

080038b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	2101      	movs	r1, #1
 80038cc:	fa01 f202 	lsl.w	r2, r1, r2
 80038d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b10      	cmp	r3, #16
 80038e0:	d108      	bne.n	80038f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038f2:	e007      	b.n	8003904 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	60da      	str	r2, [r3, #12]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
	...

08003910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003910:	b480      	push	{r7}
 8003912:	b08b      	sub	sp, #44	; 0x2c
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800391a:	2300      	movs	r3, #0
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800391e:	2300      	movs	r3, #0
 8003920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003922:	e148      	b.n	8003bb6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003924:	2201      	movs	r2, #1
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	429a      	cmp	r2, r3
 800393e:	f040 8137 	bne.w	8003bb0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	4aa3      	ldr	r2, [pc, #652]	; (8003bd4 <HAL_GPIO_Init+0x2c4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d05e      	beq.n	8003a0a <HAL_GPIO_Init+0xfa>
 800394c:	4aa1      	ldr	r2, [pc, #644]	; (8003bd4 <HAL_GPIO_Init+0x2c4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d875      	bhi.n	8003a3e <HAL_GPIO_Init+0x12e>
 8003952:	4aa1      	ldr	r2, [pc, #644]	; (8003bd8 <HAL_GPIO_Init+0x2c8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d058      	beq.n	8003a0a <HAL_GPIO_Init+0xfa>
 8003958:	4a9f      	ldr	r2, [pc, #636]	; (8003bd8 <HAL_GPIO_Init+0x2c8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d86f      	bhi.n	8003a3e <HAL_GPIO_Init+0x12e>
 800395e:	4a9f      	ldr	r2, [pc, #636]	; (8003bdc <HAL_GPIO_Init+0x2cc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d052      	beq.n	8003a0a <HAL_GPIO_Init+0xfa>
 8003964:	4a9d      	ldr	r2, [pc, #628]	; (8003bdc <HAL_GPIO_Init+0x2cc>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d869      	bhi.n	8003a3e <HAL_GPIO_Init+0x12e>
 800396a:	4a9d      	ldr	r2, [pc, #628]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d04c      	beq.n	8003a0a <HAL_GPIO_Init+0xfa>
 8003970:	4a9b      	ldr	r2, [pc, #620]	; (8003be0 <HAL_GPIO_Init+0x2d0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d863      	bhi.n	8003a3e <HAL_GPIO_Init+0x12e>
 8003976:	4a9b      	ldr	r2, [pc, #620]	; (8003be4 <HAL_GPIO_Init+0x2d4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d046      	beq.n	8003a0a <HAL_GPIO_Init+0xfa>
 800397c:	4a99      	ldr	r2, [pc, #612]	; (8003be4 <HAL_GPIO_Init+0x2d4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d85d      	bhi.n	8003a3e <HAL_GPIO_Init+0x12e>
 8003982:	2b12      	cmp	r3, #18
 8003984:	d82a      	bhi.n	80039dc <HAL_GPIO_Init+0xcc>
 8003986:	2b12      	cmp	r3, #18
 8003988:	d859      	bhi.n	8003a3e <HAL_GPIO_Init+0x12e>
 800398a:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <HAL_GPIO_Init+0x80>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	08003a0b 	.word	0x08003a0b
 8003994:	080039e5 	.word	0x080039e5
 8003998:	080039f7 	.word	0x080039f7
 800399c:	08003a39 	.word	0x08003a39
 80039a0:	08003a3f 	.word	0x08003a3f
 80039a4:	08003a3f 	.word	0x08003a3f
 80039a8:	08003a3f 	.word	0x08003a3f
 80039ac:	08003a3f 	.word	0x08003a3f
 80039b0:	08003a3f 	.word	0x08003a3f
 80039b4:	08003a3f 	.word	0x08003a3f
 80039b8:	08003a3f 	.word	0x08003a3f
 80039bc:	08003a3f 	.word	0x08003a3f
 80039c0:	08003a3f 	.word	0x08003a3f
 80039c4:	08003a3f 	.word	0x08003a3f
 80039c8:	08003a3f 	.word	0x08003a3f
 80039cc:	08003a3f 	.word	0x08003a3f
 80039d0:	08003a3f 	.word	0x08003a3f
 80039d4:	080039ed 	.word	0x080039ed
 80039d8:	08003a01 	.word	0x08003a01
 80039dc:	4a82      	ldr	r2, [pc, #520]	; (8003be8 <HAL_GPIO_Init+0x2d8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d013      	beq.n	8003a0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80039e2:	e02c      	b.n	8003a3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	623b      	str	r3, [r7, #32]
          break;
 80039ea:	e029      	b.n	8003a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	3304      	adds	r3, #4
 80039f2:	623b      	str	r3, [r7, #32]
          break;
 80039f4:	e024      	b.n	8003a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	3308      	adds	r3, #8
 80039fc:	623b      	str	r3, [r7, #32]
          break;
 80039fe:	e01f      	b.n	8003a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	330c      	adds	r3, #12
 8003a06:	623b      	str	r3, [r7, #32]
          break;
 8003a08:	e01a      	b.n	8003a40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a12:	2304      	movs	r3, #4
 8003a14:	623b      	str	r3, [r7, #32]
          break;
 8003a16:	e013      	b.n	8003a40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d105      	bne.n	8003a2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a20:	2308      	movs	r3, #8
 8003a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	611a      	str	r2, [r3, #16]
          break;
 8003a2a:	e009      	b.n	8003a40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a2c:	2308      	movs	r3, #8
 8003a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	615a      	str	r2, [r3, #20]
          break;
 8003a36:	e003      	b.n	8003a40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	623b      	str	r3, [r7, #32]
          break;
 8003a3c:	e000      	b.n	8003a40 <HAL_GPIO_Init+0x130>
          break;
 8003a3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2bff      	cmp	r3, #255	; 0xff
 8003a44:	d801      	bhi.n	8003a4a <HAL_GPIO_Init+0x13a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	e001      	b.n	8003a4e <HAL_GPIO_Init+0x13e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2bff      	cmp	r3, #255	; 0xff
 8003a54:	d802      	bhi.n	8003a5c <HAL_GPIO_Init+0x14c>
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	e002      	b.n	8003a62 <HAL_GPIO_Init+0x152>
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	3b08      	subs	r3, #8
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	210f      	movs	r1, #15
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	401a      	ands	r2, r3
 8003a74:	6a39      	ldr	r1, [r7, #32]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8090 	beq.w	8003bb0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a90:	4b56      	ldr	r3, [pc, #344]	; (8003bec <HAL_GPIO_Init+0x2dc>)
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	4a55      	ldr	r2, [pc, #340]	; (8003bec <HAL_GPIO_Init+0x2dc>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6193      	str	r3, [r2, #24]
 8003a9c:	4b53      	ldr	r3, [pc, #332]	; (8003bec <HAL_GPIO_Init+0x2dc>)
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003aa8:	4a51      	ldr	r2, [pc, #324]	; (8003bf0 <HAL_GPIO_Init+0x2e0>)
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	3302      	adds	r3, #2
 8003ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	220f      	movs	r2, #15
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a49      	ldr	r2, [pc, #292]	; (8003bf4 <HAL_GPIO_Init+0x2e4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00d      	beq.n	8003af0 <HAL_GPIO_Init+0x1e0>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a48      	ldr	r2, [pc, #288]	; (8003bf8 <HAL_GPIO_Init+0x2e8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d007      	beq.n	8003aec <HAL_GPIO_Init+0x1dc>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a47      	ldr	r2, [pc, #284]	; (8003bfc <HAL_GPIO_Init+0x2ec>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d101      	bne.n	8003ae8 <HAL_GPIO_Init+0x1d8>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e004      	b.n	8003af2 <HAL_GPIO_Init+0x1e2>
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e002      	b.n	8003af2 <HAL_GPIO_Init+0x1e2>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <HAL_GPIO_Init+0x1e2>
 8003af0:	2300      	movs	r3, #0
 8003af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af4:	f002 0203 	and.w	r2, r2, #3
 8003af8:	0092      	lsls	r2, r2, #2
 8003afa:	4093      	lsls	r3, r2
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b02:	493b      	ldr	r1, [pc, #236]	; (8003bf0 <HAL_GPIO_Init+0x2e0>)
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	089b      	lsrs	r3, r3, #2
 8003b08:	3302      	adds	r3, #2
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d006      	beq.n	8003b2a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b1c:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4937      	ldr	r1, [pc, #220]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	600b      	str	r3, [r1, #0]
 8003b28:	e006      	b.n	8003b38 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b2a:	4b35      	ldr	r3, [pc, #212]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	4933      	ldr	r1, [pc, #204]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d006      	beq.n	8003b52 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b44:	4b2e      	ldr	r3, [pc, #184]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	492d      	ldr	r1, [pc, #180]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	604b      	str	r3, [r1, #4]
 8003b50:	e006      	b.n	8003b60 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b52:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	4929      	ldr	r1, [pc, #164]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d006      	beq.n	8003b7a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	4923      	ldr	r1, [pc, #140]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	608b      	str	r3, [r1, #8]
 8003b78:	e006      	b.n	8003b88 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b7a:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	491f      	ldr	r1, [pc, #124]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d006      	beq.n	8003ba2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b94:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	4919      	ldr	r1, [pc, #100]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60cb      	str	r3, [r1, #12]
 8003ba0:	e006      	b.n	8003bb0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ba2:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	4915      	ldr	r1, [pc, #84]	; (8003c00 <HAL_GPIO_Init+0x2f0>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f47f aeaf 	bne.w	8003924 <HAL_GPIO_Init+0x14>
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	bf00      	nop
 8003bca:	372c      	adds	r7, #44	; 0x2c
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	10320000 	.word	0x10320000
 8003bd8:	10310000 	.word	0x10310000
 8003bdc:	10220000 	.word	0x10220000
 8003be0:	10210000 	.word	0x10210000
 8003be4:	10120000 	.word	0x10120000
 8003be8:	10110000 	.word	0x10110000
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40010800 	.word	0x40010800
 8003bf8:	40010c00 	.word	0x40010c00
 8003bfc:	40011000 	.word	0x40011000
 8003c00:	40010400 	.word	0x40010400

08003c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	807b      	strh	r3, [r7, #2]
 8003c10:	4613      	mov	r3, r2
 8003c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c14:	787b      	ldrb	r3, [r7, #1]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c1a:	887a      	ldrh	r2, [r7, #2]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c20:	e003      	b.n	8003c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c22:	887b      	ldrh	r3, [r7, #2]
 8003c24:	041a      	lsls	r2, r3, #16
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	611a      	str	r2, [r3, #16]
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d006      	beq.n	8003c58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c4a:	4a05      	ldr	r2, [pc, #20]	; (8003c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fc fb1c 	bl	8000290 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40010400 	.word	0x40010400

08003c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e26c      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8087 	beq.w	8003d92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c84:	4b92      	ldr	r3, [pc, #584]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d00c      	beq.n	8003caa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c90:	4b8f      	ldr	r3, [pc, #572]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d112      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x5e>
 8003c9c:	4b8c      	ldr	r3, [pc, #560]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca8:	d10b      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003caa:	4b89      	ldr	r3, [pc, #548]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d06c      	beq.n	8003d90 <HAL_RCC_OscConfig+0x12c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d168      	bne.n	8003d90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e246      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cca:	d106      	bne.n	8003cda <HAL_RCC_OscConfig+0x76>
 8003ccc:	4b80      	ldr	r3, [pc, #512]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a7f      	ldr	r2, [pc, #508]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	e02e      	b.n	8003d38 <HAL_RCC_OscConfig+0xd4>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x98>
 8003ce2:	4b7b      	ldr	r3, [pc, #492]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a7a      	ldr	r2, [pc, #488]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b78      	ldr	r3, [pc, #480]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a77      	ldr	r2, [pc, #476]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e01d      	b.n	8003d38 <HAL_RCC_OscConfig+0xd4>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCC_OscConfig+0xbc>
 8003d06:	4b72      	ldr	r3, [pc, #456]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a71      	ldr	r2, [pc, #452]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	4b6f      	ldr	r3, [pc, #444]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a6e      	ldr	r2, [pc, #440]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e00b      	b.n	8003d38 <HAL_RCC_OscConfig+0xd4>
 8003d20:	4b6b      	ldr	r3, [pc, #428]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a6a      	ldr	r2, [pc, #424]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	4b68      	ldr	r3, [pc, #416]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a67      	ldr	r2, [pc, #412]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d013      	beq.n	8003d68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7ff fa0c 	bl	800315c <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d48:	f7ff fa08 	bl	800315c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b64      	cmp	r3, #100	; 0x64
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e1fa      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5a:	4b5d      	ldr	r3, [pc, #372]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0xe4>
 8003d66:	e014      	b.n	8003d92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7ff f9f8 	bl	800315c <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d70:	f7ff f9f4 	bl	800315c <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	; 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e1e6      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d82:	4b53      	ldr	r3, [pc, #332]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x10c>
 8003d8e:	e000      	b.n	8003d92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d063      	beq.n	8003e66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d9e:	4b4c      	ldr	r3, [pc, #304]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003daa:	4b49      	ldr	r3, [pc, #292]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d11c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x18c>
 8003db6:	4b46      	ldr	r3, [pc, #280]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d116      	bne.n	8003df0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc2:	4b43      	ldr	r3, [pc, #268]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_RCC_OscConfig+0x176>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d001      	beq.n	8003dda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e1ba      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dda:	4b3d      	ldr	r3, [pc, #244]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4939      	ldr	r1, [pc, #228]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dee:	e03a      	b.n	8003e66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d020      	beq.n	8003e3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df8:	4b36      	ldr	r3, [pc, #216]	; (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfe:	f7ff f9ad 	bl	800315c <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e06:	f7ff f9a9 	bl	800315c <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e19b      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e18:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e24:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	4927      	ldr	r1, [pc, #156]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	600b      	str	r3, [r1, #0]
 8003e38:	e015      	b.n	8003e66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e3a:	4b26      	ldr	r3, [pc, #152]	; (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7ff f98c 	bl	800315c <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e48:	f7ff f988 	bl	800315c <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e17a      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d03a      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d019      	beq.n	8003eae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e7a:	4b17      	ldr	r3, [pc, #92]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e80:	f7ff f96c 	bl	800315c <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e88:	f7ff f968 	bl	800315c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e15a      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	f000 fad8 	bl	800445c <RCC_Delay>
 8003eac:	e01c      	b.n	8003ee8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb4:	f7ff f952 	bl	800315c <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eba:	e00f      	b.n	8003edc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ebc:	f7ff f94e 	bl	800315c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d908      	bls.n	8003edc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e140      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	42420000 	.word	0x42420000
 8003ed8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003edc:	4b9e      	ldr	r3, [pc, #632]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e9      	bne.n	8003ebc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80a6 	beq.w	8004042 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efa:	4b97      	ldr	r3, [pc, #604]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10d      	bne.n	8003f22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f06:	4b94      	ldr	r3, [pc, #592]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4a93      	ldr	r2, [pc, #588]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	61d3      	str	r3, [r2, #28]
 8003f12:	4b91      	ldr	r3, [pc, #580]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f22:	4b8e      	ldr	r3, [pc, #568]	; (800415c <HAL_RCC_OscConfig+0x4f8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d118      	bne.n	8003f60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f2e:	4b8b      	ldr	r3, [pc, #556]	; (800415c <HAL_RCC_OscConfig+0x4f8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a8a      	ldr	r2, [pc, #552]	; (800415c <HAL_RCC_OscConfig+0x4f8>)
 8003f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3a:	f7ff f90f 	bl	800315c <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f42:	f7ff f90b 	bl	800315c <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b64      	cmp	r3, #100	; 0x64
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e0fd      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f54:	4b81      	ldr	r3, [pc, #516]	; (800415c <HAL_RCC_OscConfig+0x4f8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d106      	bne.n	8003f76 <HAL_RCC_OscConfig+0x312>
 8003f68:	4b7b      	ldr	r3, [pc, #492]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	4a7a      	ldr	r2, [pc, #488]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6213      	str	r3, [r2, #32]
 8003f74:	e02d      	b.n	8003fd2 <HAL_RCC_OscConfig+0x36e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x334>
 8003f7e:	4b76      	ldr	r3, [pc, #472]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	4a75      	ldr	r2, [pc, #468]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	6213      	str	r3, [r2, #32]
 8003f8a:	4b73      	ldr	r3, [pc, #460]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	4a72      	ldr	r2, [pc, #456]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003f90:	f023 0304 	bic.w	r3, r3, #4
 8003f94:	6213      	str	r3, [r2, #32]
 8003f96:	e01c      	b.n	8003fd2 <HAL_RCC_OscConfig+0x36e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b05      	cmp	r3, #5
 8003f9e:	d10c      	bne.n	8003fba <HAL_RCC_OscConfig+0x356>
 8003fa0:	4b6d      	ldr	r3, [pc, #436]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	4a6c      	ldr	r2, [pc, #432]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003fa6:	f043 0304 	orr.w	r3, r3, #4
 8003faa:	6213      	str	r3, [r2, #32]
 8003fac:	4b6a      	ldr	r3, [pc, #424]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	4a69      	ldr	r2, [pc, #420]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6213      	str	r3, [r2, #32]
 8003fb8:	e00b      	b.n	8003fd2 <HAL_RCC_OscConfig+0x36e>
 8003fba:	4b67      	ldr	r3, [pc, #412]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	4a66      	ldr	r2, [pc, #408]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	6213      	str	r3, [r2, #32]
 8003fc6:	4b64      	ldr	r3, [pc, #400]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	4a63      	ldr	r2, [pc, #396]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003fcc:	f023 0304 	bic.w	r3, r3, #4
 8003fd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d015      	beq.n	8004006 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fda:	f7ff f8bf 	bl	800315c <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7ff f8bb 	bl	800315c <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e0ab      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff8:	4b57      	ldr	r3, [pc, #348]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ee      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x37e>
 8004004:	e014      	b.n	8004030 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004006:	f7ff f8a9 	bl	800315c <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800400c:	e00a      	b.n	8004024 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7ff f8a5 	bl	800315c <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f241 3288 	movw	r2, #5000	; 0x1388
 800401c:	4293      	cmp	r3, r2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e095      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004024:	4b4c      	ldr	r3, [pc, #304]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1ee      	bne.n	800400e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d105      	bne.n	8004042 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004036:	4b48      	ldr	r3, [pc, #288]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	4a47      	ldr	r2, [pc, #284]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 800403c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004040:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 8081 	beq.w	800414e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800404c:	4b42      	ldr	r3, [pc, #264]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 030c 	and.w	r3, r3, #12
 8004054:	2b08      	cmp	r3, #8
 8004056:	d061      	beq.n	800411c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d146      	bne.n	80040ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004060:	4b3f      	ldr	r3, [pc, #252]	; (8004160 <HAL_RCC_OscConfig+0x4fc>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004066:	f7ff f879 	bl	800315c <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406e:	f7ff f875 	bl	800315c <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e067      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004080:	4b35      	ldr	r3, [pc, #212]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d108      	bne.n	80040a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004096:	4b30      	ldr	r3, [pc, #192]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	492d      	ldr	r1, [pc, #180]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040a8:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a19      	ldr	r1, [r3, #32]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	430b      	orrs	r3, r1
 80040ba:	4927      	ldr	r1, [pc, #156]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c0:	4b27      	ldr	r3, [pc, #156]	; (8004160 <HAL_RCC_OscConfig+0x4fc>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c6:	f7ff f849 	bl	800315c <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ce:	f7ff f845 	bl	800315c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e037      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x46a>
 80040ec:	e02f      	b.n	800414e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ee:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <HAL_RCC_OscConfig+0x4fc>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7ff f832 	bl	800315c <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fc:	f7ff f82e 	bl	800315c <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e020      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800410e:	4b12      	ldr	r3, [pc, #72]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x498>
 800411a:	e018      	b.n	800414e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e013      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <HAL_RCC_OscConfig+0x4f4>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	429a      	cmp	r2, r3
 800413a:	d106      	bne.n	800414a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004146:	429a      	cmp	r2, r3
 8004148:	d001      	beq.n	800414e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000
 800415c:	40007000 	.word	0x40007000
 8004160:	42420060 	.word	0x42420060

08004164 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0d0      	b.n	800431a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004178:	4b6a      	ldr	r3, [pc, #424]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d910      	bls.n	80041a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004186:	4b67      	ldr	r3, [pc, #412]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 0207 	bic.w	r2, r3, #7
 800418e:	4965      	ldr	r1, [pc, #404]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	4313      	orrs	r3, r2
 8004194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004196:	4b63      	ldr	r3, [pc, #396]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0b8      	b.n	800431a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c0:	4b59      	ldr	r3, [pc, #356]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4a58      	ldr	r2, [pc, #352]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80041c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d8:	4b53      	ldr	r3, [pc, #332]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	4a52      	ldr	r2, [pc, #328]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80041de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e4:	4b50      	ldr	r3, [pc, #320]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	494d      	ldr	r1, [pc, #308]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d040      	beq.n	8004284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	4b47      	ldr	r3, [pc, #284]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d115      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e07f      	b.n	800431a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	4b41      	ldr	r3, [pc, #260]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e073      	b.n	800431a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	4b3d      	ldr	r3, [pc, #244]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e06b      	b.n	800431a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004242:	4b39      	ldr	r3, [pc, #228]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4936      	ldr	r1, [pc, #216]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004250:	4313      	orrs	r3, r2
 8004252:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004254:	f7fe ff82 	bl	800315c <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	e00a      	b.n	8004272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425c:	f7fe ff7e 	bl	800315c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	; 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e053      	b.n	800431a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	4b2d      	ldr	r3, [pc, #180]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f003 020c 	and.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	429a      	cmp	r2, r3
 8004282:	d1eb      	bne.n	800425c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004284:	4b27      	ldr	r3, [pc, #156]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d210      	bcs.n	80042b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004292:	4b24      	ldr	r3, [pc, #144]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 0207 	bic.w	r2, r3, #7
 800429a:	4922      	ldr	r1, [pc, #136]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a2:	4b20      	ldr	r3, [pc, #128]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e032      	b.n	800431a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4916      	ldr	r1, [pc, #88]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	490e      	ldr	r1, [pc, #56]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042f2:	f000 f821 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80042f6:	4602      	mov	r2, r0
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	490a      	ldr	r1, [pc, #40]	; (800432c <HAL_RCC_ClockConfig+0x1c8>)
 8004304:	5ccb      	ldrb	r3, [r1, r3]
 8004306:	fa22 f303 	lsr.w	r3, r2, r3
 800430a:	4a09      	ldr	r2, [pc, #36]	; (8004330 <HAL_RCC_ClockConfig+0x1cc>)
 800430c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_RCC_ClockConfig+0x1d0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe fee0 	bl	80030d8 <HAL_InitTick>

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40022000 	.word	0x40022000
 8004328:	40021000 	.word	0x40021000
 800432c:	08005ce8 	.word	0x08005ce8
 8004330:	20000004 	.word	0x20000004
 8004334:	20000018 	.word	0x20000018

08004338 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004338:	b490      	push	{r4, r7}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800433e:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004340:	1d3c      	adds	r4, r7, #4
 8004342:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004348:	f240 2301 	movw	r3, #513	; 0x201
 800434c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	2300      	movs	r3, #0
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	2300      	movs	r3, #0
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004362:	4b22      	ldr	r3, [pc, #136]	; (80043ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b04      	cmp	r3, #4
 8004370:	d002      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x40>
 8004372:	2b08      	cmp	r3, #8
 8004374:	d003      	beq.n	800437e <HAL_RCC_GetSysClockFreq+0x46>
 8004376:	e02d      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004378:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800437a:	623b      	str	r3, [r7, #32]
      break;
 800437c:	e02d      	b.n	80043da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	0c9b      	lsrs	r3, r3, #18
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800438a:	4413      	add	r3, r2
 800438c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004390:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d013      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800439c:	4b13      	ldr	r3, [pc, #76]	; (80043ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	0c5b      	lsrs	r3, r3, #17
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80043aa:	4413      	add	r3, r2
 80043ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	4a0e      	ldr	r2, [pc, #56]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043b6:	fb02 f203 	mul.w	r2, r2, r3
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
 80043c2:	e004      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	4a0b      	ldr	r2, [pc, #44]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	623b      	str	r3, [r7, #32]
      break;
 80043d2:	e002      	b.n	80043da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043d6:	623b      	str	r3, [r7, #32]
      break;
 80043d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043da:	6a3b      	ldr	r3, [r7, #32]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3728      	adds	r7, #40	; 0x28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc90      	pop	{r4, r7}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	08005c68 	.word	0x08005c68
 80043ec:	40021000 	.word	0x40021000
 80043f0:	007a1200 	.word	0x007a1200
 80043f4:	003d0900 	.word	0x003d0900

080043f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043fc:	4b02      	ldr	r3, [pc, #8]	; (8004408 <HAL_RCC_GetHCLKFreq+0x10>)
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	20000004 	.word	0x20000004

0800440c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004410:	f7ff fff2 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 8004414:	4602      	mov	r2, r0
 8004416:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	0a1b      	lsrs	r3, r3, #8
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	4903      	ldr	r1, [pc, #12]	; (8004430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004422:	5ccb      	ldrb	r3, [r1, r3]
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000
 8004430:	08005cf8 	.word	0x08005cf8

08004434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004438:	f7ff ffde 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	0adb      	lsrs	r3, r3, #11
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4903      	ldr	r1, [pc, #12]	; (8004458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000
 8004458:	08005cf8 	.word	0x08005cf8

0800445c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <RCC_Delay+0x34>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <RCC_Delay+0x38>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	0a5b      	lsrs	r3, r3, #9
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	fb02 f303 	mul.w	r3, r2, r3
 8004476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004478:	bf00      	nop
  }
  while (Delay --);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1e5a      	subs	r2, r3, #1
 800447e:	60fa      	str	r2, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f9      	bne.n	8004478 <RCC_Delay+0x1c>
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr
 8004490:	20000004 	.word	0x20000004
 8004494:	10624dd3 	.word	0x10624dd3

08004498 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e076      	b.n	8004598 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d108      	bne.n	80044c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ba:	d009      	beq.n	80044d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	61da      	str	r2, [r3, #28]
 80044c2:	e005      	b.n	80044d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fc fd3e 	bl	8000f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004506:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004554:	ea42 0103 	orr.w	r1, r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	0c1a      	lsrs	r2, r3, #16
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f002 0204 	and.w	r2, r2, #4
 8004576:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004586:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e03f      	b.n	8004632 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fc fe3e 	bl	8001248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2224      	movs	r2, #36	; 0x24
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fd9b 	bl	8005120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695a      	ldr	r2, [r3, #20]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b08a      	sub	sp, #40	; 0x28
 800463e:	af02      	add	r7, sp, #8
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	603b      	str	r3, [r7, #0]
 8004646:	4613      	mov	r3, r2
 8004648:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b20      	cmp	r3, #32
 8004658:	d17c      	bne.n	8004754 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <HAL_UART_Transmit+0x2c>
 8004660:	88fb      	ldrh	r3, [r7, #6]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e075      	b.n	8004756 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_UART_Transmit+0x3e>
 8004674:	2302      	movs	r3, #2
 8004676:	e06e      	b.n	8004756 <HAL_UART_Transmit+0x11c>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2221      	movs	r2, #33	; 0x21
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800468e:	f7fe fd65 	bl	800315c <HAL_GetTick>
 8004692:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	88fa      	ldrh	r2, [r7, #6]
 8004698:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	88fa      	ldrh	r2, [r7, #6]
 800469e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a8:	d108      	bne.n	80046bc <HAL_UART_Transmit+0x82>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d104      	bne.n	80046bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	e003      	b.n	80046c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046cc:	e02a      	b.n	8004724 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2200      	movs	r2, #0
 80046d6:	2180      	movs	r1, #128	; 0x80
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 fb0d 	bl	8004cf8 <UART_WaitOnFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e036      	b.n	8004756 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10b      	bne.n	8004706 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	3302      	adds	r3, #2
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	e007      	b.n	8004716 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	781a      	ldrb	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	3301      	adds	r3, #1
 8004714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1cf      	bne.n	80046ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2200      	movs	r2, #0
 8004736:	2140      	movs	r1, #64	; 0x40
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 fadd 	bl	8004cf8 <UART_WaitOnFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e006      	b.n	8004756 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	e000      	b.n	8004756 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004754:	2302      	movs	r3, #2
  }
}
 8004756:	4618      	mov	r0, r3
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b086      	sub	sp, #24
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	4613      	mov	r3, r2
 800476a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b20      	cmp	r3, #32
 8004776:	d13c      	bne.n	80047f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800477e:	88fb      	ldrh	r3, [r7, #6]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e035      	b.n	80047f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004792:	2302      	movs	r3, #2
 8004794:	e02e      	b.n	80047f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	461a      	mov	r2, r3
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 faee 	bl	8004d8c <UART_Start_Receive_DMA>
 80047b0:	4603      	mov	r3, r0
 80047b2:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80047b4:	7dfb      	ldrb	r3, [r7, #23]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d119      	bne.n	80047ee <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d113      	bne.n	80047ea <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0210 	orr.w	r2, r2, #16
 80047e6:	60da      	str	r2, [r3, #12]
 80047e8:	e001      	b.n	80047ee <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
 80047f0:	e000      	b.n	80047f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
  }
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08a      	sub	sp, #40	; 0x28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800481c:	2300      	movs	r3, #0
 800481e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10d      	bne.n	800484e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	f003 0320 	and.w	r3, r3, #32
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <HAL_UART_IRQHandler+0x52>
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fbc0 	bl	8004fcc <UART_Receive_IT>
      return;
 800484c:	e17b      	b.n	8004b46 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80b1 	beq.w	80049b8 <HAL_UART_IRQHandler+0x1bc>
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d105      	bne.n	800486c <HAL_UART_IRQHandler+0x70>
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80a6 	beq.w	80049b8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_UART_IRQHandler+0x90>
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	f043 0201 	orr.w	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_UART_IRQHandler+0xb0>
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	f043 0202 	orr.w	r2, r3, #2
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_UART_IRQHandler+0xd0>
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	f043 0204 	orr.w	r2, r3, #4
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00f      	beq.n	80048f6 <HAL_UART_IRQHandler+0xfa>
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <HAL_UART_IRQHandler+0xee>
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f043 0208 	orr.w	r2, r3, #8
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 811e 	beq.w	8004b3c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <HAL_UART_IRQHandler+0x11e>
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fb59 	bl	8004fcc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	bf14      	ite	ne
 8004928:	2301      	movne	r3, #1
 800492a:	2300      	moveq	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <HAL_UART_IRQHandler+0x146>
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d031      	beq.n	80049a6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa9b 	bl	8004e7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d023      	beq.n	800499e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004964:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	2b00      	cmp	r3, #0
 800496c:	d013      	beq.n	8004996 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	4a76      	ldr	r2, [pc, #472]	; (8004b4c <HAL_UART_IRQHandler+0x350>)
 8004974:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe fe1e 	bl	80035bc <HAL_DMA_Abort_IT>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d016      	beq.n	80049b4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004990:	4610      	mov	r0, r2
 8004992:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004994:	e00e      	b.n	80049b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f8f5 	bl	8004b86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800499c:	e00a      	b.n	80049b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f8f1 	bl	8004b86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a4:	e006      	b.n	80049b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f8ed 	bl	8004b86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049b2:	e0c3      	b.n	8004b3c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	bf00      	nop
    return;
 80049b6:	e0c1      	b.n	8004b3c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	2b01      	cmp	r3, #1
 80049be:	f040 80a1 	bne.w	8004b04 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 809b 	beq.w	8004b04 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8095 	beq.w	8004b04 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d04e      	beq.n	8004a9c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004a08:	8a3b      	ldrh	r3, [r7, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 8098 	beq.w	8004b40 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a14:	8a3a      	ldrh	r2, [r7, #16]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	f080 8092 	bcs.w	8004b40 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8a3a      	ldrh	r2, [r7, #16]
 8004a20:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d02b      	beq.n	8004a84 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a3a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695a      	ldr	r2, [r3, #20]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0201 	bic.w	r2, r2, #1
 8004a4a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a5a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0210 	bic.w	r2, r2, #16
 8004a78:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe fd61 	bl	8003546 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7fc fced 	bl	8001474 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004a9a:	e051      	b.n	8004b40 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d047      	beq.n	8004b44 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004ab4:	8a7b      	ldrh	r3, [r7, #18]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d044      	beq.n	8004b44 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ac8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0201 	bic.w	r2, r2, #1
 8004ad8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0210 	bic.w	r2, r2, #16
 8004af6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004af8:	8a7b      	ldrh	r3, [r7, #18]
 8004afa:	4619      	mov	r1, r3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7fc fcb9 	bl	8001474 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004b02:	e01f      	b.n	8004b44 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d008      	beq.n	8004b20 <HAL_UART_IRQHandler+0x324>
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f9f0 	bl	8004efe <UART_Transmit_IT>
    return;
 8004b1e:	e012      	b.n	8004b46 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00d      	beq.n	8004b46 <HAL_UART_IRQHandler+0x34a>
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fa31 	bl	8004f9c <UART_EndTransmit_IT>
    return;
 8004b3a:	e004      	b.n	8004b46 <HAL_UART_IRQHandler+0x34a>
    return;
 8004b3c:	bf00      	nop
 8004b3e:	e002      	b.n	8004b46 <HAL_UART_IRQHandler+0x34a>
      return;
 8004b40:	bf00      	nop
 8004b42:	e000      	b.n	8004b46 <HAL_UART_IRQHandler+0x34a>
      return;
 8004b44:	bf00      	nop
  }
}
 8004b46:	3728      	adds	r7, #40	; 0x28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	08004ed7 	.word	0x08004ed7

08004b50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr

08004b62 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr

08004b74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr

08004b86 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr

08004b98 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d12a      	bne.n	8004c0a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bc8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695a      	ldr	r2, [r3, #20]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0201 	bic.w	r2, r2, #1
 8004bd8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d107      	bne.n	8004c0a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0210 	bic.w	r2, r2, #16
 8004c08:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d106      	bne.n	8004c20 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c16:	4619      	mov	r1, r3
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f7fc fc2b 	bl	8001474 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c1e:	e002      	b.n	8004c26 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7ff ff9e 	bl	8004b62 <HAL_UART_RxCpltCallback>
}
 8004c26:	bf00      	nop
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d108      	bne.n	8004c56 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7fc fc10 	bl	8001474 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c54:	e002      	b.n	8004c5c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff ff8c 	bl	8004b74 <HAL_UART_RxHalfCpltCallback>
}
 8004c5c:	bf00      	nop
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf14      	ite	ne
 8004c84:	2301      	movne	r3, #1
 8004c86:	2300      	moveq	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b21      	cmp	r3, #33	; 0x21
 8004c96:	d108      	bne.n	8004caa <UART_DMAError+0x46>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004ca4:	68b8      	ldr	r0, [r7, #8]
 8004ca6:	f000 f8d5 	bl	8004e54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf14      	ite	ne
 8004cb8:	2301      	movne	r3, #1
 8004cba:	2300      	moveq	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b22      	cmp	r3, #34	; 0x22
 8004cca:	d108      	bne.n	8004cde <UART_DMAError+0x7a>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d005      	beq.n	8004cde <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004cd8:	68b8      	ldr	r0, [r7, #8]
 8004cda:	f000 f8d0 	bl	8004e7e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f043 0210 	orr.w	r2, r3, #16
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cea:	68b8      	ldr	r0, [r7, #8]
 8004cec:	f7ff ff4b 	bl	8004b86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	4613      	mov	r3, r2
 8004d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d08:	e02c      	b.n	8004d64 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d028      	beq.n	8004d64 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d007      	beq.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d18:	f7fe fa20 	bl	800315c <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d21d      	bcs.n	8004d64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695a      	ldr	r2, [r3, #20]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0201 	bic.w	r2, r2, #1
 8004d46:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e00f      	b.n	8004d84 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	79fb      	ldrb	r3, [r7, #7]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d0c3      	beq.n	8004d0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	4613      	mov	r3, r2
 8004d98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	88fa      	ldrh	r2, [r7, #6]
 8004da4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2222      	movs	r2, #34	; 0x22
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	4a23      	ldr	r2, [pc, #140]	; (8004e48 <UART_Start_Receive_DMA+0xbc>)
 8004dba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	4a22      	ldr	r2, [pc, #136]	; (8004e4c <UART_Start_Receive_DMA+0xc0>)
 8004dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	4a21      	ldr	r2, [pc, #132]	; (8004e50 <UART_Start_Receive_DMA+0xc4>)
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004dd4:	f107 0308 	add.w	r3, r7, #8
 8004dd8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3304      	adds	r3, #4
 8004de4:	4619      	mov	r1, r3
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	88fb      	ldrh	r3, [r7, #6]
 8004dec:	f7fe fb4c 	bl	8003488 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004df0:	2300      	movs	r3, #0
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e1c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695a      	ldr	r2, [r3, #20]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695a      	ldr	r2, [r3, #20]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e3c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	08004b99 	.word	0x08004b99
 8004e4c:	08004c2f 	.word	0x08004c2f
 8004e50:	08004c65 	.word	0x08004c65

08004e54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004e6a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e94:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695a      	ldr	r2, [r3, #20]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d107      	bne.n	8004ebe <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0210 	bic.w	r2, r2, #16
 8004ebc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr

08004ed6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f7ff fe48 	bl	8004b86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b085      	sub	sp, #20
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b21      	cmp	r3, #33	; 0x21
 8004f10:	d13e      	bne.n	8004f90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1a:	d114      	bne.n	8004f46 <UART_Transmit_IT+0x48>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d110      	bne.n	8004f46 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	1c9a      	adds	r2, r3, #2
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	621a      	str	r2, [r3, #32]
 8004f44:	e008      	b.n	8004f58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	1c59      	adds	r1, r3, #1
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6211      	str	r1, [r2, #32]
 8004f50:	781a      	ldrb	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	4619      	mov	r1, r3
 8004f66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10f      	bne.n	8004f8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	e000      	b.n	8004f92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f90:	2302      	movs	r3, #2
  }
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr

08004f9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff fdc7 	bl	8004b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b22      	cmp	r3, #34	; 0x22
 8004fde:	f040 8099 	bne.w	8005114 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fea:	d117      	bne.n	800501c <UART_Receive_IT+0x50>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d113      	bne.n	800501c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	b29b      	uxth	r3, r3
 8005006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500a:	b29a      	uxth	r2, r3
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	1c9a      	adds	r2, r3, #2
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	629a      	str	r2, [r3, #40]	; 0x28
 800501a:	e026      	b.n	800506a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502e:	d007      	beq.n	8005040 <UART_Receive_IT+0x74>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <UART_Receive_IT+0x82>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d106      	bne.n	800504e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	b2da      	uxtb	r2, r3
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	e008      	b.n	8005060 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800505a:	b2da      	uxtb	r2, r3
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29b      	uxth	r3, r3
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	4619      	mov	r1, r3
 8005078:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800507a:	2b00      	cmp	r3, #0
 800507c:	d148      	bne.n	8005110 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0220 	bic.w	r2, r2, #32
 800508c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800509c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695a      	ldr	r2, [r3, #20]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d123      	bne.n	8005106 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0210 	bic.w	r2, r2, #16
 80050d2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	2b10      	cmp	r3, #16
 80050e0:	d10a      	bne.n	80050f8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050fc:	4619      	mov	r1, r3
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fc f9b8 	bl	8001474 <HAL_UARTEx_RxEventCallback>
 8005104:	e002      	b.n	800510c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff fd2b 	bl	8004b62 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	e002      	b.n	8005116 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005110:	2300      	movs	r3, #0
 8005112:	e000      	b.n	8005116 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005114:	2302      	movs	r3, #2
  }
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800515a:	f023 030c 	bic.w	r3, r3, #12
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6812      	ldr	r2, [r2, #0]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	430b      	orrs	r3, r1
 8005166:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a2c      	ldr	r2, [pc, #176]	; (8005234 <UART_SetConfig+0x114>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d103      	bne.n	8005190 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005188:	f7ff f954 	bl	8004434 <HAL_RCC_GetPCLK2Freq>
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	e002      	b.n	8005196 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005190:	f7ff f93c 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 8005194:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	009a      	lsls	r2, r3, #2
 80051a0:	441a      	add	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ac:	4a22      	ldr	r2, [pc, #136]	; (8005238 <UART_SetConfig+0x118>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	0119      	lsls	r1, r3, #4
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4613      	mov	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	009a      	lsls	r2, r3, #2
 80051c0:	441a      	add	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80051cc:	4b1a      	ldr	r3, [pc, #104]	; (8005238 <UART_SetConfig+0x118>)
 80051ce:	fba3 0302 	umull	r0, r3, r3, r2
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	2064      	movs	r0, #100	; 0x64
 80051d6:	fb00 f303 	mul.w	r3, r0, r3
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	3332      	adds	r3, #50	; 0x32
 80051e0:	4a15      	ldr	r2, [pc, #84]	; (8005238 <UART_SetConfig+0x118>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051ec:	4419      	add	r1, r3
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009a      	lsls	r2, r3, #2
 80051f8:	441a      	add	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	fbb2 f2f3 	udiv	r2, r2, r3
 8005204:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <UART_SetConfig+0x118>)
 8005206:	fba3 0302 	umull	r0, r3, r3, r2
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	2064      	movs	r0, #100	; 0x64
 800520e:	fb00 f303 	mul.w	r3, r0, r3
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	3332      	adds	r3, #50	; 0x32
 8005218:	4a07      	ldr	r2, [pc, #28]	; (8005238 <UART_SetConfig+0x118>)
 800521a:	fba2 2303 	umull	r2, r3, r2, r3
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	f003 020f 	and.w	r2, r3, #15
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	440a      	add	r2, r1
 800522a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	40013800 	.word	0x40013800
 8005238:	51eb851f 	.word	0x51eb851f

0800523c <__errno>:
 800523c:	4b01      	ldr	r3, [pc, #4]	; (8005244 <__errno+0x8>)
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	20000020 	.word	0x20000020

08005248 <__libc_init_array>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	2600      	movs	r6, #0
 800524c:	4d0c      	ldr	r5, [pc, #48]	; (8005280 <__libc_init_array+0x38>)
 800524e:	4c0d      	ldr	r4, [pc, #52]	; (8005284 <__libc_init_array+0x3c>)
 8005250:	1b64      	subs	r4, r4, r5
 8005252:	10a4      	asrs	r4, r4, #2
 8005254:	42a6      	cmp	r6, r4
 8005256:	d109      	bne.n	800526c <__libc_init_array+0x24>
 8005258:	f000 fc64 	bl	8005b24 <_init>
 800525c:	2600      	movs	r6, #0
 800525e:	4d0a      	ldr	r5, [pc, #40]	; (8005288 <__libc_init_array+0x40>)
 8005260:	4c0a      	ldr	r4, [pc, #40]	; (800528c <__libc_init_array+0x44>)
 8005262:	1b64      	subs	r4, r4, r5
 8005264:	10a4      	asrs	r4, r4, #2
 8005266:	42a6      	cmp	r6, r4
 8005268:	d105      	bne.n	8005276 <__libc_init_array+0x2e>
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005270:	4798      	blx	r3
 8005272:	3601      	adds	r6, #1
 8005274:	e7ee      	b.n	8005254 <__libc_init_array+0xc>
 8005276:	f855 3b04 	ldr.w	r3, [r5], #4
 800527a:	4798      	blx	r3
 800527c:	3601      	adds	r6, #1
 800527e:	e7f2      	b.n	8005266 <__libc_init_array+0x1e>
 8005280:	08005fd4 	.word	0x08005fd4
 8005284:	08005fd4 	.word	0x08005fd4
 8005288:	08005fd4 	.word	0x08005fd4
 800528c:	08005fd8 	.word	0x08005fd8

08005290 <memcpy>:
 8005290:	440a      	add	r2, r1
 8005292:	4291      	cmp	r1, r2
 8005294:	f100 33ff 	add.w	r3, r0, #4294967295
 8005298:	d100      	bne.n	800529c <memcpy+0xc>
 800529a:	4770      	bx	lr
 800529c:	b510      	push	{r4, lr}
 800529e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052a2:	4291      	cmp	r1, r2
 80052a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052a8:	d1f9      	bne.n	800529e <memcpy+0xe>
 80052aa:	bd10      	pop	{r4, pc}

080052ac <memset>:
 80052ac:	4603      	mov	r3, r0
 80052ae:	4402      	add	r2, r0
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d100      	bne.n	80052b6 <memset+0xa>
 80052b4:	4770      	bx	lr
 80052b6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ba:	e7f9      	b.n	80052b0 <memset+0x4>

080052bc <siprintf>:
 80052bc:	b40e      	push	{r1, r2, r3}
 80052be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052c2:	b500      	push	{lr}
 80052c4:	b09c      	sub	sp, #112	; 0x70
 80052c6:	ab1d      	add	r3, sp, #116	; 0x74
 80052c8:	9002      	str	r0, [sp, #8]
 80052ca:	9006      	str	r0, [sp, #24]
 80052cc:	9107      	str	r1, [sp, #28]
 80052ce:	9104      	str	r1, [sp, #16]
 80052d0:	4808      	ldr	r0, [pc, #32]	; (80052f4 <siprintf+0x38>)
 80052d2:	4909      	ldr	r1, [pc, #36]	; (80052f8 <siprintf+0x3c>)
 80052d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80052d8:	9105      	str	r1, [sp, #20]
 80052da:	6800      	ldr	r0, [r0, #0]
 80052dc:	a902      	add	r1, sp, #8
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	f000 f870 	bl	80053c4 <_svfiprintf_r>
 80052e4:	2200      	movs	r2, #0
 80052e6:	9b02      	ldr	r3, [sp, #8]
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	b01c      	add	sp, #112	; 0x70
 80052ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80052f0:	b003      	add	sp, #12
 80052f2:	4770      	bx	lr
 80052f4:	20000020 	.word	0x20000020
 80052f8:	ffff0208 	.word	0xffff0208

080052fc <strcpy>:
 80052fc:	4603      	mov	r3, r0
 80052fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005302:	f803 2b01 	strb.w	r2, [r3], #1
 8005306:	2a00      	cmp	r2, #0
 8005308:	d1f9      	bne.n	80052fe <strcpy+0x2>
 800530a:	4770      	bx	lr

0800530c <__ssputs_r>:
 800530c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	688e      	ldr	r6, [r1, #8]
 8005312:	4682      	mov	sl, r0
 8005314:	429e      	cmp	r6, r3
 8005316:	460c      	mov	r4, r1
 8005318:	4690      	mov	r8, r2
 800531a:	461f      	mov	r7, r3
 800531c:	d838      	bhi.n	8005390 <__ssputs_r+0x84>
 800531e:	898a      	ldrh	r2, [r1, #12]
 8005320:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005324:	d032      	beq.n	800538c <__ssputs_r+0x80>
 8005326:	6825      	ldr	r5, [r4, #0]
 8005328:	6909      	ldr	r1, [r1, #16]
 800532a:	3301      	adds	r3, #1
 800532c:	eba5 0901 	sub.w	r9, r5, r1
 8005330:	6965      	ldr	r5, [r4, #20]
 8005332:	444b      	add	r3, r9
 8005334:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005338:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800533c:	106d      	asrs	r5, r5, #1
 800533e:	429d      	cmp	r5, r3
 8005340:	bf38      	it	cc
 8005342:	461d      	movcc	r5, r3
 8005344:	0553      	lsls	r3, r2, #21
 8005346:	d531      	bpl.n	80053ac <__ssputs_r+0xa0>
 8005348:	4629      	mov	r1, r5
 800534a:	f000 fb45 	bl	80059d8 <_malloc_r>
 800534e:	4606      	mov	r6, r0
 8005350:	b950      	cbnz	r0, 8005368 <__ssputs_r+0x5c>
 8005352:	230c      	movs	r3, #12
 8005354:	f04f 30ff 	mov.w	r0, #4294967295
 8005358:	f8ca 3000 	str.w	r3, [sl]
 800535c:	89a3      	ldrh	r3, [r4, #12]
 800535e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005362:	81a3      	strh	r3, [r4, #12]
 8005364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005368:	464a      	mov	r2, r9
 800536a:	6921      	ldr	r1, [r4, #16]
 800536c:	f7ff ff90 	bl	8005290 <memcpy>
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800537a:	81a3      	strh	r3, [r4, #12]
 800537c:	6126      	str	r6, [r4, #16]
 800537e:	444e      	add	r6, r9
 8005380:	6026      	str	r6, [r4, #0]
 8005382:	463e      	mov	r6, r7
 8005384:	6165      	str	r5, [r4, #20]
 8005386:	eba5 0509 	sub.w	r5, r5, r9
 800538a:	60a5      	str	r5, [r4, #8]
 800538c:	42be      	cmp	r6, r7
 800538e:	d900      	bls.n	8005392 <__ssputs_r+0x86>
 8005390:	463e      	mov	r6, r7
 8005392:	4632      	mov	r2, r6
 8005394:	4641      	mov	r1, r8
 8005396:	6820      	ldr	r0, [r4, #0]
 8005398:	f000 fab8 	bl	800590c <memmove>
 800539c:	68a3      	ldr	r3, [r4, #8]
 800539e:	6822      	ldr	r2, [r4, #0]
 80053a0:	1b9b      	subs	r3, r3, r6
 80053a2:	4432      	add	r2, r6
 80053a4:	2000      	movs	r0, #0
 80053a6:	60a3      	str	r3, [r4, #8]
 80053a8:	6022      	str	r2, [r4, #0]
 80053aa:	e7db      	b.n	8005364 <__ssputs_r+0x58>
 80053ac:	462a      	mov	r2, r5
 80053ae:	f000 fb6d 	bl	8005a8c <_realloc_r>
 80053b2:	4606      	mov	r6, r0
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d1e1      	bne.n	800537c <__ssputs_r+0x70>
 80053b8:	4650      	mov	r0, sl
 80053ba:	6921      	ldr	r1, [r4, #16]
 80053bc:	f000 fac0 	bl	8005940 <_free_r>
 80053c0:	e7c7      	b.n	8005352 <__ssputs_r+0x46>
	...

080053c4 <_svfiprintf_r>:
 80053c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c8:	4698      	mov	r8, r3
 80053ca:	898b      	ldrh	r3, [r1, #12]
 80053cc:	4607      	mov	r7, r0
 80053ce:	061b      	lsls	r3, r3, #24
 80053d0:	460d      	mov	r5, r1
 80053d2:	4614      	mov	r4, r2
 80053d4:	b09d      	sub	sp, #116	; 0x74
 80053d6:	d50e      	bpl.n	80053f6 <_svfiprintf_r+0x32>
 80053d8:	690b      	ldr	r3, [r1, #16]
 80053da:	b963      	cbnz	r3, 80053f6 <_svfiprintf_r+0x32>
 80053dc:	2140      	movs	r1, #64	; 0x40
 80053de:	f000 fafb 	bl	80059d8 <_malloc_r>
 80053e2:	6028      	str	r0, [r5, #0]
 80053e4:	6128      	str	r0, [r5, #16]
 80053e6:	b920      	cbnz	r0, 80053f2 <_svfiprintf_r+0x2e>
 80053e8:	230c      	movs	r3, #12
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	f04f 30ff 	mov.w	r0, #4294967295
 80053f0:	e0d1      	b.n	8005596 <_svfiprintf_r+0x1d2>
 80053f2:	2340      	movs	r3, #64	; 0x40
 80053f4:	616b      	str	r3, [r5, #20]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9309      	str	r3, [sp, #36]	; 0x24
 80053fa:	2320      	movs	r3, #32
 80053fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005400:	2330      	movs	r3, #48	; 0x30
 8005402:	f04f 0901 	mov.w	r9, #1
 8005406:	f8cd 800c 	str.w	r8, [sp, #12]
 800540a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80055b0 <_svfiprintf_r+0x1ec>
 800540e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005412:	4623      	mov	r3, r4
 8005414:	469a      	mov	sl, r3
 8005416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800541a:	b10a      	cbz	r2, 8005420 <_svfiprintf_r+0x5c>
 800541c:	2a25      	cmp	r2, #37	; 0x25
 800541e:	d1f9      	bne.n	8005414 <_svfiprintf_r+0x50>
 8005420:	ebba 0b04 	subs.w	fp, sl, r4
 8005424:	d00b      	beq.n	800543e <_svfiprintf_r+0x7a>
 8005426:	465b      	mov	r3, fp
 8005428:	4622      	mov	r2, r4
 800542a:	4629      	mov	r1, r5
 800542c:	4638      	mov	r0, r7
 800542e:	f7ff ff6d 	bl	800530c <__ssputs_r>
 8005432:	3001      	adds	r0, #1
 8005434:	f000 80aa 	beq.w	800558c <_svfiprintf_r+0x1c8>
 8005438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800543a:	445a      	add	r2, fp
 800543c:	9209      	str	r2, [sp, #36]	; 0x24
 800543e:	f89a 3000 	ldrb.w	r3, [sl]
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 80a2 	beq.w	800558c <_svfiprintf_r+0x1c8>
 8005448:	2300      	movs	r3, #0
 800544a:	f04f 32ff 	mov.w	r2, #4294967295
 800544e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005452:	f10a 0a01 	add.w	sl, sl, #1
 8005456:	9304      	str	r3, [sp, #16]
 8005458:	9307      	str	r3, [sp, #28]
 800545a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800545e:	931a      	str	r3, [sp, #104]	; 0x68
 8005460:	4654      	mov	r4, sl
 8005462:	2205      	movs	r2, #5
 8005464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005468:	4851      	ldr	r0, [pc, #324]	; (80055b0 <_svfiprintf_r+0x1ec>)
 800546a:	f000 fa41 	bl	80058f0 <memchr>
 800546e:	9a04      	ldr	r2, [sp, #16]
 8005470:	b9d8      	cbnz	r0, 80054aa <_svfiprintf_r+0xe6>
 8005472:	06d0      	lsls	r0, r2, #27
 8005474:	bf44      	itt	mi
 8005476:	2320      	movmi	r3, #32
 8005478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800547c:	0711      	lsls	r1, r2, #28
 800547e:	bf44      	itt	mi
 8005480:	232b      	movmi	r3, #43	; 0x2b
 8005482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005486:	f89a 3000 	ldrb.w	r3, [sl]
 800548a:	2b2a      	cmp	r3, #42	; 0x2a
 800548c:	d015      	beq.n	80054ba <_svfiprintf_r+0xf6>
 800548e:	4654      	mov	r4, sl
 8005490:	2000      	movs	r0, #0
 8005492:	f04f 0c0a 	mov.w	ip, #10
 8005496:	9a07      	ldr	r2, [sp, #28]
 8005498:	4621      	mov	r1, r4
 800549a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800549e:	3b30      	subs	r3, #48	; 0x30
 80054a0:	2b09      	cmp	r3, #9
 80054a2:	d94e      	bls.n	8005542 <_svfiprintf_r+0x17e>
 80054a4:	b1b0      	cbz	r0, 80054d4 <_svfiprintf_r+0x110>
 80054a6:	9207      	str	r2, [sp, #28]
 80054a8:	e014      	b.n	80054d4 <_svfiprintf_r+0x110>
 80054aa:	eba0 0308 	sub.w	r3, r0, r8
 80054ae:	fa09 f303 	lsl.w	r3, r9, r3
 80054b2:	4313      	orrs	r3, r2
 80054b4:	46a2      	mov	sl, r4
 80054b6:	9304      	str	r3, [sp, #16]
 80054b8:	e7d2      	b.n	8005460 <_svfiprintf_r+0x9c>
 80054ba:	9b03      	ldr	r3, [sp, #12]
 80054bc:	1d19      	adds	r1, r3, #4
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	9103      	str	r1, [sp, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bfbb      	ittet	lt
 80054c6:	425b      	neglt	r3, r3
 80054c8:	f042 0202 	orrlt.w	r2, r2, #2
 80054cc:	9307      	strge	r3, [sp, #28]
 80054ce:	9307      	strlt	r3, [sp, #28]
 80054d0:	bfb8      	it	lt
 80054d2:	9204      	strlt	r2, [sp, #16]
 80054d4:	7823      	ldrb	r3, [r4, #0]
 80054d6:	2b2e      	cmp	r3, #46	; 0x2e
 80054d8:	d10c      	bne.n	80054f4 <_svfiprintf_r+0x130>
 80054da:	7863      	ldrb	r3, [r4, #1]
 80054dc:	2b2a      	cmp	r3, #42	; 0x2a
 80054de:	d135      	bne.n	800554c <_svfiprintf_r+0x188>
 80054e0:	9b03      	ldr	r3, [sp, #12]
 80054e2:	3402      	adds	r4, #2
 80054e4:	1d1a      	adds	r2, r3, #4
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	9203      	str	r2, [sp, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bfb8      	it	lt
 80054ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80054f2:	9305      	str	r3, [sp, #20]
 80054f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80055c0 <_svfiprintf_r+0x1fc>
 80054f8:	2203      	movs	r2, #3
 80054fa:	4650      	mov	r0, sl
 80054fc:	7821      	ldrb	r1, [r4, #0]
 80054fe:	f000 f9f7 	bl	80058f0 <memchr>
 8005502:	b140      	cbz	r0, 8005516 <_svfiprintf_r+0x152>
 8005504:	2340      	movs	r3, #64	; 0x40
 8005506:	eba0 000a 	sub.w	r0, r0, sl
 800550a:	fa03 f000 	lsl.w	r0, r3, r0
 800550e:	9b04      	ldr	r3, [sp, #16]
 8005510:	3401      	adds	r4, #1
 8005512:	4303      	orrs	r3, r0
 8005514:	9304      	str	r3, [sp, #16]
 8005516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800551a:	2206      	movs	r2, #6
 800551c:	4825      	ldr	r0, [pc, #148]	; (80055b4 <_svfiprintf_r+0x1f0>)
 800551e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005522:	f000 f9e5 	bl	80058f0 <memchr>
 8005526:	2800      	cmp	r0, #0
 8005528:	d038      	beq.n	800559c <_svfiprintf_r+0x1d8>
 800552a:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <_svfiprintf_r+0x1f4>)
 800552c:	bb1b      	cbnz	r3, 8005576 <_svfiprintf_r+0x1b2>
 800552e:	9b03      	ldr	r3, [sp, #12]
 8005530:	3307      	adds	r3, #7
 8005532:	f023 0307 	bic.w	r3, r3, #7
 8005536:	3308      	adds	r3, #8
 8005538:	9303      	str	r3, [sp, #12]
 800553a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800553c:	4433      	add	r3, r6
 800553e:	9309      	str	r3, [sp, #36]	; 0x24
 8005540:	e767      	b.n	8005412 <_svfiprintf_r+0x4e>
 8005542:	460c      	mov	r4, r1
 8005544:	2001      	movs	r0, #1
 8005546:	fb0c 3202 	mla	r2, ip, r2, r3
 800554a:	e7a5      	b.n	8005498 <_svfiprintf_r+0xd4>
 800554c:	2300      	movs	r3, #0
 800554e:	f04f 0c0a 	mov.w	ip, #10
 8005552:	4619      	mov	r1, r3
 8005554:	3401      	adds	r4, #1
 8005556:	9305      	str	r3, [sp, #20]
 8005558:	4620      	mov	r0, r4
 800555a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800555e:	3a30      	subs	r2, #48	; 0x30
 8005560:	2a09      	cmp	r2, #9
 8005562:	d903      	bls.n	800556c <_svfiprintf_r+0x1a8>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0c5      	beq.n	80054f4 <_svfiprintf_r+0x130>
 8005568:	9105      	str	r1, [sp, #20]
 800556a:	e7c3      	b.n	80054f4 <_svfiprintf_r+0x130>
 800556c:	4604      	mov	r4, r0
 800556e:	2301      	movs	r3, #1
 8005570:	fb0c 2101 	mla	r1, ip, r1, r2
 8005574:	e7f0      	b.n	8005558 <_svfiprintf_r+0x194>
 8005576:	ab03      	add	r3, sp, #12
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	462a      	mov	r2, r5
 800557c:	4638      	mov	r0, r7
 800557e:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <_svfiprintf_r+0x1f8>)
 8005580:	a904      	add	r1, sp, #16
 8005582:	f3af 8000 	nop.w
 8005586:	1c42      	adds	r2, r0, #1
 8005588:	4606      	mov	r6, r0
 800558a:	d1d6      	bne.n	800553a <_svfiprintf_r+0x176>
 800558c:	89ab      	ldrh	r3, [r5, #12]
 800558e:	065b      	lsls	r3, r3, #25
 8005590:	f53f af2c 	bmi.w	80053ec <_svfiprintf_r+0x28>
 8005594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005596:	b01d      	add	sp, #116	; 0x74
 8005598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559c:	ab03      	add	r3, sp, #12
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	462a      	mov	r2, r5
 80055a2:	4638      	mov	r0, r7
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <_svfiprintf_r+0x1f8>)
 80055a6:	a904      	add	r1, sp, #16
 80055a8:	f000 f87c 	bl	80056a4 <_printf_i>
 80055ac:	e7eb      	b.n	8005586 <_svfiprintf_r+0x1c2>
 80055ae:	bf00      	nop
 80055b0:	08005fa0 	.word	0x08005fa0
 80055b4:	08005faa 	.word	0x08005faa
 80055b8:	00000000 	.word	0x00000000
 80055bc:	0800530d 	.word	0x0800530d
 80055c0:	08005fa6 	.word	0x08005fa6

080055c4 <_printf_common>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	4616      	mov	r6, r2
 80055ca:	4699      	mov	r9, r3
 80055cc:	688a      	ldr	r2, [r1, #8]
 80055ce:	690b      	ldr	r3, [r1, #16]
 80055d0:	4607      	mov	r7, r0
 80055d2:	4293      	cmp	r3, r2
 80055d4:	bfb8      	it	lt
 80055d6:	4613      	movlt	r3, r2
 80055d8:	6033      	str	r3, [r6, #0]
 80055da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055de:	460c      	mov	r4, r1
 80055e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055e4:	b10a      	cbz	r2, 80055ea <_printf_common+0x26>
 80055e6:	3301      	adds	r3, #1
 80055e8:	6033      	str	r3, [r6, #0]
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	0699      	lsls	r1, r3, #26
 80055ee:	bf42      	ittt	mi
 80055f0:	6833      	ldrmi	r3, [r6, #0]
 80055f2:	3302      	addmi	r3, #2
 80055f4:	6033      	strmi	r3, [r6, #0]
 80055f6:	6825      	ldr	r5, [r4, #0]
 80055f8:	f015 0506 	ands.w	r5, r5, #6
 80055fc:	d106      	bne.n	800560c <_printf_common+0x48>
 80055fe:	f104 0a19 	add.w	sl, r4, #25
 8005602:	68e3      	ldr	r3, [r4, #12]
 8005604:	6832      	ldr	r2, [r6, #0]
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	42ab      	cmp	r3, r5
 800560a:	dc28      	bgt.n	800565e <_printf_common+0x9a>
 800560c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005610:	1e13      	subs	r3, r2, #0
 8005612:	6822      	ldr	r2, [r4, #0]
 8005614:	bf18      	it	ne
 8005616:	2301      	movne	r3, #1
 8005618:	0692      	lsls	r2, r2, #26
 800561a:	d42d      	bmi.n	8005678 <_printf_common+0xb4>
 800561c:	4649      	mov	r1, r9
 800561e:	4638      	mov	r0, r7
 8005620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005624:	47c0      	blx	r8
 8005626:	3001      	adds	r0, #1
 8005628:	d020      	beq.n	800566c <_printf_common+0xa8>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	68e5      	ldr	r5, [r4, #12]
 800562e:	f003 0306 	and.w	r3, r3, #6
 8005632:	2b04      	cmp	r3, #4
 8005634:	bf18      	it	ne
 8005636:	2500      	movne	r5, #0
 8005638:	6832      	ldr	r2, [r6, #0]
 800563a:	f04f 0600 	mov.w	r6, #0
 800563e:	68a3      	ldr	r3, [r4, #8]
 8005640:	bf08      	it	eq
 8005642:	1aad      	subeq	r5, r5, r2
 8005644:	6922      	ldr	r2, [r4, #16]
 8005646:	bf08      	it	eq
 8005648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800564c:	4293      	cmp	r3, r2
 800564e:	bfc4      	itt	gt
 8005650:	1a9b      	subgt	r3, r3, r2
 8005652:	18ed      	addgt	r5, r5, r3
 8005654:	341a      	adds	r4, #26
 8005656:	42b5      	cmp	r5, r6
 8005658:	d11a      	bne.n	8005690 <_printf_common+0xcc>
 800565a:	2000      	movs	r0, #0
 800565c:	e008      	b.n	8005670 <_printf_common+0xac>
 800565e:	2301      	movs	r3, #1
 8005660:	4652      	mov	r2, sl
 8005662:	4649      	mov	r1, r9
 8005664:	4638      	mov	r0, r7
 8005666:	47c0      	blx	r8
 8005668:	3001      	adds	r0, #1
 800566a:	d103      	bne.n	8005674 <_printf_common+0xb0>
 800566c:	f04f 30ff 	mov.w	r0, #4294967295
 8005670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005674:	3501      	adds	r5, #1
 8005676:	e7c4      	b.n	8005602 <_printf_common+0x3e>
 8005678:	2030      	movs	r0, #48	; 0x30
 800567a:	18e1      	adds	r1, r4, r3
 800567c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005686:	4422      	add	r2, r4
 8005688:	3302      	adds	r3, #2
 800568a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800568e:	e7c5      	b.n	800561c <_printf_common+0x58>
 8005690:	2301      	movs	r3, #1
 8005692:	4622      	mov	r2, r4
 8005694:	4649      	mov	r1, r9
 8005696:	4638      	mov	r0, r7
 8005698:	47c0      	blx	r8
 800569a:	3001      	adds	r0, #1
 800569c:	d0e6      	beq.n	800566c <_printf_common+0xa8>
 800569e:	3601      	adds	r6, #1
 80056a0:	e7d9      	b.n	8005656 <_printf_common+0x92>
	...

080056a4 <_printf_i>:
 80056a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056a8:	460c      	mov	r4, r1
 80056aa:	7e27      	ldrb	r7, [r4, #24]
 80056ac:	4691      	mov	r9, r2
 80056ae:	2f78      	cmp	r7, #120	; 0x78
 80056b0:	4680      	mov	r8, r0
 80056b2:	469a      	mov	sl, r3
 80056b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80056b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056ba:	d807      	bhi.n	80056cc <_printf_i+0x28>
 80056bc:	2f62      	cmp	r7, #98	; 0x62
 80056be:	d80a      	bhi.n	80056d6 <_printf_i+0x32>
 80056c0:	2f00      	cmp	r7, #0
 80056c2:	f000 80d9 	beq.w	8005878 <_printf_i+0x1d4>
 80056c6:	2f58      	cmp	r7, #88	; 0x58
 80056c8:	f000 80a4 	beq.w	8005814 <_printf_i+0x170>
 80056cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056d4:	e03a      	b.n	800574c <_printf_i+0xa8>
 80056d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056da:	2b15      	cmp	r3, #21
 80056dc:	d8f6      	bhi.n	80056cc <_printf_i+0x28>
 80056de:	a001      	add	r0, pc, #4	; (adr r0, 80056e4 <_printf_i+0x40>)
 80056e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80056e4:	0800573d 	.word	0x0800573d
 80056e8:	08005751 	.word	0x08005751
 80056ec:	080056cd 	.word	0x080056cd
 80056f0:	080056cd 	.word	0x080056cd
 80056f4:	080056cd 	.word	0x080056cd
 80056f8:	080056cd 	.word	0x080056cd
 80056fc:	08005751 	.word	0x08005751
 8005700:	080056cd 	.word	0x080056cd
 8005704:	080056cd 	.word	0x080056cd
 8005708:	080056cd 	.word	0x080056cd
 800570c:	080056cd 	.word	0x080056cd
 8005710:	0800585f 	.word	0x0800585f
 8005714:	08005781 	.word	0x08005781
 8005718:	08005841 	.word	0x08005841
 800571c:	080056cd 	.word	0x080056cd
 8005720:	080056cd 	.word	0x080056cd
 8005724:	08005881 	.word	0x08005881
 8005728:	080056cd 	.word	0x080056cd
 800572c:	08005781 	.word	0x08005781
 8005730:	080056cd 	.word	0x080056cd
 8005734:	080056cd 	.word	0x080056cd
 8005738:	08005849 	.word	0x08005849
 800573c:	680b      	ldr	r3, [r1, #0]
 800573e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005742:	1d1a      	adds	r2, r3, #4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	600a      	str	r2, [r1, #0]
 8005748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800574c:	2301      	movs	r3, #1
 800574e:	e0a4      	b.n	800589a <_printf_i+0x1f6>
 8005750:	6825      	ldr	r5, [r4, #0]
 8005752:	6808      	ldr	r0, [r1, #0]
 8005754:	062e      	lsls	r6, r5, #24
 8005756:	f100 0304 	add.w	r3, r0, #4
 800575a:	d50a      	bpl.n	8005772 <_printf_i+0xce>
 800575c:	6805      	ldr	r5, [r0, #0]
 800575e:	600b      	str	r3, [r1, #0]
 8005760:	2d00      	cmp	r5, #0
 8005762:	da03      	bge.n	800576c <_printf_i+0xc8>
 8005764:	232d      	movs	r3, #45	; 0x2d
 8005766:	426d      	negs	r5, r5
 8005768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800576c:	230a      	movs	r3, #10
 800576e:	485e      	ldr	r0, [pc, #376]	; (80058e8 <_printf_i+0x244>)
 8005770:	e019      	b.n	80057a6 <_printf_i+0x102>
 8005772:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005776:	6805      	ldr	r5, [r0, #0]
 8005778:	600b      	str	r3, [r1, #0]
 800577a:	bf18      	it	ne
 800577c:	b22d      	sxthne	r5, r5
 800577e:	e7ef      	b.n	8005760 <_printf_i+0xbc>
 8005780:	680b      	ldr	r3, [r1, #0]
 8005782:	6825      	ldr	r5, [r4, #0]
 8005784:	1d18      	adds	r0, r3, #4
 8005786:	6008      	str	r0, [r1, #0]
 8005788:	0628      	lsls	r0, r5, #24
 800578a:	d501      	bpl.n	8005790 <_printf_i+0xec>
 800578c:	681d      	ldr	r5, [r3, #0]
 800578e:	e002      	b.n	8005796 <_printf_i+0xf2>
 8005790:	0669      	lsls	r1, r5, #25
 8005792:	d5fb      	bpl.n	800578c <_printf_i+0xe8>
 8005794:	881d      	ldrh	r5, [r3, #0]
 8005796:	2f6f      	cmp	r7, #111	; 0x6f
 8005798:	bf0c      	ite	eq
 800579a:	2308      	moveq	r3, #8
 800579c:	230a      	movne	r3, #10
 800579e:	4852      	ldr	r0, [pc, #328]	; (80058e8 <_printf_i+0x244>)
 80057a0:	2100      	movs	r1, #0
 80057a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057a6:	6866      	ldr	r6, [r4, #4]
 80057a8:	2e00      	cmp	r6, #0
 80057aa:	bfa8      	it	ge
 80057ac:	6821      	ldrge	r1, [r4, #0]
 80057ae:	60a6      	str	r6, [r4, #8]
 80057b0:	bfa4      	itt	ge
 80057b2:	f021 0104 	bicge.w	r1, r1, #4
 80057b6:	6021      	strge	r1, [r4, #0]
 80057b8:	b90d      	cbnz	r5, 80057be <_printf_i+0x11a>
 80057ba:	2e00      	cmp	r6, #0
 80057bc:	d04d      	beq.n	800585a <_printf_i+0x1b6>
 80057be:	4616      	mov	r6, r2
 80057c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80057c4:	fb03 5711 	mls	r7, r3, r1, r5
 80057c8:	5dc7      	ldrb	r7, [r0, r7]
 80057ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057ce:	462f      	mov	r7, r5
 80057d0:	42bb      	cmp	r3, r7
 80057d2:	460d      	mov	r5, r1
 80057d4:	d9f4      	bls.n	80057c0 <_printf_i+0x11c>
 80057d6:	2b08      	cmp	r3, #8
 80057d8:	d10b      	bne.n	80057f2 <_printf_i+0x14e>
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	07df      	lsls	r7, r3, #31
 80057de:	d508      	bpl.n	80057f2 <_printf_i+0x14e>
 80057e0:	6923      	ldr	r3, [r4, #16]
 80057e2:	6861      	ldr	r1, [r4, #4]
 80057e4:	4299      	cmp	r1, r3
 80057e6:	bfde      	ittt	le
 80057e8:	2330      	movle	r3, #48	; 0x30
 80057ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057f2:	1b92      	subs	r2, r2, r6
 80057f4:	6122      	str	r2, [r4, #16]
 80057f6:	464b      	mov	r3, r9
 80057f8:	4621      	mov	r1, r4
 80057fa:	4640      	mov	r0, r8
 80057fc:	f8cd a000 	str.w	sl, [sp]
 8005800:	aa03      	add	r2, sp, #12
 8005802:	f7ff fedf 	bl	80055c4 <_printf_common>
 8005806:	3001      	adds	r0, #1
 8005808:	d14c      	bne.n	80058a4 <_printf_i+0x200>
 800580a:	f04f 30ff 	mov.w	r0, #4294967295
 800580e:	b004      	add	sp, #16
 8005810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005814:	4834      	ldr	r0, [pc, #208]	; (80058e8 <_printf_i+0x244>)
 8005816:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800581a:	680e      	ldr	r6, [r1, #0]
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005822:	061f      	lsls	r7, r3, #24
 8005824:	600e      	str	r6, [r1, #0]
 8005826:	d514      	bpl.n	8005852 <_printf_i+0x1ae>
 8005828:	07d9      	lsls	r1, r3, #31
 800582a:	bf44      	itt	mi
 800582c:	f043 0320 	orrmi.w	r3, r3, #32
 8005830:	6023      	strmi	r3, [r4, #0]
 8005832:	b91d      	cbnz	r5, 800583c <_printf_i+0x198>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	f023 0320 	bic.w	r3, r3, #32
 800583a:	6023      	str	r3, [r4, #0]
 800583c:	2310      	movs	r3, #16
 800583e:	e7af      	b.n	80057a0 <_printf_i+0xfc>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	f043 0320 	orr.w	r3, r3, #32
 8005846:	6023      	str	r3, [r4, #0]
 8005848:	2378      	movs	r3, #120	; 0x78
 800584a:	4828      	ldr	r0, [pc, #160]	; (80058ec <_printf_i+0x248>)
 800584c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005850:	e7e3      	b.n	800581a <_printf_i+0x176>
 8005852:	065e      	lsls	r6, r3, #25
 8005854:	bf48      	it	mi
 8005856:	b2ad      	uxthmi	r5, r5
 8005858:	e7e6      	b.n	8005828 <_printf_i+0x184>
 800585a:	4616      	mov	r6, r2
 800585c:	e7bb      	b.n	80057d6 <_printf_i+0x132>
 800585e:	680b      	ldr	r3, [r1, #0]
 8005860:	6826      	ldr	r6, [r4, #0]
 8005862:	1d1d      	adds	r5, r3, #4
 8005864:	6960      	ldr	r0, [r4, #20]
 8005866:	600d      	str	r5, [r1, #0]
 8005868:	0635      	lsls	r5, r6, #24
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	d501      	bpl.n	8005872 <_printf_i+0x1ce>
 800586e:	6018      	str	r0, [r3, #0]
 8005870:	e002      	b.n	8005878 <_printf_i+0x1d4>
 8005872:	0671      	lsls	r1, r6, #25
 8005874:	d5fb      	bpl.n	800586e <_printf_i+0x1ca>
 8005876:	8018      	strh	r0, [r3, #0]
 8005878:	2300      	movs	r3, #0
 800587a:	4616      	mov	r6, r2
 800587c:	6123      	str	r3, [r4, #16]
 800587e:	e7ba      	b.n	80057f6 <_printf_i+0x152>
 8005880:	680b      	ldr	r3, [r1, #0]
 8005882:	1d1a      	adds	r2, r3, #4
 8005884:	600a      	str	r2, [r1, #0]
 8005886:	681e      	ldr	r6, [r3, #0]
 8005888:	2100      	movs	r1, #0
 800588a:	4630      	mov	r0, r6
 800588c:	6862      	ldr	r2, [r4, #4]
 800588e:	f000 f82f 	bl	80058f0 <memchr>
 8005892:	b108      	cbz	r0, 8005898 <_printf_i+0x1f4>
 8005894:	1b80      	subs	r0, r0, r6
 8005896:	6060      	str	r0, [r4, #4]
 8005898:	6863      	ldr	r3, [r4, #4]
 800589a:	6123      	str	r3, [r4, #16]
 800589c:	2300      	movs	r3, #0
 800589e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a2:	e7a8      	b.n	80057f6 <_printf_i+0x152>
 80058a4:	4632      	mov	r2, r6
 80058a6:	4649      	mov	r1, r9
 80058a8:	4640      	mov	r0, r8
 80058aa:	6923      	ldr	r3, [r4, #16]
 80058ac:	47d0      	blx	sl
 80058ae:	3001      	adds	r0, #1
 80058b0:	d0ab      	beq.n	800580a <_printf_i+0x166>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	079b      	lsls	r3, r3, #30
 80058b6:	d413      	bmi.n	80058e0 <_printf_i+0x23c>
 80058b8:	68e0      	ldr	r0, [r4, #12]
 80058ba:	9b03      	ldr	r3, [sp, #12]
 80058bc:	4298      	cmp	r0, r3
 80058be:	bfb8      	it	lt
 80058c0:	4618      	movlt	r0, r3
 80058c2:	e7a4      	b.n	800580e <_printf_i+0x16a>
 80058c4:	2301      	movs	r3, #1
 80058c6:	4632      	mov	r2, r6
 80058c8:	4649      	mov	r1, r9
 80058ca:	4640      	mov	r0, r8
 80058cc:	47d0      	blx	sl
 80058ce:	3001      	adds	r0, #1
 80058d0:	d09b      	beq.n	800580a <_printf_i+0x166>
 80058d2:	3501      	adds	r5, #1
 80058d4:	68e3      	ldr	r3, [r4, #12]
 80058d6:	9903      	ldr	r1, [sp, #12]
 80058d8:	1a5b      	subs	r3, r3, r1
 80058da:	42ab      	cmp	r3, r5
 80058dc:	dcf2      	bgt.n	80058c4 <_printf_i+0x220>
 80058de:	e7eb      	b.n	80058b8 <_printf_i+0x214>
 80058e0:	2500      	movs	r5, #0
 80058e2:	f104 0619 	add.w	r6, r4, #25
 80058e6:	e7f5      	b.n	80058d4 <_printf_i+0x230>
 80058e8:	08005fb1 	.word	0x08005fb1
 80058ec:	08005fc2 	.word	0x08005fc2

080058f0 <memchr>:
 80058f0:	4603      	mov	r3, r0
 80058f2:	b510      	push	{r4, lr}
 80058f4:	b2c9      	uxtb	r1, r1
 80058f6:	4402      	add	r2, r0
 80058f8:	4293      	cmp	r3, r2
 80058fa:	4618      	mov	r0, r3
 80058fc:	d101      	bne.n	8005902 <memchr+0x12>
 80058fe:	2000      	movs	r0, #0
 8005900:	e003      	b.n	800590a <memchr+0x1a>
 8005902:	7804      	ldrb	r4, [r0, #0]
 8005904:	3301      	adds	r3, #1
 8005906:	428c      	cmp	r4, r1
 8005908:	d1f6      	bne.n	80058f8 <memchr+0x8>
 800590a:	bd10      	pop	{r4, pc}

0800590c <memmove>:
 800590c:	4288      	cmp	r0, r1
 800590e:	b510      	push	{r4, lr}
 8005910:	eb01 0402 	add.w	r4, r1, r2
 8005914:	d902      	bls.n	800591c <memmove+0x10>
 8005916:	4284      	cmp	r4, r0
 8005918:	4623      	mov	r3, r4
 800591a:	d807      	bhi.n	800592c <memmove+0x20>
 800591c:	1e43      	subs	r3, r0, #1
 800591e:	42a1      	cmp	r1, r4
 8005920:	d008      	beq.n	8005934 <memmove+0x28>
 8005922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005926:	f803 2f01 	strb.w	r2, [r3, #1]!
 800592a:	e7f8      	b.n	800591e <memmove+0x12>
 800592c:	4601      	mov	r1, r0
 800592e:	4402      	add	r2, r0
 8005930:	428a      	cmp	r2, r1
 8005932:	d100      	bne.n	8005936 <memmove+0x2a>
 8005934:	bd10      	pop	{r4, pc}
 8005936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800593a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800593e:	e7f7      	b.n	8005930 <memmove+0x24>

08005940 <_free_r>:
 8005940:	b538      	push	{r3, r4, r5, lr}
 8005942:	4605      	mov	r5, r0
 8005944:	2900      	cmp	r1, #0
 8005946:	d043      	beq.n	80059d0 <_free_r+0x90>
 8005948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800594c:	1f0c      	subs	r4, r1, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	bfb8      	it	lt
 8005952:	18e4      	addlt	r4, r4, r3
 8005954:	f000 f8d0 	bl	8005af8 <__malloc_lock>
 8005958:	4a1e      	ldr	r2, [pc, #120]	; (80059d4 <_free_r+0x94>)
 800595a:	6813      	ldr	r3, [r2, #0]
 800595c:	4610      	mov	r0, r2
 800595e:	b933      	cbnz	r3, 800596e <_free_r+0x2e>
 8005960:	6063      	str	r3, [r4, #4]
 8005962:	6014      	str	r4, [r2, #0]
 8005964:	4628      	mov	r0, r5
 8005966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800596a:	f000 b8cb 	b.w	8005b04 <__malloc_unlock>
 800596e:	42a3      	cmp	r3, r4
 8005970:	d90a      	bls.n	8005988 <_free_r+0x48>
 8005972:	6821      	ldr	r1, [r4, #0]
 8005974:	1862      	adds	r2, r4, r1
 8005976:	4293      	cmp	r3, r2
 8005978:	bf01      	itttt	eq
 800597a:	681a      	ldreq	r2, [r3, #0]
 800597c:	685b      	ldreq	r3, [r3, #4]
 800597e:	1852      	addeq	r2, r2, r1
 8005980:	6022      	streq	r2, [r4, #0]
 8005982:	6063      	str	r3, [r4, #4]
 8005984:	6004      	str	r4, [r0, #0]
 8005986:	e7ed      	b.n	8005964 <_free_r+0x24>
 8005988:	461a      	mov	r2, r3
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	b10b      	cbz	r3, 8005992 <_free_r+0x52>
 800598e:	42a3      	cmp	r3, r4
 8005990:	d9fa      	bls.n	8005988 <_free_r+0x48>
 8005992:	6811      	ldr	r1, [r2, #0]
 8005994:	1850      	adds	r0, r2, r1
 8005996:	42a0      	cmp	r0, r4
 8005998:	d10b      	bne.n	80059b2 <_free_r+0x72>
 800599a:	6820      	ldr	r0, [r4, #0]
 800599c:	4401      	add	r1, r0
 800599e:	1850      	adds	r0, r2, r1
 80059a0:	4283      	cmp	r3, r0
 80059a2:	6011      	str	r1, [r2, #0]
 80059a4:	d1de      	bne.n	8005964 <_free_r+0x24>
 80059a6:	6818      	ldr	r0, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	4401      	add	r1, r0
 80059ac:	6011      	str	r1, [r2, #0]
 80059ae:	6053      	str	r3, [r2, #4]
 80059b0:	e7d8      	b.n	8005964 <_free_r+0x24>
 80059b2:	d902      	bls.n	80059ba <_free_r+0x7a>
 80059b4:	230c      	movs	r3, #12
 80059b6:	602b      	str	r3, [r5, #0]
 80059b8:	e7d4      	b.n	8005964 <_free_r+0x24>
 80059ba:	6820      	ldr	r0, [r4, #0]
 80059bc:	1821      	adds	r1, r4, r0
 80059be:	428b      	cmp	r3, r1
 80059c0:	bf01      	itttt	eq
 80059c2:	6819      	ldreq	r1, [r3, #0]
 80059c4:	685b      	ldreq	r3, [r3, #4]
 80059c6:	1809      	addeq	r1, r1, r0
 80059c8:	6021      	streq	r1, [r4, #0]
 80059ca:	6063      	str	r3, [r4, #4]
 80059cc:	6054      	str	r4, [r2, #4]
 80059ce:	e7c9      	b.n	8005964 <_free_r+0x24>
 80059d0:	bd38      	pop	{r3, r4, r5, pc}
 80059d2:	bf00      	nop
 80059d4:	200001dc 	.word	0x200001dc

080059d8 <_malloc_r>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	1ccd      	adds	r5, r1, #3
 80059dc:	f025 0503 	bic.w	r5, r5, #3
 80059e0:	3508      	adds	r5, #8
 80059e2:	2d0c      	cmp	r5, #12
 80059e4:	bf38      	it	cc
 80059e6:	250c      	movcc	r5, #12
 80059e8:	2d00      	cmp	r5, #0
 80059ea:	4606      	mov	r6, r0
 80059ec:	db01      	blt.n	80059f2 <_malloc_r+0x1a>
 80059ee:	42a9      	cmp	r1, r5
 80059f0:	d903      	bls.n	80059fa <_malloc_r+0x22>
 80059f2:	230c      	movs	r3, #12
 80059f4:	6033      	str	r3, [r6, #0]
 80059f6:	2000      	movs	r0, #0
 80059f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059fa:	f000 f87d 	bl	8005af8 <__malloc_lock>
 80059fe:	4921      	ldr	r1, [pc, #132]	; (8005a84 <_malloc_r+0xac>)
 8005a00:	680a      	ldr	r2, [r1, #0]
 8005a02:	4614      	mov	r4, r2
 8005a04:	b99c      	cbnz	r4, 8005a2e <_malloc_r+0x56>
 8005a06:	4f20      	ldr	r7, [pc, #128]	; (8005a88 <_malloc_r+0xb0>)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	b923      	cbnz	r3, 8005a16 <_malloc_r+0x3e>
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f000 f862 	bl	8005ad8 <_sbrk_r>
 8005a14:	6038      	str	r0, [r7, #0]
 8005a16:	4629      	mov	r1, r5
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f000 f85d 	bl	8005ad8 <_sbrk_r>
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	d123      	bne.n	8005a6a <_malloc_r+0x92>
 8005a22:	230c      	movs	r3, #12
 8005a24:	4630      	mov	r0, r6
 8005a26:	6033      	str	r3, [r6, #0]
 8005a28:	f000 f86c 	bl	8005b04 <__malloc_unlock>
 8005a2c:	e7e3      	b.n	80059f6 <_malloc_r+0x1e>
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	1b5b      	subs	r3, r3, r5
 8005a32:	d417      	bmi.n	8005a64 <_malloc_r+0x8c>
 8005a34:	2b0b      	cmp	r3, #11
 8005a36:	d903      	bls.n	8005a40 <_malloc_r+0x68>
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	441c      	add	r4, r3
 8005a3c:	6025      	str	r5, [r4, #0]
 8005a3e:	e004      	b.n	8005a4a <_malloc_r+0x72>
 8005a40:	6863      	ldr	r3, [r4, #4]
 8005a42:	42a2      	cmp	r2, r4
 8005a44:	bf0c      	ite	eq
 8005a46:	600b      	streq	r3, [r1, #0]
 8005a48:	6053      	strne	r3, [r2, #4]
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f000 f85a 	bl	8005b04 <__malloc_unlock>
 8005a50:	f104 000b 	add.w	r0, r4, #11
 8005a54:	1d23      	adds	r3, r4, #4
 8005a56:	f020 0007 	bic.w	r0, r0, #7
 8005a5a:	1ac2      	subs	r2, r0, r3
 8005a5c:	d0cc      	beq.n	80059f8 <_malloc_r+0x20>
 8005a5e:	1a1b      	subs	r3, r3, r0
 8005a60:	50a3      	str	r3, [r4, r2]
 8005a62:	e7c9      	b.n	80059f8 <_malloc_r+0x20>
 8005a64:	4622      	mov	r2, r4
 8005a66:	6864      	ldr	r4, [r4, #4]
 8005a68:	e7cc      	b.n	8005a04 <_malloc_r+0x2c>
 8005a6a:	1cc4      	adds	r4, r0, #3
 8005a6c:	f024 0403 	bic.w	r4, r4, #3
 8005a70:	42a0      	cmp	r0, r4
 8005a72:	d0e3      	beq.n	8005a3c <_malloc_r+0x64>
 8005a74:	1a21      	subs	r1, r4, r0
 8005a76:	4630      	mov	r0, r6
 8005a78:	f000 f82e 	bl	8005ad8 <_sbrk_r>
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	d1dd      	bne.n	8005a3c <_malloc_r+0x64>
 8005a80:	e7cf      	b.n	8005a22 <_malloc_r+0x4a>
 8005a82:	bf00      	nop
 8005a84:	200001dc 	.word	0x200001dc
 8005a88:	200001e0 	.word	0x200001e0

08005a8c <_realloc_r>:
 8005a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8e:	4607      	mov	r7, r0
 8005a90:	4614      	mov	r4, r2
 8005a92:	460e      	mov	r6, r1
 8005a94:	b921      	cbnz	r1, 8005aa0 <_realloc_r+0x14>
 8005a96:	4611      	mov	r1, r2
 8005a98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a9c:	f7ff bf9c 	b.w	80059d8 <_malloc_r>
 8005aa0:	b922      	cbnz	r2, 8005aac <_realloc_r+0x20>
 8005aa2:	f7ff ff4d 	bl	8005940 <_free_r>
 8005aa6:	4625      	mov	r5, r4
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aac:	f000 f830 	bl	8005b10 <_malloc_usable_size_r>
 8005ab0:	42a0      	cmp	r0, r4
 8005ab2:	d20f      	bcs.n	8005ad4 <_realloc_r+0x48>
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	f7ff ff8e 	bl	80059d8 <_malloc_r>
 8005abc:	4605      	mov	r5, r0
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d0f2      	beq.n	8005aa8 <_realloc_r+0x1c>
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	f7ff fbe3 	bl	8005290 <memcpy>
 8005aca:	4631      	mov	r1, r6
 8005acc:	4638      	mov	r0, r7
 8005ace:	f7ff ff37 	bl	8005940 <_free_r>
 8005ad2:	e7e9      	b.n	8005aa8 <_realloc_r+0x1c>
 8005ad4:	4635      	mov	r5, r6
 8005ad6:	e7e7      	b.n	8005aa8 <_realloc_r+0x1c>

08005ad8 <_sbrk_r>:
 8005ad8:	b538      	push	{r3, r4, r5, lr}
 8005ada:	2300      	movs	r3, #0
 8005adc:	4d05      	ldr	r5, [pc, #20]	; (8005af4 <_sbrk_r+0x1c>)
 8005ade:	4604      	mov	r4, r0
 8005ae0:	4608      	mov	r0, r1
 8005ae2:	602b      	str	r3, [r5, #0]
 8005ae4:	f7fb fb4a 	bl	800117c <_sbrk>
 8005ae8:	1c43      	adds	r3, r0, #1
 8005aea:	d102      	bne.n	8005af2 <_sbrk_r+0x1a>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	b103      	cbz	r3, 8005af2 <_sbrk_r+0x1a>
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	20000314 	.word	0x20000314

08005af8 <__malloc_lock>:
 8005af8:	4801      	ldr	r0, [pc, #4]	; (8005b00 <__malloc_lock+0x8>)
 8005afa:	f000 b811 	b.w	8005b20 <__retarget_lock_acquire_recursive>
 8005afe:	bf00      	nop
 8005b00:	2000031c 	.word	0x2000031c

08005b04 <__malloc_unlock>:
 8005b04:	4801      	ldr	r0, [pc, #4]	; (8005b0c <__malloc_unlock+0x8>)
 8005b06:	f000 b80c 	b.w	8005b22 <__retarget_lock_release_recursive>
 8005b0a:	bf00      	nop
 8005b0c:	2000031c 	.word	0x2000031c

08005b10 <_malloc_usable_size_r>:
 8005b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b14:	1f18      	subs	r0, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bfbc      	itt	lt
 8005b1a:	580b      	ldrlt	r3, [r1, r0]
 8005b1c:	18c0      	addlt	r0, r0, r3
 8005b1e:	4770      	bx	lr

08005b20 <__retarget_lock_acquire_recursive>:
 8005b20:	4770      	bx	lr

08005b22 <__retarget_lock_release_recursive>:
 8005b22:	4770      	bx	lr

08005b24 <_init>:
 8005b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b26:	bf00      	nop
 8005b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2a:	bc08      	pop	{r3}
 8005b2c:	469e      	mov	lr, r3
 8005b2e:	4770      	bx	lr

08005b30 <_fini>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	bf00      	nop
 8005b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b36:	bc08      	pop	{r3}
 8005b38:	469e      	mov	lr, r3
 8005b3a:	4770      	bx	lr
