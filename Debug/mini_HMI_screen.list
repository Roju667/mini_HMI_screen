
mini_HMI_screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005874  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e10  08005e10  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08005e10  08005e10  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e10  08005e10  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000084  08005e9c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08005e9c  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e46  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ee  00000000  00000000  00030ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00033fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  00034c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a01  00000000  00000000  000357e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8db  00000000  00000000  0004e1e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084434  00000000  00000000  0005dabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1ef0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a0  00000000  00000000  000e1f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08005968 	.word	0x08005968

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08005968 	.word	0x08005968

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <set_button_flag>:
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	2b80      	cmp	r3, #128	; 0x80
 800016a:	d01e      	beq.n	80001aa <set_button_flag+0x4e>
 800016c:	2b80      	cmp	r3, #128	; 0x80
 800016e:	dc20      	bgt.n	80001b2 <set_button_flag+0x56>
 8000170:	2b40      	cmp	r3, #64	; 0x40
 8000172:	d016      	beq.n	80001a2 <set_button_flag+0x46>
 8000174:	2b40      	cmp	r3, #64	; 0x40
 8000176:	dc1c      	bgt.n	80001b2 <set_button_flag+0x56>
 8000178:	2b20      	cmp	r3, #32
 800017a:	d00e      	beq.n	800019a <set_button_flag+0x3e>
 800017c:	2b20      	cmp	r3, #32
 800017e:	dc18      	bgt.n	80001b2 <set_button_flag+0x56>
 8000180:	2b08      	cmp	r3, #8
 8000182:	d002      	beq.n	800018a <set_button_flag+0x2e>
 8000184:	2b10      	cmp	r3, #16
 8000186:	d004      	beq.n	8000192 <set_button_flag+0x36>
 8000188:	e013      	b.n	80001b2 <set_button_flag+0x56>
 800018a:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <set_button_flag+0x64>)
 800018c:	2201      	movs	r2, #1
 800018e:	701a      	strb	r2, [r3, #0]
 8000190:	e010      	b.n	80001b4 <set_button_flag+0x58>
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <set_button_flag+0x64>)
 8000194:	2201      	movs	r2, #1
 8000196:	705a      	strb	r2, [r3, #1]
 8000198:	e00c      	b.n	80001b4 <set_button_flag+0x58>
 800019a:	4b09      	ldr	r3, [pc, #36]	; (80001c0 <set_button_flag+0x64>)
 800019c:	2201      	movs	r2, #1
 800019e:	709a      	strb	r2, [r3, #2]
 80001a0:	e008      	b.n	80001b4 <set_button_flag+0x58>
 80001a2:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <set_button_flag+0x64>)
 80001a4:	2201      	movs	r2, #1
 80001a6:	70da      	strb	r2, [r3, #3]
 80001a8:	e004      	b.n	80001b4 <set_button_flag+0x58>
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <set_button_flag+0x64>)
 80001ac:	2201      	movs	r2, #1
 80001ae:	711a      	strb	r2, [r3, #4]
 80001b0:	e000      	b.n	80001b4 <set_button_flag+0x58>
 80001b2:	bf00      	nop
 80001b4:	bf00      	nop
 80001b6:	370c      	adds	r7, #12
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	200000a0 	.word	0x200000a0

080001c4 <buttons_get_pending_flag>:
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	2300      	movs	r3, #0
 80001cc:	71fb      	strb	r3, [r7, #7]
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <buttons_get_pending_flag+0x64>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d002      	beq.n	80001de <buttons_get_pending_flag+0x1a>
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
 80001dc:	e01e      	b.n	800021c <buttons_get_pending_flag+0x58>
 80001de:	4b12      	ldr	r3, [pc, #72]	; (8000228 <buttons_get_pending_flag+0x64>)
 80001e0:	785b      	ldrb	r3, [r3, #1]
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <buttons_get_pending_flag+0x2a>
 80001e8:	2302      	movs	r3, #2
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e016      	b.n	800021c <buttons_get_pending_flag+0x58>
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <buttons_get_pending_flag+0x64>)
 80001f0:	789b      	ldrb	r3, [r3, #2]
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d002      	beq.n	80001fe <buttons_get_pending_flag+0x3a>
 80001f8:	2303      	movs	r3, #3
 80001fa:	71fb      	strb	r3, [r7, #7]
 80001fc:	e00e      	b.n	800021c <buttons_get_pending_flag+0x58>
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <buttons_get_pending_flag+0x64>)
 8000200:	78db      	ldrb	r3, [r3, #3]
 8000202:	b2db      	uxtb	r3, r3
 8000204:	2b00      	cmp	r3, #0
 8000206:	d002      	beq.n	800020e <buttons_get_pending_flag+0x4a>
 8000208:	2304      	movs	r3, #4
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	e006      	b.n	800021c <buttons_get_pending_flag+0x58>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <buttons_get_pending_flag+0x64>)
 8000210:	791b      	ldrb	r3, [r3, #4]
 8000212:	b2db      	uxtb	r3, r3
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <buttons_get_pending_flag+0x58>
 8000218:	2305      	movs	r3, #5
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	4618      	mov	r0, r3
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	200000a0 	.word	0x200000a0

0800022c <buttons_reset_flag>:
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	3b01      	subs	r3, #1
 800023a:	2b04      	cmp	r3, #4
 800023c:	d820      	bhi.n	8000280 <buttons_reset_flag+0x54>
 800023e:	a201      	add	r2, pc, #4	; (adr r2, 8000244 <buttons_reset_flag+0x18>)
 8000240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000244:	08000259 	.word	0x08000259
 8000248:	08000261 	.word	0x08000261
 800024c:	08000269 	.word	0x08000269
 8000250:	08000271 	.word	0x08000271
 8000254:	08000279 	.word	0x08000279
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <buttons_reset_flag+0x60>)
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]
 800025e:	e010      	b.n	8000282 <buttons_reset_flag+0x56>
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <buttons_reset_flag+0x60>)
 8000262:	2200      	movs	r2, #0
 8000264:	705a      	strb	r2, [r3, #1]
 8000266:	e00c      	b.n	8000282 <buttons_reset_flag+0x56>
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <buttons_reset_flag+0x60>)
 800026a:	2200      	movs	r2, #0
 800026c:	709a      	strb	r2, [r3, #2]
 800026e:	e008      	b.n	8000282 <buttons_reset_flag+0x56>
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <buttons_reset_flag+0x60>)
 8000272:	2200      	movs	r2, #0
 8000274:	70da      	strb	r2, [r3, #3]
 8000276:	e004      	b.n	8000282 <buttons_reset_flag+0x56>
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <buttons_reset_flag+0x60>)
 800027a:	2200      	movs	r2, #0
 800027c:	711a      	strb	r2, [r3, #4]
 800027e:	e000      	b.n	8000282 <buttons_reset_flag+0x56>
 8000280:	bf00      	nop
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	200000a0 	.word	0x200000a0

08000290 <HAL_GPIO_EXTI_Callback>:
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
 800029a:	88fb      	ldrh	r3, [r7, #6]
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ff5d 	bl	800015c <set_button_flag>
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <GFX_SetFont>:
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	4a03      	ldr	r2, [pc, #12]	; (80002c4 <GFX_SetFont+0x18>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	6013      	str	r3, [r2, #0]
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	200001bc 	.word	0x200001bc

080002c8 <GFX_DrawChar>:
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b089      	sub	sp, #36	; 0x24
 80002cc:	af02      	add	r7, sp, #8
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	4611      	mov	r1, r2
 80002d4:	461a      	mov	r2, r3
 80002d6:	460b      	mov	r3, r1
 80002d8:	71fb      	strb	r3, [r7, #7]
 80002da:	4613      	mov	r3, r2
 80002dc:	80bb      	strh	r3, [r7, #4]
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	2b7e      	cmp	r3, #126	; 0x7e
 80002e2:	d867      	bhi.n	80003b4 <GFX_DrawChar+0xec>
 80002e4:	2300      	movs	r3, #0
 80002e6:	75fb      	strb	r3, [r7, #23]
 80002e8:	e05c      	b.n	80003a4 <GFX_DrawChar+0xdc>
 80002ea:	4b34      	ldr	r3, [pc, #208]	; (80003bc <GFX_DrawChar+0xf4>)
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	3b20      	subs	r3, #32
 80002f2:	4932      	ldr	r1, [pc, #200]	; (80003bc <GFX_DrawChar+0xf4>)
 80002f4:	6809      	ldr	r1, [r1, #0]
 80002f6:	3101      	adds	r1, #1
 80002f8:	7809      	ldrb	r1, [r1, #0]
 80002fa:	fb01 f103 	mul.w	r1, r1, r3
 80002fe:	7dfb      	ldrb	r3, [r7, #23]
 8000300:	440b      	add	r3, r1
 8000302:	3302      	adds	r3, #2
 8000304:	4413      	add	r3, r2
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	75bb      	strb	r3, [r7, #22]
 800030a:	2300      	movs	r3, #0
 800030c:	757b      	strb	r3, [r7, #21]
 800030e:	e03f      	b.n	8000390 <GFX_DrawChar+0xc8>
 8000310:	7dbb      	ldrb	r3, [r7, #22]
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	2b00      	cmp	r3, #0
 8000318:	d031      	beq.n	800037e <GFX_DrawChar+0xb6>
 800031a:	4b29      	ldr	r3, [pc, #164]	; (80003c0 <GFX_DrawChar+0xf8>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d113      	bne.n	800034a <GFX_DrawChar+0x82>
 8000322:	7dfb      	ldrb	r3, [r7, #23]
 8000324:	b29a      	uxth	r2, r3
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	b29b      	uxth	r3, r3
 800032a:	4413      	add	r3, r2
 800032c:	b29b      	uxth	r3, r3
 800032e:	b218      	sxth	r0, r3
 8000330:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000334:	b29a      	uxth	r2, r3
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	b29b      	uxth	r3, r3
 800033a:	4413      	add	r3, r2
 800033c:	b29b      	uxth	r3, r3
 800033e:	b21b      	sxth	r3, r3
 8000340:	88ba      	ldrh	r2, [r7, #4]
 8000342:	4619      	mov	r1, r3
 8000344:	f000 fc10 	bl	8000b68 <ILI9341_WritePixel>
 8000348:	e019      	b.n	800037e <GFX_DrawChar+0xb6>
 800034a:	7dfb      	ldrb	r3, [r7, #23]
 800034c:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <GFX_DrawChar+0xf8>)
 800034e:	7812      	ldrb	r2, [r2, #0]
 8000350:	fb02 f203 	mul.w	r2, r2, r3
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	18d0      	adds	r0, r2, r3
 8000358:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800035c:	4a18      	ldr	r2, [pc, #96]	; (80003c0 <GFX_DrawChar+0xf8>)
 800035e:	7812      	ldrb	r2, [r2, #0]
 8000360:	fb02 f203 	mul.w	r2, r2, r3
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	18d1      	adds	r1, r2, r3
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <GFX_DrawChar+0xf8>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b29a      	uxth	r2, r3
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <GFX_DrawChar+0xf8>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	b29c      	uxth	r4, r3
 8000374:	88bb      	ldrh	r3, [r7, #4]
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	4623      	mov	r3, r4
 800037a:	f000 f97f 	bl	800067c <GFX_DrawFillRectangle>
 800037e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	3301      	adds	r3, #1
 8000386:	b2db      	uxtb	r3, r3
 8000388:	757b      	strb	r3, [r7, #21]
 800038a:	7dbb      	ldrb	r3, [r7, #22]
 800038c:	085b      	lsrs	r3, r3, #1
 800038e:	75bb      	strb	r3, [r7, #22]
 8000390:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000394:	4a09      	ldr	r2, [pc, #36]	; (80003bc <GFX_DrawChar+0xf4>)
 8000396:	6812      	ldr	r2, [r2, #0]
 8000398:	7812      	ldrb	r2, [r2, #0]
 800039a:	4293      	cmp	r3, r2
 800039c:	dbb8      	blt.n	8000310 <GFX_DrawChar+0x48>
 800039e:	7dfb      	ldrb	r3, [r7, #23]
 80003a0:	3301      	adds	r3, #1
 80003a2:	75fb      	strb	r3, [r7, #23]
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <GFX_DrawChar+0xf4>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	3301      	adds	r3, #1
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	7dfa      	ldrb	r2, [r7, #23]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d39b      	bcc.n	80002ea <GFX_DrawChar+0x22>
 80003b2:	e000      	b.n	80003b6 <GFX_DrawChar+0xee>
 80003b4:	bf00      	nop
 80003b6:	371c      	adds	r7, #28
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd90      	pop	{r4, r7, pc}
 80003bc:	200001bc 	.word	0x200001bc
 80003c0:	20000000 	.word	0x20000000

080003c4 <GFX_DrawString>:
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
 80003d0:	807b      	strh	r3, [r7, #2]
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	617b      	str	r3, [r7, #20]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	74fb      	strb	r3, [r7, #19]
 80003dc:	e015      	b.n	800040a <GFX_DrawString+0x46>
 80003de:	887b      	ldrh	r3, [r7, #2]
 80003e0:	7cfa      	ldrb	r2, [r7, #19]
 80003e2:	68b9      	ldr	r1, [r7, #8]
 80003e4:	6978      	ldr	r0, [r7, #20]
 80003e6:	f7ff ff6f 	bl	80002c8 <GFX_DrawChar>
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <GFX_DrawString+0x5c>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	3301      	adds	r3, #1
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	461a      	mov	r2, r3
 80003f4:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <GFX_DrawString+0x60>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	fb03 f302 	mul.w	r3, r3, r2
 80003fc:	3301      	adds	r3, #1
 80003fe:	697a      	ldr	r2, [r7, #20]
 8000400:	4413      	add	r3, r2
 8000402:	617b      	str	r3, [r7, #20]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	74fb      	strb	r3, [r7, #19]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	607a      	str	r2, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1e3      	bne.n	80003de <GFX_DrawString+0x1a>
 8000416:	bf00      	nop
 8000418:	bf00      	nop
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	200001bc 	.word	0x200001bc
 8000424:	20000000 	.word	0x20000000

08000428 <GFX_WriteLine>:
 8000428:	b580      	push	{r7, lr}
 800042a:	b08c      	sub	sp, #48	; 0x30
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
 8000434:	603b      	str	r3, [r7, #0]
 8000436:	683a      	ldr	r2, [r7, #0]
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	1ad3      	subs	r3, r2, r3
 800043c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000440:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	1acb      	subs	r3, r1, r3
 800044a:	2b00      	cmp	r3, #0
 800044c:	bfb8      	it	lt
 800044e:	425b      	neglt	r3, r3
 8000450:	429a      	cmp	r2, r3
 8000452:	bfcc      	ite	gt
 8000454:	2301      	movgt	r3, #1
 8000456:	2300      	movle	r3, #0
 8000458:	b2db      	uxtb	r3, r3
 800045a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800045c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000460:	2b00      	cmp	r3, #0
 8000462:	d00b      	beq.n	800047c <GFX_WriteLine+0x54>
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	627b      	str	r3, [r7, #36]	; 0x24
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	623b      	str	r3, [r7, #32]
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	6a3b      	ldr	r3, [r7, #32]
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	68fa      	ldr	r2, [r7, #12]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	429a      	cmp	r2, r3
 8000482:	dd0b      	ble.n	800049c <GFX_WriteLine+0x74>
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	61fb      	str	r3, [r7, #28]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	69fb      	ldr	r3, [r7, #28]
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	61bb      	str	r3, [r7, #24]
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	69bb      	ldr	r3, [r7, #24]
 800049a:	603b      	str	r3, [r7, #0]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	b29a      	uxth	r2, r3
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	82fb      	strh	r3, [r7, #22]
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	1ad3      	subs	r3, r2, r3
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	bfb8      	it	lt
 80004b4:	425b      	neglt	r3, r3
 80004b6:	82bb      	strh	r3, [r7, #20]
 80004b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004bc:	0fda      	lsrs	r2, r3, #31
 80004be:	4413      	add	r3, r2
 80004c0:	105b      	asrs	r3, r3, #1
 80004c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80004c4:	68ba      	ldr	r2, [r7, #8]
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	da02      	bge.n	80004d2 <GFX_WriteLine+0xaa>
 80004cc:	2301      	movs	r3, #1
 80004ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80004d0:	e02e      	b.n	8000530 <GFX_WriteLine+0x108>
 80004d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80004d8:	e02a      	b.n	8000530 <GFX_WriteLine+0x108>
 80004da:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d008      	beq.n	80004f4 <GFX_WriteLine+0xcc>
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	b21b      	sxth	r3, r3
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	b211      	sxth	r1, r2
 80004ea:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fb3b 	bl	8000b68 <ILI9341_WritePixel>
 80004f2:	e007      	b.n	8000504 <GFX_WriteLine+0xdc>
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	b21b      	sxth	r3, r3
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	b211      	sxth	r1, r2
 80004fc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fb32 	bl	8000b68 <ILI9341_WritePixel>
 8000504:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000506:	8abb      	ldrh	r3, [r7, #20]
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	b29b      	uxth	r3, r3
 800050c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800050e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000512:	2b00      	cmp	r3, #0
 8000514:	da09      	bge.n	800052a <GFX_WriteLine+0x102>
 8000516:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800051a:	68ba      	ldr	r2, [r7, #8]
 800051c:	4413      	add	r3, r2
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000522:	8afb      	ldrh	r3, [r7, #22]
 8000524:	4413      	add	r3, r2
 8000526:	b29b      	uxth	r3, r3
 8000528:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	3301      	adds	r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	ddd0      	ble.n	80004da <GFX_WriteLine+0xb2>
 8000538:	bf00      	nop
 800053a:	bf00      	nop
 800053c:	3730      	adds	r7, #48	; 0x30
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <GFX_DrawFastVLine>:
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af02      	add	r7, sp, #8
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
 800054e:	807b      	strh	r3, [r7, #2]
 8000550:	68ba      	ldr	r2, [r7, #8]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	887b      	ldrh	r3, [r7, #2]
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	4613      	mov	r3, r2
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	68b9      	ldr	r1, [r7, #8]
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	f7ff ff60 	bl	8000428 <GFX_WriteLine>
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <GFX_DrawFastHLine>:
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	807b      	strh	r3, [r7, #2]
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4413      	add	r3, r2
 8000584:	1e5a      	subs	r2, r3, #1
 8000586:	887b      	ldrh	r3, [r7, #2]
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	68f8      	ldr	r0, [r7, #12]
 8000590:	f7ff ff4a 	bl	8000428 <GFX_WriteLine>
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <GFX_DrawLine>:
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d113      	bne.n	80005da <GFX_DrawLine+0x3e>
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	dd05      	ble.n	80005c6 <GFX_DrawLine+0x2a>
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1ad3      	subs	r3, r2, r3
 80005cc:	1c5a      	adds	r2, r3, #1
 80005ce:	8c3b      	ldrh	r3, [r7, #32]
 80005d0:	68b9      	ldr	r1, [r7, #8]
 80005d2:	68f8      	ldr	r0, [r7, #12]
 80005d4:	f7ff ffb5 	bl	8000542 <GFX_DrawFastVLine>
 80005d8:	e01f      	b.n	800061a <GFX_DrawLine+0x7e>
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d113      	bne.n	800060a <GFX_DrawLine+0x6e>
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	dd05      	ble.n	80005f6 <GFX_DrawLine+0x5a>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	1c5a      	adds	r2, r3, #1
 80005fe:	8c3b      	ldrh	r3, [r7, #32]
 8000600:	68b9      	ldr	r1, [r7, #8]
 8000602:	68f8      	ldr	r0, [r7, #12]
 8000604:	f7ff ffb4 	bl	8000570 <GFX_DrawFastHLine>
 8000608:	e007      	b.n	800061a <GFX_DrawLine+0x7e>
 800060a:	8c3b      	ldrh	r3, [r7, #32]
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	68f8      	ldr	r0, [r7, #12]
 8000616:	f7ff ff07 	bl	8000428 <GFX_WriteLine>
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <GFX_DrawRectangle>:
 8000622:	b580      	push	{r7, lr}
 8000624:	b084      	sub	sp, #16
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	4611      	mov	r1, r2
 800062e:	461a      	mov	r2, r3
 8000630:	460b      	mov	r3, r1
 8000632:	80fb      	strh	r3, [r7, #6]
 8000634:	4613      	mov	r3, r2
 8000636:	80bb      	strh	r3, [r7, #4]
 8000638:	88fa      	ldrh	r2, [r7, #6]
 800063a:	8b3b      	ldrh	r3, [r7, #24]
 800063c:	68b9      	ldr	r1, [r7, #8]
 800063e:	68f8      	ldr	r0, [r7, #12]
 8000640:	f7ff ff96 	bl	8000570 <GFX_DrawFastHLine>
 8000644:	88ba      	ldrh	r2, [r7, #4]
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	4413      	add	r3, r2
 800064a:	1e59      	subs	r1, r3, #1
 800064c:	88fa      	ldrh	r2, [r7, #6]
 800064e:	8b3b      	ldrh	r3, [r7, #24]
 8000650:	68f8      	ldr	r0, [r7, #12]
 8000652:	f7ff ff8d 	bl	8000570 <GFX_DrawFastHLine>
 8000656:	88ba      	ldrh	r2, [r7, #4]
 8000658:	8b3b      	ldrh	r3, [r7, #24]
 800065a:	68b9      	ldr	r1, [r7, #8]
 800065c:	68f8      	ldr	r0, [r7, #12]
 800065e:	f7ff ff70 	bl	8000542 <GFX_DrawFastVLine>
 8000662:	88fa      	ldrh	r2, [r7, #6]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	1e58      	subs	r0, r3, #1
 800066a:	88ba      	ldrh	r2, [r7, #4]
 800066c:	8b3b      	ldrh	r3, [r7, #24]
 800066e:	68b9      	ldr	r1, [r7, #8]
 8000670:	f7ff ff67 	bl	8000542 <GFX_DrawFastVLine>
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <GFX_DrawFillRectangle>:
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	4611      	mov	r1, r2
 8000688:	461a      	mov	r2, r3
 800068a:	460b      	mov	r3, r1
 800068c:	80fb      	strh	r3, [r7, #6]
 800068e:	4613      	mov	r3, r2
 8000690:	80bb      	strh	r3, [r7, #4]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	e008      	b.n	80006aa <GFX_DrawFillRectangle+0x2e>
 8000698:	88ba      	ldrh	r2, [r7, #4]
 800069a:	8c3b      	ldrh	r3, [r7, #32]
 800069c:	68b9      	ldr	r1, [r7, #8]
 800069e:	6978      	ldr	r0, [r7, #20]
 80006a0:	f7ff ff4f 	bl	8000542 <GFX_DrawFastVLine>
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	3301      	adds	r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	88fa      	ldrh	r2, [r7, #6]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4413      	add	r3, r2
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	dbf0      	blt.n	8000698 <GFX_DrawFillRectangle+0x1c>
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <GFX_DrawFillTriangle>:
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dd0b      	ble.n	80006ee <GFX_DrawFillTriangle+0x2e>
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006f2:	429a      	cmp	r2, r3
 80006f4:	dd0b      	ble.n	800070e <GFX_DrawFillTriangle+0x4e>
 80006f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80006fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000704:	633b      	str	r3, [r7, #48]	; 0x30
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	65bb      	str	r3, [r7, #88]	; 0x58
 800070a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	429a      	cmp	r2, r3
 8000714:	dd0b      	ble.n	800072e <GFX_DrawFillTriangle+0x6e>
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000732:	429a      	cmp	r2, r3
 8000734:	d136      	bne.n	80007a4 <GFX_DrawFillTriangle+0xe4>
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800073c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000740:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000744:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	429a      	cmp	r2, r3
 800074c:	da03      	bge.n	8000756 <GFX_DrawFillTriangle+0x96>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000754:	e007      	b.n	8000766 <GFX_DrawFillTriangle+0xa6>
 8000756:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	dd02      	ble.n	8000766 <GFX_DrawFillTriangle+0xa6>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000766:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800076a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800076c:	429a      	cmp	r2, r3
 800076e:	da03      	bge.n	8000778 <GFX_DrawFillTriangle+0xb8>
 8000770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000772:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000776:	e007      	b.n	8000788 <GFX_DrawFillTriangle+0xc8>
 8000778:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800077c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800077e:	429a      	cmp	r2, r3
 8000780:	dd02      	ble.n	8000788 <GFX_DrawFillTriangle+0xc8>
 8000782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000784:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000788:	f9b7 004e 	ldrsh.w	r0, [r7, #78]	; 0x4e
 800078c:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8000790:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	f7ff fee7 	bl	8000570 <GFX_DrawFastHLine>
 80007a2:	e0eb      	b.n	800097c <GFX_DrawFillTriangle+0x2bc>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	b29b      	uxth	r3, r3
 80007be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80007c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80007ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	b29b      	uxth	r3, r3
 80007da:	843b      	strh	r3, [r7, #32]
 80007dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007de:	b29a      	uxth	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	83fb      	strh	r3, [r7, #30]
 80007ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	83bb      	strh	r3, [r7, #28]
 80007f8:	2300      	movs	r3, #0
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
 80007fc:	2300      	movs	r3, #0
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000804:	429a      	cmp	r2, r3
 8000806:	d103      	bne.n	8000810 <GFX_DrawFillTriangle+0x150>
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800080e:	e005      	b.n	800081c <GFX_DrawFillTriangle+0x15c>
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	b29b      	uxth	r3, r3
 8000814:	3b01      	subs	r3, #1
 8000816:	b29b      	uxth	r3, r3
 8000818:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8000822:	e046      	b.n	80008b2 <GFX_DrawFillTriangle+0x1f2>
 8000824:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000828:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800082a:	fb92 f3f3 	sdiv	r3, r2, r3
 800082e:	b29a      	uxth	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	b29b      	uxth	r3, r3
 8000834:	4413      	add	r3, r2
 8000836:	b29b      	uxth	r3, r3
 8000838:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800083c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000840:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000842:	fb92 f3f3 	sdiv	r3, r2, r3
 8000846:	b29a      	uxth	r2, r3
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	b29b      	uxth	r3, r3
 800084c:	4413      	add	r3, r2
 800084e:	b29b      	uxth	r3, r3
 8000850:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000854:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800085a:	4413      	add	r3, r2
 800085c:	647b      	str	r3, [r7, #68]	; 0x44
 800085e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000862:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000864:	4413      	add	r3, r2
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
 8000868:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800086c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8000870:	429a      	cmp	r2, r3
 8000872:	dd09      	ble.n	8000888 <GFX_DrawFillTriangle+0x1c8>
 8000874:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800087e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000888:	f9b7 004e 	ldrsh.w	r0, [r7, #78]	; 0x4e
 800088c:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 8000890:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8000894:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80008a0:	f7ff fe66 	bl	8000570 <GFX_DrawFastHLine>
 80008a4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	3301      	adds	r3, #1
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80008b2:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 80008b6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80008ba:	429a      	cmp	r2, r3
 80008bc:	ddb2      	ble.n	8000824 <GFX_DrawFillTriangle+0x164>
 80008be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008c2:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	1a8a      	subs	r2, r1, r2
 80008ca:	fb02 f303 	mul.w	r3, r2, r3
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
 80008d0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80008d4:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 80008d8:	68ba      	ldr	r2, [r7, #8]
 80008da:	1a8a      	subs	r2, r1, r2
 80008dc:	fb02 f303 	mul.w	r3, r2, r3
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40
 80008e2:	e046      	b.n	8000972 <GFX_DrawFillTriangle+0x2b2>
 80008e4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80008e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80008ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4413      	add	r3, r2
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80008fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000900:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000902:	fb92 f3f3 	sdiv	r3, r2, r3
 8000906:	b29a      	uxth	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	b29b      	uxth	r3, r3
 800090c:	4413      	add	r3, r2
 800090e:	b29b      	uxth	r3, r3
 8000910:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000914:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800091a:	4413      	add	r3, r2
 800091c:	647b      	str	r3, [r7, #68]	; 0x44
 800091e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000922:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000924:	4413      	add	r3, r2
 8000926:	643b      	str	r3, [r7, #64]	; 0x40
 8000928:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800092c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8000930:	429a      	cmp	r2, r3
 8000932:	dd09      	ble.n	8000948 <GFX_DrawFillTriangle+0x288>
 8000934:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000938:	61bb      	str	r3, [r7, #24]
 800093a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800093e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000948:	f9b7 004e 	ldrsh.w	r0, [r7, #78]	; 0x4e
 800094c:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 8000950:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8000954:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	1c5a      	adds	r2, r3, #1
 800095c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000960:	f7ff fe06 	bl	8000570 <GFX_DrawFastHLine>
 8000964:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000968:	b29b      	uxth	r3, r3
 800096a:	3301      	adds	r3, #1
 800096c:	b29b      	uxth	r3, r3
 800096e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8000972:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000976:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000978:	429a      	cmp	r2, r3
 800097a:	dab3      	bge.n	80008e4 <GFX_DrawFillTriangle+0x224>
 800097c:	3750      	adds	r7, #80	; 0x50
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <ILI9341_Delay>:
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f002 fb12 	bl	8002fb4 <HAL_Delay>
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <ILI9341_SendTFT>:
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	70fb      	strb	r3, [r7, #3]
 80009a4:	e014      	b.n	80009d0 <ILI9341_SendTFT+0x38>
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <ILI9341_SendTFT+0x5c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d10c      	bne.n	80009d0 <ILI9341_SendTFT+0x38>
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <ILI9341_SendTFT+0x5c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	330c      	adds	r3, #12
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3301      	adds	r3, #1
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	70fb      	strb	r3, [r7, #3]
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d1e7      	bne.n	80009a6 <ILI9341_SendTFT+0xe>
 80009d6:	bf00      	nop
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <ILI9341_SendTFT+0x5c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e4:	2b80      	cmp	r3, #128	; 0x80
 80009e6:	d0f7      	beq.n	80009d8 <ILI9341_SendTFT+0x40>
 80009e8:	bf00      	nop
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	200001c0 	.word	0x200001c0

080009f8 <ILI9341_SendCommand>:
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	2200      	movs	r2, #0
 8000a04:	2102      	movs	r1, #2
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <ILI9341_SendCommand+0x28>)
 8000a08:	f003 f81e 	bl	8003a48 <HAL_GPIO_WritePin>
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ffc1 	bl	8000998 <ILI9341_SendTFT>
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40010c00 	.word	0x40010c00

08000a24 <ILI9341_SendCommandAndData>:
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	4613      	mov	r3, r2
 8000a32:	80bb      	strh	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	2102      	movs	r1, #2
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <ILI9341_SendCommandAndData+0x44>)
 8000a3a:	f003 f805 	bl	8003a48 <HAL_GPIO_WritePin>
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	2101      	movs	r1, #1
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ffa8 	bl	8000998 <ILI9341_SendTFT>
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <ILI9341_SendCommandAndData+0x44>)
 8000a4e:	f002 fffb 	bl	8003a48 <HAL_GPIO_WritePin>
 8000a52:	88bb      	ldrh	r3, [r7, #4]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4619      	mov	r1, r3
 8000a58:	6838      	ldr	r0, [r7, #0]
 8000a5a:	f7ff ff9d 	bl	8000998 <ILI9341_SendTFT>
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40010c00 	.word	0x40010c00

08000a6c <ILI9341_SetRotation>:
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b03      	cmp	r3, #3
 8000a7a:	d820      	bhi.n	8000abe <ILI9341_SetRotation+0x52>
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d816      	bhi.n	8000ab0 <ILI9341_SetRotation+0x44>
 8000a82:	a201      	add	r2, pc, #4	; (adr r2, 8000a88 <ILI9341_SetRotation+0x1c>)
 8000a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a88:	08000a99 	.word	0x08000a99
 8000a8c:	08000a9f 	.word	0x08000a9f
 8000a90:	08000aa5 	.word	0x08000aa5
 8000a94:	08000aab 	.word	0x08000aab
 8000a98:	2348      	movs	r3, #72	; 0x48
 8000a9a:	71fb      	strb	r3, [r7, #7]
 8000a9c:	e008      	b.n	8000ab0 <ILI9341_SetRotation+0x44>
 8000a9e:	2328      	movs	r3, #40	; 0x28
 8000aa0:	71fb      	strb	r3, [r7, #7]
 8000aa2:	e005      	b.n	8000ab0 <ILI9341_SetRotation+0x44>
 8000aa4:	2388      	movs	r3, #136	; 0x88
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	e002      	b.n	8000ab0 <ILI9341_SetRotation+0x44>
 8000aaa:	23e8      	movs	r3, #232	; 0xe8
 8000aac:	71fb      	strb	r3, [r7, #7]
 8000aae:	bf00      	nop
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2036      	movs	r0, #54	; 0x36
 8000ab8:	f7ff ffb4 	bl	8000a24 <ILI9341_SendCommandAndData>
 8000abc:	e000      	b.n	8000ac0 <ILI9341_SetRotation+0x54>
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop

08000ac8 <ILI9341_SetAddrWindow>:
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4604      	mov	r4, r0
 8000ad0:	4608      	mov	r0, r1
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4623      	mov	r3, r4
 8000ad8:	80fb      	strh	r3, [r7, #6]
 8000ada:	4603      	mov	r3, r0
 8000adc:	80bb      	strh	r3, [r7, #4]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	807b      	strh	r3, [r7, #2]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	803b      	strh	r3, [r7, #0]
 8000ae6:	88fa      	ldrh	r2, [r7, #6]
 8000ae8:	887b      	ldrh	r3, [r7, #2]
 8000aea:	4413      	add	r3, r2
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	3b01      	subs	r3, #1
 8000af0:	81fb      	strh	r3, [r7, #14]
 8000af2:	88ba      	ldrh	r2, [r7, #4]
 8000af4:	883b      	ldrh	r3, [r7, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	3b01      	subs	r3, #1
 8000afc:	81bb      	strh	r3, [r7, #12]
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	723b      	strb	r3, [r7, #8]
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	727b      	strb	r3, [r7, #9]
 8000b0e:	89fb      	ldrh	r3, [r7, #14]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	72bb      	strb	r3, [r7, #10]
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	72fb      	strb	r3, [r7, #11]
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	2204      	movs	r2, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	202a      	movs	r0, #42	; 0x2a
 8000b28:	f7ff ff7c 	bl	8000a24 <ILI9341_SendCommandAndData>
 8000b2c:	88bb      	ldrh	r3, [r7, #4]
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	723b      	strb	r3, [r7, #8]
 8000b36:	88bb      	ldrh	r3, [r7, #4]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	727b      	strb	r3, [r7, #9]
 8000b3c:	89bb      	ldrh	r3, [r7, #12]
 8000b3e:	0a1b      	lsrs	r3, r3, #8
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	72bb      	strb	r3, [r7, #10]
 8000b46:	89bb      	ldrh	r3, [r7, #12]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	72fb      	strb	r3, [r7, #11]
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	2204      	movs	r2, #4
 8000b52:	4619      	mov	r1, r3
 8000b54:	202b      	movs	r0, #43	; 0x2b
 8000b56:	f7ff ff65 	bl	8000a24 <ILI9341_SendCommandAndData>
 8000b5a:	202c      	movs	r0, #44	; 0x2c
 8000b5c:	f7ff ff4c 	bl	80009f8 <ILI9341_SendCommand>
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd90      	pop	{r4, r7, pc}

08000b68 <ILI9341_WritePixel>:
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
 8000b72:	460b      	mov	r3, r1
 8000b74:	80bb      	strh	r3, [r7, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	807b      	strh	r3, [r7, #2]
 8000b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db21      	blt.n	8000bc6 <ILI9341_WritePixel+0x5e>
 8000b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b86:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b8a:	da1c      	bge.n	8000bc6 <ILI9341_WritePixel+0x5e>
 8000b8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db18      	blt.n	8000bc6 <ILI9341_WritePixel+0x5e>
 8000b94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b98:	2bef      	cmp	r3, #239	; 0xef
 8000b9a:	dc14      	bgt.n	8000bc6 <ILI9341_WritePixel+0x5e>
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	0a1b      	lsrs	r3, r3, #8
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	733b      	strb	r3, [r7, #12]
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	737b      	strb	r3, [r7, #13]
 8000bac:	88f8      	ldrh	r0, [r7, #6]
 8000bae:	88b9      	ldrh	r1, [r7, #4]
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f7ff ff88 	bl	8000ac8 <ILI9341_SetAddrWindow>
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	202c      	movs	r0, #44	; 0x2c
 8000bc2:	f7ff ff2f 	bl	8000a24 <ILI9341_SendCommandAndData>
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <ILI9341_ClearDisplay>:
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
 8000bda:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	23f0      	movs	r3, #240	; 0xf0
 8000be2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000be6:	2100      	movs	r1, #0
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff ff6d 	bl	8000ac8 <ILI9341_SetAddrWindow>
 8000bee:	202c      	movs	r0, #44	; 0x2c
 8000bf0:	f7ff ff02 	bl	80009f8 <ILI9341_SendCommand>
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2102      	movs	r1, #2
 8000bf8:	481c      	ldr	r0, [pc, #112]	; (8000c6c <ILI9341_ClearDisplay+0x9c>)
 8000bfa:	f002 ff25 	bl	8003a48 <HAL_GPIO_WritePin>
 8000bfe:	e023      	b.n	8000c48 <ILI9341_ClearDisplay+0x78>
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <ILI9341_ClearDisplay+0xa0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d11b      	bne.n	8000c48 <ILI9341_ClearDisplay+0x78>
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	0a1b      	lsrs	r3, r3, #8
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <ILI9341_ClearDisplay+0xa0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	330c      	adds	r3, #12
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	bf00      	nop
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <ILI9341_ClearDisplay+0xa0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d1f7      	bne.n	8000c24 <ILI9341_ClearDisplay+0x54>
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <ILI9341_ClearDisplay+0xa0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	330c      	adds	r3, #12
 8000c3c:	88fa      	ldrh	r2, [r7, #6]
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1d8      	bne.n	8000c00 <ILI9341_ClearDisplay+0x30>
 8000c4e:	bf00      	nop
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <ILI9341_ClearDisplay+0xa0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5c:	2b80      	cmp	r3, #128	; 0x80
 8000c5e:	d0f7      	beq.n	8000c50 <ILI9341_ClearDisplay+0x80>
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40010c00 	.word	0x40010c00
 8000c70:	200001c0 	.word	0x200001c0

08000c74 <ILI9341_Init>:
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	4a24      	ldr	r2, [pc, #144]	; (8000d10 <ILI9341_Init+0x9c>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <ILI9341_Init+0xa0>)
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9c:	481e      	ldr	r0, [pc, #120]	; (8000d18 <ILI9341_Init+0xa4>)
 8000c9e:	f002 fed3 	bl	8003a48 <HAL_GPIO_WritePin>
 8000ca2:	200a      	movs	r0, #10
 8000ca4:	f7ff fe6d 	bl	8000982 <ILI9341_Delay>
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cae:	481a      	ldr	r0, [pc, #104]	; (8000d18 <ILI9341_Init+0xa4>)
 8000cb0:	f002 feca 	bl	8003a48 <HAL_GPIO_WritePin>
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	f7ff fe64 	bl	8000982 <ILI9341_Delay>
 8000cba:	e01a      	b.n	8000cf2 <ILI9341_Init+0x7e>
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	60fa      	str	r2, [r7, #12]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	72bb      	strb	r3, [r7, #10]
 8000cc6:	7abb      	ldrb	r3, [r7, #10]
 8000cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ccc:	727b      	strb	r3, [r7, #9]
 8000cce:	7a7b      	ldrb	r3, [r7, #9]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	7afb      	ldrb	r3, [r7, #11]
 8000cd4:	68f9      	ldr	r1, [r7, #12]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fea4 	bl	8000a24 <ILI9341_SendCommandAndData>
 8000cdc:	7a7b      	ldrb	r3, [r7, #9]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	da02      	bge.n	8000cf2 <ILI9341_Init+0x7e>
 8000cec:	2096      	movs	r0, #150	; 0x96
 8000cee:	f7ff fe48 	bl	8000982 <ILI9341_Delay>
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	1c5a      	adds	r2, r3, #1
 8000cf6:	60fa      	str	r2, [r7, #12]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	72fb      	strb	r3, [r7, #11]
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1dc      	bne.n	8000cbc <ILI9341_Init+0x48>
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff feb2 	bl	8000a6c <ILI9341_SetRotation>
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200001c0 	.word	0x200001c0
 8000d14:	08005ab4 	.word	0x08005ab4
 8000d18:	40010c00 	.word	0x40010c00

08000d1c <MX_DMA_Init>:
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_DMA_Init+0x38>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <MX_DMA_Init+0x38>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6153      	str	r3, [r2, #20]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_DMA_Init+0x38>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	200d      	movs	r0, #13
 8000d40:	f002 fa33 	bl	80031aa <HAL_NVIC_SetPriority>
 8000d44:	200d      	movs	r0, #13
 8000d46:	f002 fa4c 	bl	80031e2 <HAL_NVIC_EnableIRQ>
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000

08000d58 <MX_GPIO_Init>:
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MX_GPIO_Init+0x90>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a1d      	ldr	r2, [pc, #116]	; (8000de8 <MX_GPIO_Init+0x90>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_GPIO_Init+0x90>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MX_GPIO_Init+0x90>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a17      	ldr	r2, [pc, #92]	; (8000de8 <MX_GPIO_Init+0x90>)
 8000d8a:	f043 0308 	orr.w	r3, r3, #8
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_GPIO_Init+0x90>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f240 4102 	movw	r1, #1026	; 0x402
 8000da2:	4812      	ldr	r0, [pc, #72]	; (8000dec <MX_GPIO_Init+0x94>)
 8000da4:	f002 fe50 	bl	8003a48 <HAL_GPIO_WritePin>
 8000da8:	f240 4302 	movw	r3, #1026	; 0x402
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	2301      	movs	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	2302      	movs	r3, #2
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480a      	ldr	r0, [pc, #40]	; (8000dec <MX_GPIO_Init+0x94>)
 8000dc2:	f002 fcc7 	bl	8003754 <HAL_GPIO_Init>
 8000dc6:	23f8      	movs	r3, #248	; 0xf8
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_GPIO_Init+0x98>)
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_GPIO_Init+0x94>)
 8000dda:	f002 fcbb 	bl	8003754 <HAL_GPIO_Init>
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010c00 	.word	0x40010c00
 8000df0:	10210000 	.word	0x10210000

08000df4 <main>:
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	f002 f87a 	bl	8002ef0 <HAL_Init>
 8000dfc:	f000 f80d 	bl	8000e1a <SystemClock_Config>
 8000e00:	f7ff ffaa 	bl	8000d58 <MX_GPIO_Init>
 8000e04:	f000 f87c 	bl	8000f00 <MX_SPI1_Init>
 8000e08:	f7ff ff88 	bl	8000d1c <MX_DMA_Init>
 8000e0c:	f000 f9f2 	bl	80011f4 <MX_USART1_UART_Init>
 8000e10:	f000 f844 	bl	8000e9c <MX_NVIC_Init>
 8000e14:	f000 fab4 	bl	8001380 <hmi_main>
 8000e18:	e7fe      	b.n	8000e18 <main+0x24>

08000e1a <SystemClock_Config>:
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b090      	sub	sp, #64	; 0x40
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	f107 0318 	add.w	r3, r7, #24
 8000e24:	2228      	movs	r2, #40	; 0x28
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 f961 	bl	80050f0 <memset>
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
 8000e40:	2301      	movs	r3, #1
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e44:	2310      	movs	r3, #16
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e48:	2302      	movs	r3, #2
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e50:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e56:	f107 0318 	add.w	r3, r7, #24
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 fe24 	bl	8003aa8 <HAL_RCC_OscConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x50>
 8000e66:	f000 f845 	bl	8000ef4 <Error_Handler>
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	2302      	movs	r3, #2
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2102      	movs	r1, #2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f003 f88f 	bl	8003fa8 <HAL_RCC_ClockConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x7a>
 8000e90:	f000 f830 	bl	8000ef4 <Error_Handler>
 8000e94:	bf00      	nop
 8000e96:	3740      	adds	r7, #64	; 0x40
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <MX_NVIC_Init>:
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	200f      	movs	r0, #15
 8000ea6:	f002 f980 	bl	80031aa <HAL_NVIC_SetPriority>
 8000eaa:	200f      	movs	r0, #15
 8000eac:	f002 f999 	bl	80031e2 <HAL_NVIC_EnableIRQ>
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2025      	movs	r0, #37	; 0x25
 8000eb6:	f002 f978 	bl	80031aa <HAL_NVIC_SetPriority>
 8000eba:	2025      	movs	r0, #37	; 0x25
 8000ebc:	f002 f991 	bl	80031e2 <HAL_NVIC_EnableIRQ>
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2017      	movs	r0, #23
 8000ec6:	f002 f970 	bl	80031aa <HAL_NVIC_SetPriority>
 8000eca:	2017      	movs	r0, #23
 8000ecc:	f002 f989 	bl	80031e2 <HAL_NVIC_EnableIRQ>
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	200a      	movs	r0, #10
 8000ed6:	f002 f968 	bl	80031aa <HAL_NVIC_SetPriority>
 8000eda:	200a      	movs	r0, #10
 8000edc:	f002 f981 	bl	80031e2 <HAL_NVIC_EnableIRQ>
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2009      	movs	r0, #9
 8000ee6:	f002 f960 	bl	80031aa <HAL_NVIC_SetPriority>
 8000eea:	2009      	movs	r0, #9
 8000eec:	f002 f979 	bl	80031e2 <HAL_NVIC_EnableIRQ>
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <Error_Handler>:
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	b672      	cpsid	i
 8000efa:	bf00      	nop
 8000efc:	e7fe      	b.n	8000efc <Error_Handler+0x8>
	...

08000f00 <MX_SPI1_Init>:
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f06:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <MX_SPI1_Init+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	619a      	str	r2, [r3, #24]
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f34:	2210      	movs	r2, #16
 8000f36:	61da      	str	r2, [r3, #28]
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f4c:	220a      	movs	r2, #10
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f52:	f003 f9c3 	bl	80042dc <HAL_SPI_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_SPI1_Init+0x60>
 8000f5c:	f7ff ffca 	bl	8000ef4 <Error_Handler>
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200001c4 	.word	0x200001c4
 8000f68:	40013000 	.word	0x40013000

08000f6c <HAL_SPI_MspInit>:
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a2e      	ldr	r2, [pc, #184]	; (8001040 <HAL_SPI_MspInit+0xd4>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d155      	bne.n	8001038 <HAL_SPI_MspInit+0xcc>
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <HAL_SPI_MspInit+0xd8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a2c      	ldr	r2, [pc, #176]	; (8001044 <HAL_SPI_MspInit+0xd8>)
 8000f92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <HAL_SPI_MspInit+0xd8>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <HAL_SPI_MspInit+0xd8>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a26      	ldr	r2, [pc, #152]	; (8001044 <HAL_SPI_MspInit+0xd8>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b24      	ldr	r3, [pc, #144]	; (8001044 <HAL_SPI_MspInit+0xd8>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	23a0      	movs	r3, #160	; 0xa0
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4619      	mov	r1, r3
 8000fce:	481e      	ldr	r0, [pc, #120]	; (8001048 <HAL_SPI_MspInit+0xdc>)
 8000fd0:	f002 fbc0 	bl	8003754 <HAL_GPIO_Init>
 8000fd4:	2340      	movs	r3, #64	; 0x40
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4818      	ldr	r0, [pc, #96]	; (8001048 <HAL_SPI_MspInit+0xdc>)
 8000fe8:	f002 fbb4 	bl	8003754 <HAL_GPIO_Init>
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8000fee:	4a18      	ldr	r2, [pc, #96]	; (8001050 <HAL_SPI_MspInit+0xe4>)
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8000ff4:	2210      	movs	r2, #16
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_SPI_MspInit+0xe0>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <HAL_SPI_MspInit+0xe0>)
 800101e:	f002 f8fb 	bl	8003218 <HAL_DMA_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_SPI_MspInit+0xc0>
 8001028:	f7ff ff64 	bl	8000ef4 <Error_Handler>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8001030:	649a      	str	r2, [r3, #72]	; 0x48
 8001032:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_SPI_MspInit+0xe0>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6253      	str	r3, [r2, #36]	; 0x24
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40013000 	.word	0x40013000
 8001044:	40021000 	.word	0x40021000
 8001048:	40010800 	.word	0x40010800
 800104c:	2000021c 	.word	0x2000021c
 8001050:	40020030 	.word	0x40020030

08001054 <HAL_MspInit>:
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_MspInit+0x5c>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <HAL_MspInit+0x5c>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6193      	str	r3, [r2, #24]
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_MspInit+0x5c>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_MspInit+0x5c>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <HAL_MspInit+0x5c>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	61d3      	str	r3, [r2, #28]
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_MspInit+0x5c>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_MspInit+0x60>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_MspInit+0x60>)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6053      	str	r3, [r2, #4]
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010000 	.word	0x40010000

080010b8 <NMI_Handler>:
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <SVC_Handler>:
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <DebugMon_Handler>:
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr

080010fa <SysTick_Handler>:
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	f001 ff3d 	bl	8002f7c <HAL_IncTick>
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}

08001106 <EXTI3_IRQHandler>:
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
 800110a:	2008      	movs	r0, #8
 800110c:	f002 fcb4 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <EXTI4_IRQHandler>:
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
 8001118:	2010      	movs	r0, #16
 800111a:	f002 fcad 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <DMA1_Channel3_IRQHandler>:
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <DMA1_Channel3_IRQHandler+0x10>)
 800112a:	f002 f9df 	bl	80034ec <HAL_DMA_IRQHandler>
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000021c 	.word	0x2000021c

08001138 <DMA1_Channel5_IRQHandler>:
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <DMA1_Channel5_IRQHandler+0x10>)
 800113e:	f002 f9d5 	bl	80034ec <HAL_DMA_IRQHandler>
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000260 	.word	0x20000260

0800114c <EXTI9_5_IRQHandler>:
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
 8001150:	2020      	movs	r0, #32
 8001152:	f002 fc91 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
 8001156:	2040      	movs	r0, #64	; 0x40
 8001158:	f002 fc8e 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
 800115c:	2080      	movs	r0, #128	; 0x80
 800115e:	f002 fc8b 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <USART1_IRQHandler>:
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <USART1_IRQHandler+0x10>)
 800116e:	f003 fa67 	bl	8004640 <HAL_UART_IRQHandler>
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200002a4 	.word	0x200002a4

0800117c <_sbrk>:
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
 80011ac:	f003 ff68 	bl	8005080 <__errno>
 80011b0:	4603      	mov	r3, r0
 80011b2:	220c      	movs	r2, #12
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20002800 	.word	0x20002800
 80011dc:	00000400 	.word	0x00000400
 80011e0:	200000a8 	.word	0x200000a8
 80011e4:	20000300 	.word	0x20000300

080011e8 <SystemInit>:
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <MX_USART1_UART_Init>:
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <MX_USART1_UART_Init+0x50>)
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 8001200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_USART1_UART_Init+0x4c>)
 800122c:	f003 f8da 	bl	80043e4 <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART1_UART_Init+0x46>
 8001236:	f7ff fe5d 	bl	8000ef4 <Error_Handler>
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200002a4 	.word	0x200002a4
 8001244:	40013800 	.word	0x40013800

08001248 <HAL_UART_MspInit>:
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a2f      	ldr	r2, [pc, #188]	; (8001320 <HAL_UART_MspInit+0xd8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d157      	bne.n	8001318 <HAL_UART_MspInit+0xd0>
 8001268:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <HAL_UART_MspInit+0xdc>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a2d      	ldr	r2, [pc, #180]	; (8001324 <HAL_UART_MspInit+0xdc>)
 800126e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <HAL_UART_MspInit+0xdc>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <HAL_UART_MspInit+0xdc>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a27      	ldr	r2, [pc, #156]	; (8001324 <HAL_UART_MspInit+0xdc>)
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <HAL_UART_MspInit+0xdc>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	2302      	movs	r3, #2
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	2303      	movs	r3, #3
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4619      	mov	r1, r3
 80012ac:	481e      	ldr	r0, [pc, #120]	; (8001328 <HAL_UART_MspInit+0xe0>)
 80012ae:	f002 fa51 	bl	8003754 <HAL_GPIO_Init>
 80012b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	4818      	ldr	r0, [pc, #96]	; (8001328 <HAL_UART_MspInit+0xe0>)
 80012c8:	f002 fa44 	bl	8003754 <HAL_GPIO_Init>
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012ce:	4a18      	ldr	r2, [pc, #96]	; (8001330 <HAL_UART_MspInit+0xe8>)
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012e0:	2280      	movs	r2, #128	; 0x80
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	615a      	str	r2, [r3, #20]
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	61da      	str	r2, [r3, #28]
 80012fc:	480b      	ldr	r0, [pc, #44]	; (800132c <HAL_UART_MspInit+0xe4>)
 80012fe:	f001 ff8b 	bl	8003218 <HAL_DMA_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_UART_MspInit+0xc4>
 8001308:	f7ff fdf4 	bl	8000ef4 <Error_Handler>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_UART_MspInit+0xe4>)
 8001310:	639a      	str	r2, [r3, #56]	; 0x38
 8001312:	4a06      	ldr	r2, [pc, #24]	; (800132c <HAL_UART_MspInit+0xe4>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6253      	str	r3, [r2, #36]	; 0x24
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40013800 	.word	0x40013800
 8001324:	40021000 	.word	0x40021000
 8001328:	40010800 	.word	0x40010800
 800132c:	20000260 	.word	0x20000260
 8001330:	40020058 	.word	0x40020058

08001334 <Reset_Handler>:
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <LoopFillZerobss+0x12>)
 8001336:	490d      	ldr	r1, [pc, #52]	; (800136c <LoopFillZerobss+0x16>)
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <LoopFillZerobss+0x1a>)
 800133a:	2300      	movs	r3, #0
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:
 800133e:	58d4      	ldr	r4, [r2, r3]
 8001340:	50c4      	str	r4, [r0, r3]
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:
 8001344:	18c4      	adds	r4, r0, r3
 8001346:	428c      	cmp	r4, r1
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <LoopFillZerobss+0x1e>)
 800134c:	4c0a      	ldr	r4, [pc, #40]	; (8001378 <LoopFillZerobss+0x22>)
 800134e:	2300      	movs	r3, #0
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:
 8001356:	42a2      	cmp	r2, r4
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>
 800135a:	f7ff ff45 	bl	80011e8 <SystemInit>
 800135e:	f003 fe95 	bl	800508c <__libc_init_array>
 8001362:	f7ff fd47 	bl	8000df4 <main>
 8001366:	4770      	bx	lr
 8001368:	20000000 	.word	0x20000000
 800136c:	20000084 	.word	0x20000084
 8001370:	08005e18 	.word	0x08005e18
 8001374:	20000084 	.word	0x20000084
 8001378:	200002fc 	.word	0x200002fc

0800137c <ADC1_2_IRQHandler>:
 800137c:	e7fe      	b.n	800137c <ADC1_2_IRQHandler>
	...

08001380 <hmi_main>:
static void edit_menu_active(void);

/*** FUNCTIONS USED OUT OF THIS FILE **/

void hmi_main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  hmi_state = READ_EEPROM;
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <hmi_main+0x5c>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
  while (1)
    {
      switch (hmi_state)
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <hmi_main+0x5c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b05      	cmp	r3, #5
 8001392:	d8fa      	bhi.n	800138a <hmi_main+0xa>
 8001394:	a201      	add	r2, pc, #4	; (adr r2, 800139c <hmi_main+0x1c>)
 8001396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139a:	bf00      	nop
 800139c:	080013b5 	.word	0x080013b5
 80013a0:	080013bb 	.word	0x080013bb
 80013a4:	080013c1 	.word	0x080013c1
 80013a8:	080013c7 	.word	0x080013c7
 80013ac:	080013cd 	.word	0x080013cd
 80013b0:	080013d3 	.word	0x080013d3
        {
        case (READ_EEPROM):
          {
            init_read_eeprom();
 80013b4:	f000 f958 	bl	8001668 <init_read_eeprom>
            break;
 80013b8:	e00e      	b.n	80013d8 <hmi_main+0x58>
          }

        case (INIT_TFT):
          {
            init_tft();
 80013ba:	f000 f961 	bl	8001680 <init_tft>
            break;
 80013be:	e00b      	b.n	80013d8 <hmi_main+0x58>
          }

        case (INIT_MAIN_MENU):
          {
            init_main_menu();
 80013c0:	f000 f972 	bl	80016a8 <init_main_menu>
            break;
 80013c4:	e008      	b.n	80013d8 <hmi_main+0x58>
          }

        case (MAIN_MENU):
          {
            main_menu_active();
 80013c6:	f000 f913 	bl	80015f0 <main_menu_active>
            break;
 80013ca:	e005      	b.n	80013d8 <hmi_main+0x58>
          }

        case (INIT_EDIT_MENU):
          {
            init_edit_menu();
 80013cc:	f000 f980 	bl	80016d0 <init_edit_menu>
            break;
 80013d0:	e002      	b.n	80013d8 <hmi_main+0x58>
          }

        case (EDIT_MENU):
          {
            edit_menu_active();
 80013d2:	f000 f98b 	bl	80016ec <edit_menu_active>
            break;
 80013d6:	bf00      	nop
      switch (hmi_state)
 80013d8:	e7d7      	b.n	800138a <hmi_main+0xa>
 80013da:	bf00      	nop
 80013dc:	200000ac 	.word	0x200000ac

080013e0 <hmi_read_tile_function>:

  return;
}

void hmi_read_tile_function(const struct tile_data *frame_send)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  // read on DMA
  frame_returned = false;
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <hmi_read_tile_function+0x68>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
  bool timeout_error = false;
 80013ee:	2300      	movs	r3, #0
 80013f0:	77fb      	strb	r3, [r7, #31]
  char msg_to_print[16];
  bool center_text = false;
 80013f2:	2300      	movs	r3, #0
 80013f4:	77bb      	strb	r3, [r7, #30]
  u_frame *p_frame_received = {0};
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)p_frame_received,
 80013fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fe:	69b9      	ldr	r1, [r7, #24]
 8001400:	4812      	ldr	r0, [pc, #72]	; (800144c <hmi_read_tile_function+0x6c>)
 8001402:	f003 f8ce 	bl	80045a2 <HAL_UARTEx_ReceiveToIdle_DMA>
                               MAX_FRAME_SIZE);

  xgb_read_single_device(frame_send->device_type, frame_send->size_mark,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7898      	ldrb	r0, [r3, #2]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	78d9      	ldrb	r1, [r3, #3]
                         frame_send->address);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3304      	adds	r3, #4
  xgb_read_single_device(frame_send->device_type, frame_send->size_mark,
 8001412:	461a      	mov	r2, r3
 8001414:	f001 f996 	bl	8002744 <xgb_read_single_device>

  timeout_error = wait_for_frame_until_timeout();
 8001418:	f000 f97a 	bl	8001710 <wait_for_frame_until_timeout>
 800141c:	4603      	mov	r3, r0
 800141e:	77fb      	strb	r3, [r7, #31]

  create_frame_to_display(msg_to_print, p_frame_received, timeout_error);
 8001420:	7ffa      	ldrb	r2, [r7, #31]
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	69b9      	ldr	r1, [r7, #24]
 8001428:	4618      	mov	r0, r3
 800142a:	f000 f993 	bl	8001754 <create_frame_to_display>

  draw_small_tile_text(frame_send->tile_number, msg_to_print, center_text);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	7fba      	ldrb	r2, [r7, #30]
 8001434:	f107 0108 	add.w	r1, r7, #8
 8001438:	4618      	mov	r0, r3
 800143a:	f000 fa1b 	bl	8001874 <draw_small_tile_text>

  return;
 800143e:	bf00      	nop
}
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200000ad 	.word	0x200000ad
 800144c:	200002a4 	.word	0x200002a4

08001450 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
  frame_returned = true;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_UARTEx_RxEventCallback+0x1c>)
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	200000ad 	.word	0x200000ad

08001470 <mm_update_tile_cursor_pos>:

/*** MAIN MENU FUNCTIONS **/

// update the cursor pos number in structure
static void mm_update_tile_cursor_pos(buttons_state_t pending_flag)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if (pending_flag == LEFT_FLAG)
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d111      	bne.n	80014a4 <mm_update_tile_cursor_pos+0x34>
    {
      main_screen_data.active_main_tile =
          (main_screen_data.active_main_tile + 5) % 10;
 8001480:	4b36      	ldr	r3, [pc, #216]	; (800155c <mm_update_tile_cursor_pos+0xec>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	1d5a      	adds	r2, r3, #5
 8001486:	4b36      	ldr	r3, [pc, #216]	; (8001560 <mm_update_tile_cursor_pos+0xf0>)
 8001488:	fb83 1302 	smull	r1, r3, r3, r2
 800148c:	1099      	asrs	r1, r3, #2
 800148e:	17d3      	asrs	r3, r2, #31
 8001490:	1ac9      	subs	r1, r1, r3
 8001492:	460b      	mov	r3, r1
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	440b      	add	r3, r1
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	1ad1      	subs	r1, r2, r3
      main_screen_data.active_main_tile =
 800149c:	b2ca      	uxtb	r2, r1
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <mm_update_tile_cursor_pos+0xec>)
 80014a0:	701a      	strb	r2, [r3, #0]
      main_screen_data.active_main_tile =
          (main_screen_data.active_main_tile + 1) % 5 +
          (5 * (main_screen_data.active_main_tile / 5));
    }

  return;
 80014a2:	e056      	b.n	8001552 <mm_update_tile_cursor_pos+0xe2>
  else if (pending_flag == RIGHT_FLAG)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d111      	bne.n	80014ce <mm_update_tile_cursor_pos+0x5e>
          (main_screen_data.active_main_tile + 5) % 10;
 80014aa:	4b2c      	ldr	r3, [pc, #176]	; (800155c <mm_update_tile_cursor_pos+0xec>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	1d5a      	adds	r2, r3, #5
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <mm_update_tile_cursor_pos+0xf0>)
 80014b2:	fb83 1302 	smull	r1, r3, r3, r2
 80014b6:	1099      	asrs	r1, r3, #2
 80014b8:	17d3      	asrs	r3, r2, #31
 80014ba:	1ac9      	subs	r1, r1, r3
 80014bc:	460b      	mov	r3, r1
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	1ad1      	subs	r1, r2, r3
      main_screen_data.active_main_tile =
 80014c6:	b2ca      	uxtb	r2, r1
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <mm_update_tile_cursor_pos+0xec>)
 80014ca:	701a      	strb	r2, [r3, #0]
  return;
 80014cc:	e041      	b.n	8001552 <mm_update_tile_cursor_pos+0xe2>
  else if (pending_flag == UP_FLAG)
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d11d      	bne.n	8001510 <mm_update_tile_cursor_pos+0xa0>
          (main_screen_data.active_main_tile + 4) % 5 +
 80014d4:	4b21      	ldr	r3, [pc, #132]	; (800155c <mm_update_tile_cursor_pos+0xec>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	1d1a      	adds	r2, r3, #4
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <mm_update_tile_cursor_pos+0xf0>)
 80014dc:	fb83 1302 	smull	r1, r3, r3, r2
 80014e0:	1059      	asrs	r1, r3, #1
 80014e2:	17d3      	asrs	r3, r2, #31
 80014e4:	1ac9      	subs	r1, r1, r3
 80014e6:	460b      	mov	r3, r1
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	1ad1      	subs	r1, r2, r3
 80014ee:	b2ca      	uxtb	r2, r1
          (5 * (main_screen_data.active_main_tile / 5));
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <mm_update_tile_cursor_pos+0xec>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
          (main_screen_data.active_main_tile + 4) % 5 +
 80014f4:	491b      	ldr	r1, [pc, #108]	; (8001564 <mm_update_tile_cursor_pos+0xf4>)
 80014f6:	fba1 1303 	umull	r1, r3, r1, r3
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	4619      	mov	r1, r3
 8001500:	0089      	lsls	r1, r1, #2
 8001502:	440b      	add	r3, r1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4413      	add	r3, r2
 8001508:	b2da      	uxtb	r2, r3
      main_screen_data.active_main_tile =
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <mm_update_tile_cursor_pos+0xec>)
 800150c:	701a      	strb	r2, [r3, #0]
  return;
 800150e:	e020      	b.n	8001552 <mm_update_tile_cursor_pos+0xe2>
  else if (pending_flag == DOWN_FLAG)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d11d      	bne.n	8001552 <mm_update_tile_cursor_pos+0xe2>
          (main_screen_data.active_main_tile + 1) % 5 +
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <mm_update_tile_cursor_pos+0xec>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <mm_update_tile_cursor_pos+0xf0>)
 800151e:	fb83 1302 	smull	r1, r3, r3, r2
 8001522:	1059      	asrs	r1, r3, #1
 8001524:	17d3      	asrs	r3, r2, #31
 8001526:	1ac9      	subs	r1, r1, r3
 8001528:	460b      	mov	r3, r1
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	1ad1      	subs	r1, r2, r3
 8001530:	b2ca      	uxtb	r2, r1
          (5 * (main_screen_data.active_main_tile / 5));
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <mm_update_tile_cursor_pos+0xec>)
 8001534:	781b      	ldrb	r3, [r3, #0]
          (main_screen_data.active_main_tile + 1) % 5 +
 8001536:	490b      	ldr	r1, [pc, #44]	; (8001564 <mm_update_tile_cursor_pos+0xf4>)
 8001538:	fba1 1303 	umull	r1, r3, r1, r3
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4619      	mov	r1, r3
 8001542:	0089      	lsls	r1, r1, #2
 8001544:	440b      	add	r3, r1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4413      	add	r3, r2
 800154a:	b2da      	uxtb	r2, r3
      main_screen_data.active_main_tile =
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <mm_update_tile_cursor_pos+0xec>)
 800154e:	701a      	strb	r2, [r3, #0]
  return;
 8001550:	bf00      	nop
 8001552:	bf00      	nop
}
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	200000b0 	.word	0x200000b0
 8001560:	66666667 	.word	0x66666667
 8001564:	cccccccd 	.word	0xcccccccd

08001568 <mm_change_tile_cursor_pos>:

// change cursor position on screen
static void mm_change_tile_cursor_pos(buttons_state_t pending_flag)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
  // erase active tile
  draw_mm_cursor(HMI_BACKGROUND_COLOR, main_screen_data.active_main_tile);
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <mm_change_tile_cursor_pos+0x3c>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4619      	mov	r1, r3
 8001578:	2000      	movs	r0, #0
 800157a:	f000 f9dd 	bl	8001938 <draw_mm_cursor>
  mm_update_tile_cursor_pos(pending_flag);
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff75 	bl	8001470 <mm_update_tile_cursor_pos>
  // draw new active tile
  draw_mm_cursor(HMI_CURSOR_COLOR, main_screen_data.active_main_tile);
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <mm_change_tile_cursor_pos+0x3c>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001590:	f000 f9d2 	bl	8001938 <draw_mm_cursor>
  buttons_reset_flag(pending_flag);
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe fe48 	bl	800022c <buttons_reset_flag>

  return;
 800159c:	bf00      	nop
}
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200000b0 	.word	0x200000b0

080015a8 <mm_check_pending_flags>:

static hmi_change_screen_t mm_check_pending_flags(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
  buttons_state_t pending_flag = buttons_get_pending_flag();
 80015ae:	f7fe fe09 	bl	80001c4 <buttons_get_pending_flag>
 80015b2:	4603      	mov	r3, r0
 80015b4:	71bb      	strb	r3, [r7, #6]

  hmi_change_screen_t change_screen = NO_CHANGE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	71fb      	strb	r3, [r7, #7]

  if (IDLE != pending_flag)
 80015ba:	79bb      	ldrb	r3, [r7, #6]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d010      	beq.n	80015e2 <mm_check_pending_flags+0x3a>
    {
      switch (pending_flag)
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	dc02      	bgt.n	80015cc <mm_check_pending_flags+0x24>
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	dc03      	bgt.n	80015d2 <mm_check_pending_flags+0x2a>
        case (ENTER_FLAG):
          change_screen = OPEN_EDIT_MENU;
          break;
        case (IDLE):
        default:
          break;
 80015ca:	e00b      	b.n	80015e4 <mm_check_pending_flags+0x3c>
      switch (pending_flag)
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	d005      	beq.n	80015dc <mm_check_pending_flags+0x34>
          break;
 80015d0:	e008      	b.n	80015e4 <mm_check_pending_flags+0x3c>
          mm_change_tile_cursor_pos(pending_flag);
 80015d2:	79bb      	ldrb	r3, [r7, #6]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ffc7 	bl	8001568 <mm_change_tile_cursor_pos>
          break;
 80015da:	e003      	b.n	80015e4 <mm_check_pending_flags+0x3c>
          change_screen = OPEN_EDIT_MENU;
 80015dc:	2301      	movs	r3, #1
 80015de:	71fb      	strb	r3, [r7, #7]
          break;
 80015e0:	e000      	b.n	80015e4 <mm_check_pending_flags+0x3c>
        }
    }
 80015e2:	bf00      	nop

  return change_screen;
 80015e4:	79fb      	ldrb	r3, [r7, #7]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <main_menu_active>:

static void main_menu_active(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  while (1)
    {
      // do every tile callback
      for (uint8_t i = 0; i < 10; i++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	71fb      	strb	r3, [r7, #7]
 80015fa:	e02a      	b.n	8001652 <main_menu_active+0x62>
        {
          if (NULL != main_screen_data.buttons[i].callback)
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	4918      	ldr	r1, [pc, #96]	; (8001660 <main_menu_active+0x70>)
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	3318      	adds	r3, #24
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d013      	beq.n	800163a <main_menu_active+0x4a>
            {
              main_screen_data.buttons[i].callback(
 8001612:	79fa      	ldrb	r2, [r7, #7]
 8001614:	4912      	ldr	r1, [pc, #72]	; (8001660 <main_menu_active+0x70>)
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	3318      	adds	r3, #24
 8001622:	6819      	ldr	r1, [r3, #0]
                  &main_screen_data.buttons[i].data);
 8001624:	79fa      	ldrb	r2, [r7, #7]
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	3308      	adds	r3, #8
 8001630:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <main_menu_active+0x70>)
 8001632:	4413      	add	r3, r2
 8001634:	3304      	adds	r3, #4
              main_screen_data.buttons[i].callback(
 8001636:	4618      	mov	r0, r3
 8001638:	4788      	blx	r1
            }

          // check if button was pressed
          if (OPEN_EDIT_MENU == mm_check_pending_flags())
 800163a:	f7ff ffb5 	bl	80015a8 <mm_check_pending_flags>
 800163e:	4603      	mov	r3, r0
 8001640:	2b01      	cmp	r3, #1
 8001642:	d103      	bne.n	800164c <main_menu_active+0x5c>
            {
              hmi_state = INIT_EDIT_MENU;
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <main_menu_active+0x74>)
 8001646:	2204      	movs	r2, #4
 8001648:	701a      	strb	r2, [r3, #0]
              return;
 800164a:	e006      	b.n	800165a <main_menu_active+0x6a>
      for (uint8_t i = 0; i < 10; i++)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	3301      	adds	r3, #1
 8001650:	71fb      	strb	r3, [r7, #7]
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b09      	cmp	r3, #9
 8001656:	d9d1      	bls.n	80015fc <main_menu_active+0xc>
 8001658:	e7cd      	b.n	80015f6 <main_menu_active+0x6>
            }
        }
    }
}
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200000b0 	.word	0x200000b0
 8001664:	200000ac 	.word	0x200000ac

08001668 <init_read_eeprom>:

/*** INIT FUNCTIONS **/

static void init_read_eeprom(void) { hmi_state = INIT_TFT; }
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <init_read_eeprom+0x14>)
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	200000ac 	.word	0x200000ac

08001680 <init_tft>:

static void init_tft(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  ILI9341_Init(&hspi1);
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <init_tft+0x1c>)
 8001686:	f7ff faf5 	bl	8000c74 <ILI9341_Init>
  GFX_SetFont(font_8x5);
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <init_tft+0x20>)
 800168c:	f7fe fe0e 	bl	80002ac <GFX_SetFont>
  hmi_state = INIT_MAIN_MENU;
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <init_tft+0x24>)
 8001692:	2202      	movs	r2, #2
 8001694:	701a      	strb	r2, [r3, #0]
  return;
 8001696:	bf00      	nop
}
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200001c4 	.word	0x200001c4
 80016a0:	08005b3c 	.word	0x08005b3c
 80016a4:	200000ac 	.word	0x200000ac

080016a8 <init_main_menu>:

static void init_main_menu(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  main_screen_data.active_main_tile = 0;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <init_main_menu+0x20>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
  draw_main_screen(main_screen_data.active_main_tile);
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <init_main_menu+0x20>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f9a4 	bl	8001a04 <draw_main_screen>
  hmi_state = MAIN_MENU;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <init_main_menu+0x24>)
 80016be:	2203      	movs	r2, #3
 80016c0:	701a      	strb	r2, [r3, #0]
  return;
 80016c2:	bf00      	nop
}
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200000b0 	.word	0x200000b0
 80016cc:	200000ac 	.word	0x200000ac

080016d0 <init_edit_menu>:

static void init_edit_menu(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  em_open_edit_menu(&main_screen_data);
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <init_edit_menu+0x14>)
 80016d6:	f000 fc13 	bl	8001f00 <em_open_edit_menu>
  hmi_state = EDIT_MENU;
 80016da:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <init_edit_menu+0x18>)
 80016dc:	2205      	movs	r2, #5
 80016de:	701a      	strb	r2, [r3, #0]
  return;
 80016e0:	bf00      	nop
}
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200000b0 	.word	0x200000b0
 80016e8:	200000ac 	.word	0x200000ac

080016ec <edit_menu_active>:

static void edit_menu_active(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  if (OPEN_MAIN_MENU == em_active_screen(&main_screen_data))
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <edit_menu_active+0x1c>)
 80016f2:	f000 fc1d 	bl	8001f30 <em_active_screen>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d103      	bne.n	8001704 <edit_menu_active+0x18>
    {
      hmi_state = INIT_MAIN_MENU;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <edit_menu_active+0x20>)
 80016fe:	2202      	movs	r2, #2
 8001700:	701a      	strb	r2, [r3, #0]
    }

  return;
 8001702:	bf00      	nop
 8001704:	bf00      	nop
}
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200000b0 	.word	0x200000b0
 800170c:	200000ac 	.word	0x200000ac

08001710 <wait_for_frame_until_timeout>:

static bool wait_for_frame_until_timeout(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
  uint32_t current_tick = HAL_GetTick();
 8001716:	f001 fc43 	bl	8002fa0 <HAL_GetTick>
 800171a:	6038      	str	r0, [r7, #0]
  bool timeout_error = false;
 800171c:	2300      	movs	r3, #0
 800171e:	71fb      	strb	r3, [r7, #7]
  while (false == frame_returned)
 8001720:	e009      	b.n	8001736 <wait_for_frame_until_timeout+0x26>
    {
      if (HAL_GetTick() - current_tick > RETURN_FRAME_TIMEOUT)
 8001722:	f001 fc3d 	bl	8002fa0 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b32      	cmp	r3, #50	; 0x32
 800172e:	d902      	bls.n	8001736 <wait_for_frame_until_timeout+0x26>
        {
          timeout_error = true;
 8001730:	2301      	movs	r3, #1
 8001732:	71fb      	strb	r3, [r7, #7]
          break;
 8001734:	e007      	b.n	8001746 <wait_for_frame_until_timeout+0x36>
  while (false == frame_returned)
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <wait_for_frame_until_timeout+0x40>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f083 0301 	eor.w	r3, r3, #1
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1ed      	bne.n	8001722 <wait_for_frame_until_timeout+0x12>
        }
    }

  return timeout_error;
 8001746:	79fb      	ldrb	r3, [r7, #7]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200000ad 	.word	0x200000ad

08001754 <create_frame_to_display>:

static void create_frame_to_display(char *text_buffer,
                                    const u_frame *p_frame_data, bool timeout)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	4613      	mov	r3, r2
 8001760:	71fb      	strb	r3, [r7, #7]

  if (timeout == true)
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <create_frame_to_display+0x1a>
    {
      text_buffer = "TIMEOUT";
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <create_frame_to_display+0x24>)
 800176a:	60fb      	str	r3, [r7, #12]
    }
  else
    {
    }

  return;
 800176c:	bf00      	nop
 800176e:	bf00      	nop
}
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	08005980 	.word	0x08005980

0800177c <draw_small_tile>:

/*** DRAW FUNCTIONS **/

// Draw main menu tile
void draw_small_tile(uint8_t tile_number, const char *text, bool center_text)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af02      	add	r7, sp, #8
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
 8001788:	4613      	mov	r3, r2
 800178a:	71bb      	strb	r3, [r7, #6]
  uint8_t column = tile_number / 5;
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <draw_small_tile+0x78>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	75fb      	strb	r3, [r7, #23]
  uint8_t row = tile_number % 5;
 8001798:	79fa      	ldrb	r2, [r7, #7]
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <draw_small_tile+0x78>)
 800179c:	fba3 1302 	umull	r1, r3, r3, r2
 80017a0:	0899      	lsrs	r1, r3, #2
 80017a2:	460b      	mov	r3, r1
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	75bb      	strb	r3, [r7, #22]

  uint32_t x_pos = (column * OFFSET_X_SECOND_COLUMN) + OFFSET_X_LEFT_BORDER;
 80017ac:	7dfa      	ldrb	r2, [r7, #23]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	015b      	lsls	r3, r3, #5
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	3303      	adds	r3, #3
 80017ba:	613b      	str	r3, [r7, #16]
  uint32_t y_pos = (row * DISTANCE_Y_BETWEEN_TILES) + OFFSET_Y_FIRST_TILE;
 80017bc:	7dba      	ldrb	r2, [r7, #22]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4413      	add	r3, r2
 80017c8:	331d      	adds	r3, #29
 80017ca:	60fb      	str	r3, [r7, #12]

  GFX_DrawRectangle(x_pos, y_pos, SMALL_TILE_WIDTH, SMALL_TILE_HEIGHT,
 80017cc:	6938      	ldr	r0, [r7, #16]
 80017ce:	68f9      	ldr	r1, [r7, #12]
 80017d0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2328      	movs	r3, #40	; 0x28
 80017d8:	229b      	movs	r2, #155	; 0x9b
 80017da:	f7fe ff22 	bl	8000622 <GFX_DrawRectangle>
                    HMI_TILE_COLOR);

  draw_small_tile_text(tile_number, text, center_text);
 80017de:	79ba      	ldrb	r2, [r7, #6]
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	6839      	ldr	r1, [r7, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 f845 	bl	8001874 <draw_small_tile_text>
  return;
 80017ea:	bf00      	nop
}
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	cccccccd 	.word	0xcccccccd

080017f8 <draw_wide_tile>:

// Draw wide tile and draw text in it (in center or left-aligned)
void draw_wide_tile(const char *text, uint8_t tile_number, bool center_text,
                    ColorType color)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	4608      	mov	r0, r1
 8001802:	4611      	mov	r1, r2
 8001804:	461a      	mov	r2, r3
 8001806:	4603      	mov	r3, r0
 8001808:	70fb      	strb	r3, [r7, #3]
 800180a:	460b      	mov	r3, r1
 800180c:	70bb      	strb	r3, [r7, #2]
 800180e:	4613      	mov	r3, r2
 8001810:	803b      	strh	r3, [r7, #0]
  GFX_DrawRectangle(OFFSET_X_LEFT_BORDER,
                    (GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * tile_number,
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	4613      	mov	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	1a9b      	subs	r3, r3, r2
 800181a:	009b      	lsls	r3, r3, #2
  GFX_DrawRectangle(OFFSET_X_LEFT_BORDER,
 800181c:	4619      	mov	r1, r3
 800181e:	883b      	ldrh	r3, [r7, #0]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	231b      	movs	r3, #27
 8001824:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8001828:	2003      	movs	r0, #3
 800182a:	f7fe fefa 	bl	8000622 <GFX_DrawRectangle>
                    WIDE_TILE_WIDTH, WIDE_TILE_HEIGHT, color);

  uint32_t x_pos = TEXT_X_OFFSET_WIDE_TILE;
 800182e:	230a      	movs	r3, #10
 8001830:	60fb      	str	r3, [r7, #12]
  uint32_t y_pos = ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * tile_number) +
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	4613      	mov	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	330a      	adds	r3, #10
 800183e:	60bb      	str	r3, [r7, #8]
                   TEXT_Y_OFFSET_WIDE_TILE;

  if (center_text == true)
 8001840:	78bb      	ldrb	r3, [r7, #2]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d006      	beq.n	8001854 <draw_wide_tile+0x5c>
    {
      x_pos = find_x_to_center_text(text, OFFSET_X_LEFT_BORDER,
 8001846:	f240 123d 	movw	r2, #317	; 0x13d
 800184a:	2103      	movs	r1, #3
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 fb13 	bl	8001e78 <find_x_to_center_text>
 8001852:	60f8      	str	r0, [r7, #12]
                                    (ILI9341_TFTWIDTH - OFFSET_X_LEFT_BORDER));
    }

  if (NULL != text)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <draw_wide_tile+0x72>
    {
      GFX_DrawString(x_pos, y_pos, text, HMI_TEXT_COLOR);
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	f7fe fdae 	bl	80003c4 <GFX_DrawString>
    }

  return;
 8001868:	bf00      	nop
 800186a:	bf00      	nop
}
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <draw_small_tile_text>:

void draw_small_tile_text(uint8_t tile_number, const char *text,
                          bool center_text)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af02      	add	r7, sp, #8
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
 8001880:	4613      	mov	r3, r2
 8001882:	71bb      	strb	r3, [r7, #6]
  uint8_t column = tile_number / 5;
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	4a2b      	ldr	r2, [pc, #172]	; (8001934 <draw_small_tile_text+0xc0>)
 8001888:	fba2 2303 	umull	r2, r3, r2, r3
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	76fb      	strb	r3, [r7, #27]
  uint8_t row = tile_number % 5;
 8001890:	79fa      	ldrb	r2, [r7, #7]
 8001892:	4b28      	ldr	r3, [pc, #160]	; (8001934 <draw_small_tile_text+0xc0>)
 8001894:	fba3 1302 	umull	r1, r3, r3, r2
 8001898:	0899      	lsrs	r1, r3, #2
 800189a:	460b      	mov	r3, r1
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	76bb      	strb	r3, [r7, #26]
  uint32_t x_pos_left_border = (column * OFFSET_X_SECOND_COLUMN) +
 80018a4:	7efa      	ldrb	r2, [r7, #27]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	015b      	lsls	r3, r3, #5
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	3317      	adds	r3, #23
 80018b2:	617b      	str	r3, [r7, #20]
                               OFFSET_X_LEFT_BORDER + OFFSET_X_CURSOR_POINTER;
  uint32_t x_pos_right_border = (column * OFFSET_X_SECOND_COLUMN) +
 80018b4:	7efa      	ldrb	r2, [r7, #27]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	015b      	lsls	r3, r3, #5
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	339e      	adds	r3, #158	; 0x9e
 80018c2:	613b      	str	r3, [r7, #16]
                                OFFSET_X_LEFT_BORDER + SMALL_TILE_WIDTH;
  uint32_t x_pos = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]

  uint32_t y_pos = (row * DISTANCE_Y_BETWEEN_TILES) + OFFSET_Y_FIRST_TILE +
 80018c8:	7eba      	ldrb	r2, [r7, #26]
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	332f      	adds	r3, #47	; 0x2f
 80018d6:	60fb      	str	r3, [r7, #12]
                   TEXT_X_OFFSET_SMALL_TILE;
  uint32_t width = strlen(text) * (FONT_HEIGHT + FONT_SPACE);
 80018d8:	6838      	ldr	r0, [r7, #0]
 80018da:	f7fe fc37 	bl	800014c <strlen>
 80018de:	4602      	mov	r2, r0
 80018e0:	4613      	mov	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4413      	add	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]

  if (true == center_text)
 80018e8:	79bb      	ldrb	r3, [r7, #6]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <draw_small_tile_text+0x88>
    {
      x_pos =
          find_x_to_center_text(text, x_pos_left_border, x_pos_right_border);
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	6979      	ldr	r1, [r7, #20]
 80018f2:	6838      	ldr	r0, [r7, #0]
 80018f4:	f000 fac0 	bl	8001e78 <find_x_to_center_text>
 80018f8:	61f8      	str	r0, [r7, #28]
 80018fa:	e002      	b.n	8001902 <draw_small_tile_text+0x8e>
    }
  else
    {
      x_pos = x_pos_left_border + 1;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3301      	adds	r3, #1
 8001900:	61fb      	str	r3, [r7, #28]
    }

  GFX_DrawFillRectangle(x_pos, y_pos, width, FONT_HEIGHT, HMI_BACKGROUND_COLOR);
 8001902:	69f8      	ldr	r0, [r7, #28]
 8001904:	68f9      	ldr	r1, [r7, #12]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	b29a      	uxth	r2, r3
 800190a:	2300      	movs	r3, #0
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2308      	movs	r3, #8
 8001910:	f7fe feb4 	bl	800067c <GFX_DrawFillRectangle>

  if (NULL != text)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <draw_small_tile_text+0xb6>
    {
      GFX_DrawString(x_pos, y_pos, text, HMI_TEXT_COLOR);
 800191a:	69f8      	ldr	r0, [r7, #28]
 800191c:	68f9      	ldr	r1, [r7, #12]
 800191e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	f7fe fd4e 	bl	80003c4 <GFX_DrawString>
    }

  return;
 8001928:	bf00      	nop
 800192a:	bf00      	nop
}
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	cccccccd 	.word	0xcccccccd

08001938 <draw_mm_cursor>:

// Draw main menu cursor on active tile
void draw_mm_cursor(ColorType color, uint8_t active_tile)
{
 8001938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193a:	b08f      	sub	sp, #60	; 0x3c
 800193c:	af04      	add	r7, sp, #16
 800193e:	4603      	mov	r3, r0
 8001940:	460a      	mov	r2, r1
 8001942:	80fb      	strh	r3, [r7, #6]
 8001944:	4613      	mov	r3, r2
 8001946:	717b      	strb	r3, [r7, #5]
  uint8_t column = active_tile / 5;
 8001948:	797b      	ldrb	r3, [r7, #5]
 800194a:	4a2d      	ldr	r2, [pc, #180]	; (8001a00 <draw_mm_cursor+0xc8>)
 800194c:	fba2 2303 	umull	r2, r3, r2, r3
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t row = active_tile % 5;
 8001956:	797a      	ldrb	r2, [r7, #5]
 8001958:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <draw_mm_cursor+0xc8>)
 800195a:	fba3 1302 	umull	r1, r3, r3, r2
 800195e:	0899      	lsrs	r1, r3, #2
 8001960:	460b      	mov	r3, r1
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  // to draw cursor not on the tile but in the tile i add LINE_SIZE to the
  // offset
  uint32_t x0_pos =
      (column * OFFSET_X_SECOND_COLUMN) + LINE_SIZE + OFFSET_X_LEFT_BORDER;
 800196c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	015b      	lsls	r3, r3, #5
 8001978:	1a9b      	subs	r3, r3, r2
  uint32_t x0_pos =
 800197a:	3304      	adds	r3, #4
 800197c:	623b      	str	r3, [r7, #32]

  uint32_t y0_pos =
      (row * DISTANCE_Y_BETWEEN_TILES) + OFFSET_Y_FIRST_TILE + LINE_SIZE;
 800197e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4413      	add	r3, r2
  uint32_t y0_pos =
 800198c:	331e      	adds	r3, #30
 800198e:	61fb      	str	r3, [r7, #28]

  uint32_t x1_pos =
      (column * OFFSET_X_SECOND_COLUMN) + LINE_SIZE + OFFSET_X_LEFT_BORDER;
 8001990:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	015b      	lsls	r3, r3, #5
 800199c:	1a9b      	subs	r3, r3, r2
  uint32_t x1_pos =
 800199e:	3304      	adds	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
  uint32_t y1_pos = (row * DISTANCE_Y_BETWEEN_TILES) + OFFSET_Y_FIRST_TILE +
 80019a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4413      	add	r3, r2
 80019b0:	3344      	adds	r3, #68	; 0x44
 80019b2:	617b      	str	r3, [r7, #20]
                    SMALL_TILE_HEIGHT - LINE_SIZE;

  uint32_t x2_pos = (column * OFFSET_X_SECOND_COLUMN) + OFFSET_X_LEFT_BORDER +
 80019b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	015b      	lsls	r3, r3, #5
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	3317      	adds	r3, #23
 80019c4:	613b      	str	r3, [r7, #16]
                    OFFSET_X_CURSOR_POINTER;

  uint32_t y2_pos = (row * DISTANCE_Y_BETWEEN_TILES) + OFFSET_Y_FIRST_TILE +
 80019c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	3331      	adds	r3, #49	; 0x31
 80019d6:	60fb      	str	r3, [r7, #12]
                    (SMALL_TILE_HEIGHT / 2);

  GFX_DrawFillTriangle(x0_pos, y0_pos, x1_pos, y1_pos, x2_pos, y2_pos, color);
 80019d8:	6a38      	ldr	r0, [r7, #32]
 80019da:	69fc      	ldr	r4, [r7, #28]
 80019dc:	69bd      	ldr	r5, [r7, #24]
 80019de:	697e      	ldr	r6, [r7, #20]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	88f9      	ldrh	r1, [r7, #6]
 80019e6:	9102      	str	r1, [sp, #8]
 80019e8:	9201      	str	r2, [sp, #4]
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	4633      	mov	r3, r6
 80019ee:	462a      	mov	r2, r5
 80019f0:	4621      	mov	r1, r4
 80019f2:	f7fe fe65 	bl	80006c0 <GFX_DrawFillTriangle>

  return;
 80019f6:	bf00      	nop
}
 80019f8:	372c      	adds	r7, #44	; 0x2c
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019fe:	bf00      	nop
 8001a00:	cccccccd 	.word	0xcccccccd

08001a04 <draw_main_screen>:

// Draw main menu screen - header tile + 10 read/write tiles
void draw_main_screen(uint8_t active_tile)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  ILI9341_ClearDisplay(HMI_BACKGROUND_COLOR);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff f8de 	bl	8000bd0 <ILI9341_ClearDisplay>
  draw_wide_tile("XGB PLC COMMUNICATION", 0, true, HMI_TILE_COLOR);
 8001a14:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	480d      	ldr	r0, [pc, #52]	; (8001a54 <draw_main_screen+0x50>)
 8001a1e:	f7ff feeb 	bl	80017f8 <draw_wide_tile>
  for (uint8_t i = 0; i < 10; i++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
 8001a26:	e008      	b.n	8001a3a <draw_main_screen+0x36>
    {
      draw_small_tile(i, NULL, false);
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fea4 	bl	800177c <draw_small_tile>
  for (uint8_t i = 0; i < 10; i++)
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	3301      	adds	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	2b09      	cmp	r3, #9
 8001a3e:	d9f3      	bls.n	8001a28 <draw_main_screen+0x24>
    }

  draw_mm_cursor(ILI9341_DARKCYAN, active_tile);
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	4619      	mov	r1, r3
 8001a44:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001a48:	f7ff ff76 	bl	8001938 <draw_mm_cursor>
  return;
 8001a4c:	bf00      	nop
}
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	08005988 	.word	0x08005988

08001a58 <draw_edit_menu>:

// Draw edit menu screen - header tile + 5 config tiles
void draw_edit_menu(uint8_t active_main_tile)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08e      	sub	sp, #56	; 0x38
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]

  ILI9341_ClearDisplay(HMI_EDIT_MENU_COLOR);
 8001a62:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001a66:	f7ff f8b3 	bl	8000bd0 <ILI9341_ClearDisplay>

  char message[16] = {0};
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
  sprintf(message, "TILE NUMBER %d", active_main_tile);
 8001a7a:	79fa      	ldrb	r2, [r7, #7]
 8001a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a80:	491f      	ldr	r1, [pc, #124]	; (8001b00 <draw_edit_menu+0xa8>)
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fb3c 	bl	8005100 <siprintf>

  const char *tile_text[] = {
 8001a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <draw_edit_menu+0xac>)
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <draw_edit_menu+0xb0>)
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <draw_edit_menu+0xb4>)
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <draw_edit_menu+0xb8>)
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <draw_edit_menu+0xbc>)
 8001aa0:	623b      	str	r3, [r7, #32]
      message,        "Tile function:",  "Device Type:",
      "Device Size:", "Device Address:", "Confirm - Discard"};

  draw_wide_tile(tile_text[TILE_HEADER], TILE_HEADER, true, HMI_TILE_COLOR);
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2100      	movs	r1, #0
 8001aac:	f7ff fea4 	bl	80017f8 <draw_wide_tile>

  for (uint8_t i = TILE_LEFT_ALLIGN_START; i <= TILE_LEFT_ALLIGN_END; i++)
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ab6:	e013      	b.n	8001ae0 <draw_edit_menu+0x88>
    {
      draw_wide_tile(tile_text[i], i, false, HMI_TILE_COLOR);
 8001ab8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 8001ac8:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8001acc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f7ff fe91 	bl	80017f8 <draw_wide_tile>
  for (uint8_t i = TILE_LEFT_ALLIGN_START; i <= TILE_LEFT_ALLIGN_END; i++)
 8001ad6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ada:	3301      	adds	r3, #1
 8001adc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ae0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d9e7      	bls.n	8001ab8 <draw_edit_menu+0x60>
    }

  draw_wide_tile(tile_text[TILE_EXIT], TILE_EXIT, true, HMI_TILE_COLOR);
 8001ae8:	6a38      	ldr	r0, [r7, #32]
 8001aea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001aee:	2201      	movs	r2, #1
 8001af0:	2105      	movs	r1, #5
 8001af2:	f7ff fe81 	bl	80017f8 <draw_wide_tile>

  return;
 8001af6:	bf00      	nop
}
 8001af8:	3738      	adds	r7, #56	; 0x38
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	080059a0 	.word	0x080059a0
 8001b04:	080059b0 	.word	0x080059b0
 8001b08:	080059c0 	.word	0x080059c0
 8001b0c:	080059d0 	.word	0x080059d0
 8001b10:	080059e0 	.word	0x080059e0
 8001b14:	080059f0 	.word	0x080059f0

08001b18 <draw_arrows_icon>:

// Draw arrows icon when address edit is selected
void draw_arrows_icon(ColorType color)
{
 8001b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af04      	add	r7, sp, #16
 8001b1e:	4603      	mov	r3, r0
 8001b20:	80fb      	strh	r3, [r7, #6]
  uint32_t x_pos =
      find_x_to_center_text("000000", STD_SW_LEFT_LIMIT, STD_SW_RIGHT_LIMIT);
 8001b22:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8001b26:	2196      	movs	r1, #150	; 0x96
 8001b28:	481f      	ldr	r0, [pc, #124]	; (8001ba8 <draw_arrows_icon+0x90>)
 8001b2a:	f000 f9a5 	bl	8001e78 <find_x_to_center_text>
 8001b2e:	60f8      	str	r0, [r7, #12]

  x_pos = x_pos + (8 * (FONT_WIDTH + FONT_SPACE));
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3330      	adds	r3, #48	; 0x30
 8001b34:	60fb      	str	r3, [r7, #12]

  uint32_t y_pos = ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * TILE_ADDRESS) +
 8001b36:	237a      	movs	r3, #122	; 0x7a
 8001b38:	60bb      	str	r3, [r7, #8]
                   TEXT_Y_OFFSET_WIDE_TILE;

  // draw 2 arrows
  GFX_DrawFillTriangle(x_pos, y_pos - 1, x_pos - 4, y_pos + 3, x_pos + 4,
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	461c      	mov	r4, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	3b04      	subs	r3, #4
 8001b46:	461d      	mov	r5, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	3303      	adds	r3, #3
 8001b4c:	461e      	mov	r6, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	3304      	adds	r3, #4
 8001b52:	461a      	mov	r2, r3
                       y_pos + 3, color);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	3303      	adds	r3, #3
  GFX_DrawFillTriangle(x_pos, y_pos - 1, x_pos - 4, y_pos + 3, x_pos + 4,
 8001b58:	4619      	mov	r1, r3
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	9302      	str	r3, [sp, #8]
 8001b5e:	9101      	str	r1, [sp, #4]
 8001b60:	9200      	str	r2, [sp, #0]
 8001b62:	4633      	mov	r3, r6
 8001b64:	462a      	mov	r2, r5
 8001b66:	4621      	mov	r1, r4
 8001b68:	f7fe fdaa 	bl	80006c0 <GFX_DrawFillTriangle>
  GFX_DrawFillTriangle(x_pos, y_pos + 9, x_pos - 4, y_pos + 5, x_pos + 4,
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	3309      	adds	r3, #9
 8001b72:	461c      	mov	r4, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3b04      	subs	r3, #4
 8001b78:	461d      	mov	r5, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	3305      	adds	r3, #5
 8001b7e:	461e      	mov	r6, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3304      	adds	r3, #4
 8001b84:	461a      	mov	r2, r3
                       y_pos + 5, color);
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3305      	adds	r3, #5
  GFX_DrawFillTriangle(x_pos, y_pos + 9, x_pos - 4, y_pos + 5, x_pos + 4,
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	9302      	str	r3, [sp, #8]
 8001b90:	9101      	str	r1, [sp, #4]
 8001b92:	9200      	str	r2, [sp, #0]
 8001b94:	4633      	mov	r3, r6
 8001b96:	462a      	mov	r2, r5
 8001b98:	4621      	mov	r1, r4
 8001b9a:	f7fe fd91 	bl	80006c0 <GFX_DrawFillTriangle>
  return;
 8001b9e:	bf00      	nop
}
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	08005a04 	.word	0x08005a04

08001bac <draw_address_char>:

// Draw digits 0-9 when choosing device address
void draw_address_char(const hmi_edit_cursors_t *p_cursors)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af02      	add	r7, sp, #8
 8001bb2:	6078      	str	r0, [r7, #4]

  uint32_t x_pos =
      find_x_to_center_text("000000", STD_SW_LEFT_LIMIT, STD_SW_RIGHT_LIMIT);
 8001bb4:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8001bb8:	2196      	movs	r1, #150	; 0x96
 8001bba:	4814      	ldr	r0, [pc, #80]	; (8001c0c <draw_address_char+0x60>)
 8001bbc:	f000 f95c 	bl	8001e78 <find_x_to_center_text>
 8001bc0:	60f8      	str	r0, [r7, #12]
  ;
  // offset for next letter
  x_pos = x_pos + (p_cursors->horiz_address * (FONT_WIDTH + FONT_SPACE));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	791b      	ldrb	r3, [r3, #4]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]

  uint32_t y_pos = ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * TILE_ADDRESS) +
 8001bd8:	237a      	movs	r3, #122	; 0x7a
 8001bda:	60bb      	str	r3, [r7, #8]
                   TEXT_Y_OFFSET_WIDE_TILE;

  GFX_DrawFillRectangle(x_pos, y_pos, FONT_WIDTH, FONT_HEIGHT,
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2308      	movs	r3, #8
 8001be8:	2205      	movs	r2, #5
 8001bea:	f7fe fd47 	bl	800067c <GFX_DrawFillRectangle>
                        HMI_EDIT_MENU_COLOR);

  GFX_DrawChar(x_pos, y_pos, p_cursors->vert_address_num + '0', HMI_TEXT_COLOR);
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	795b      	ldrb	r3, [r3, #5]
 8001bf6:	3330      	adds	r3, #48	; 0x30
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001bfe:	f7fe fb63 	bl	80002c8 <GFX_DrawChar>

  return;
 8001c02:	bf00      	nop
}
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	08005a04 	.word	0x08005a04

08001c10 <draw_exit_cursor>:

// Draw highlight line below Confirm or Discard option in exit tile
// also used to erase this highlight
void draw_exit_cursor(const hmi_edit_cursors_t *p_cursors, ColorType color)
{
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]

  uint32_t x_pos =
      find_x_to_center_text("Confirm - Discard", OFFSET_X_LEFT_BORDER,
 8001c1c:	f240 123d 	movw	r2, #317	; 0x13d
 8001c20:	2103      	movs	r1, #3
 8001c22:	4812      	ldr	r0, [pc, #72]	; (8001c6c <draw_exit_cursor+0x5c>)
 8001c24:	f000 f928 	bl	8001e78 <find_x_to_center_text>
 8001c28:	6178      	str	r0, [r7, #20]
                            (ILI9341_TFTWIDTH - OFFSET_X_LEFT_BORDER));
  ;

  uint32_t x_offset = ((strlen("Confirm - ") * (FONT_WIDTH + FONT_SPACE))) *
                      p_cursors->horiz_exit;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	799b      	ldrb	r3, [r3, #6]
 8001c2e:	461a      	mov	r2, r3
  uint32_t x_offset = ((strlen("Confirm - ") * (FONT_WIDTH + FONT_SPACE))) *
 8001c30:	4613      	mov	r3, r2
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	1a9b      	subs	r3, r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	613b      	str	r3, [r7, #16]

  x_pos = x_pos + x_offset;
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4413      	add	r3, r2
 8001c40:	617b      	str	r3, [r7, #20]

  uint32_t y_pos = ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * TILE_EXIT) +
 8001c42:	239f      	movs	r3, #159	; 0x9f
 8001c44:	60fb      	str	r3, [r7, #12]
                   TEXT_Y_OFFSET_WIDE_TILE + (FONT_HEIGHT + FONT_SPACE);

  uint32_t len = strlen("Confirm") * (FONT_WIDTH + FONT_SPACE);
 8001c46:	232a      	movs	r3, #42	; 0x2a
 8001c48:	60bb      	str	r3, [r7, #8]

  GFX_DrawLine(x_pos, y_pos, x_pos + len, y_pos, color);
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4413      	add	r3, r2
 8001c54:	461c      	mov	r4, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	887b      	ldrh	r3, [r7, #2]
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	4622      	mov	r2, r4
 8001c60:	f7fe fc9c 	bl	800059c <GFX_DrawLine>

  return;
 8001c64:	bf00      	nop
}
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd90      	pop	{r4, r7, pc}
 8001c6c:	080059f0 	.word	0x080059f0

08001c70 <draw_address_cursor>:

// Draw highlight line below address chars
// also used to erase this highlight
void draw_address_cursor(const hmi_edit_cursors_t *p_cursors, ColorType color)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
  uint32_t x_pos =
      find_x_to_center_text("000000", STD_SW_LEFT_LIMIT, STD_SW_RIGHT_LIMIT);
 8001c7c:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8001c80:	2196      	movs	r1, #150	; 0x96
 8001c82:	4812      	ldr	r0, [pc, #72]	; (8001ccc <draw_address_cursor+0x5c>)
 8001c84:	f000 f8f8 	bl	8001e78 <find_x_to_center_text>
 8001c88:	60f8      	str	r0, [r7, #12]
  ;
  // offset for next letter
  x_pos = x_pos + (p_cursors->horiz_address * (FONT_WIDTH + FONT_SPACE));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	791b      	ldrb	r3, [r3, #4]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]

  // position of character
  uint32_t y_pos = ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * TILE_ADDRESS) +
 8001ca0:	237a      	movs	r3, #122	; 0x7a
 8001ca2:	60bb      	str	r3, [r7, #8]
                   TEXT_Y_OFFSET_WIDE_TILE;

  // move it below characater
  y_pos = y_pos + FONT_HEIGHT + 1;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	3309      	adds	r3, #9
 8001ca8:	60bb      	str	r3, [r7, #8]

  GFX_DrawLine(x_pos, y_pos, x_pos + FONT_WIDTH, y_pos, color);
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3305      	adds	r3, #5
 8001cb2:	461c      	mov	r4, r3
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	887b      	ldrh	r3, [r7, #2]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	4622      	mov	r2, r4
 8001cbe:	f7fe fc6d 	bl	800059c <GFX_DrawLine>

  return;
 8001cc2:	bf00      	nop
}
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd90      	pop	{r4, r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	08005a04 	.word	0x08005a04

08001cd0 <draw_update_tile_number>:

// Draw new number when choosing horizontally on header tile
void draw_update_tile_number(char number)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  uint32_t x_pos =
      find_x_to_center_text("TILE NUMBER  ", OFFSET_X_LEFT_BORDER,
 8001cda:	f240 123d 	movw	r2, #317	; 0x13d
 8001cde:	2103      	movs	r1, #3
 8001ce0:	480e      	ldr	r0, [pc, #56]	; (8001d1c <draw_update_tile_number+0x4c>)
 8001ce2:	f000 f8c9 	bl	8001e78 <find_x_to_center_text>
 8001ce6:	60f8      	str	r0, [r7, #12]
                            (ILI9341_TFTWIDTH - OFFSET_X_LEFT_BORDER));

  x_pos = x_pos + strlen("TILE NUMBER ") * (FONT_WIDTH + FONT_SPACE);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3348      	adds	r3, #72	; 0x48
 8001cec:	60fb      	str	r3, [r7, #12]

  uint32_t y_pos = ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * TILE_HEADER) +
 8001cee:	230a      	movs	r3, #10
 8001cf0:	60bb      	str	r3, [r7, #8]
                   TEXT_Y_OFFSET_WIDE_TILE;

  GFX_DrawFillRectangle(x_pos, y_pos, FONT_WIDTH, FONT_HEIGHT,
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	2205      	movs	r2, #5
 8001d00:	f7fe fcbc 	bl	800067c <GFX_DrawFillRectangle>
                        HMI_EDIT_MENU_COLOR);

  GFX_DrawChar(x_pos, y_pos, number, HMI_TEXT_COLOR);
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	79fa      	ldrb	r2, [r7, #7]
 8001d0a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d0e:	f7fe fadb 	bl	80002c8 <GFX_DrawChar>

  return;
 8001d12:	bf00      	nop
}
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	08005a0c 	.word	0x08005a0c

08001d20 <draw_erase_std_switch_txt>:

void draw_erase_std_switch_txt(const hmi_edit_cursors_t *p_cursors,
                               const edit_option_t **p_std_switch)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t std_switch_number = p_cursors->vert_tile;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	61fb      	str	r3, [r7, #28]

  // select switch cursor depending on tile cursor
  uint32_t switch_cursor = ut_get_switch_cursor(p_cursors);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f8c0 	bl	8001eb6 <ut_get_switch_cursor>
 8001d36:	61b8      	str	r0, [r7, #24]

  uint32_t lenght_to_erase =
      strlen(p_std_switch[std_switch_number][switch_cursor].display_text) *
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe f9fe 	bl	800014c <strlen>
 8001d50:	4602      	mov	r2, r0
  uint32_t lenght_to_erase =
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
      (FONT_WIDTH + FONT_SPACE);

  uint32_t x_pos = find_x_to_center_text(
      p_std_switch[std_switch_number][switch_cursor].display_text,
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	681b      	ldr	r3, [r3, #0]
  uint32_t x_pos = find_x_to_center_text(
 8001d6e:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8001d72:	2196      	movs	r1, #150	; 0x96
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 f87f 	bl	8001e78 <find_x_to_center_text>
 8001d7a:	6138      	str	r0, [r7, #16]
      STD_SW_LEFT_LIMIT, STD_SW_RIGHT_LIMIT);
  ;
  uint32_t y_pos =
      ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * p_cursors->vert_tile) +
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	1a9b      	subs	r3, r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
  uint32_t y_pos =
 8001d8a:	330a      	adds	r3, #10
 8001d8c:	60fb      	str	r3, [r7, #12]
      TEXT_Y_OFFSET_WIDE_TILE;

  // clear text
  GFX_DrawFillRectangle(x_pos, y_pos, lenght_to_erase, FONT_HEIGHT,
 8001d8e:	6938      	ldr	r0, [r7, #16]
 8001d90:	68f9      	ldr	r1, [r7, #12]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	f7fe fc6d 	bl	800067c <GFX_DrawFillRectangle>
                        HMI_EDIT_MENU_COLOR);

  return;
 8001da2:	bf00      	nop
}
 8001da4:	3720      	adds	r7, #32
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <draw_std_switch_text>:

void draw_std_switch_text(const hmi_edit_cursors_t *p_cursors,
                          uint8_t switch_number,
                          const edit_option_t **p_std_switch)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b088      	sub	sp, #32
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	460b      	mov	r3, r1
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	72fb      	strb	r3, [r7, #11]
  // select switch cursor depending on tile cursor
  uint32_t switch_cursor = ut_get_switch_cursor(p_cursors);
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f87c 	bl	8001eb6 <ut_get_switch_cursor>
 8001dbe:	61f8      	str	r0, [r7, #28]

  uint32_t x_pos = find_x_to_center_text(
      p_std_switch[switch_number][switch_cursor].display_text,
 8001dc0:	7afb      	ldrb	r3, [r7, #11]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	681b      	ldr	r3, [r3, #0]
  uint32_t x_pos = find_x_to_center_text(
 8001dd2:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8001dd6:	2196      	movs	r1, #150	; 0x96
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 f84d 	bl	8001e78 <find_x_to_center_text>
 8001dde:	61b8      	str	r0, [r7, #24]
      STD_SW_LEFT_LIMIT, STD_SW_RIGHT_LIMIT);
  ;
  uint32_t y_pos = ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * switch_number) +
 8001de0:	7afa      	ldrb	r2, [r7, #11]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	1a9b      	subs	r3, r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	330a      	adds	r3, #10
 8001dec:	617b      	str	r3, [r7, #20]
                   TEXT_Y_OFFSET_WIDE_TILE;

  // select a text from an array of arrays of strings (std_switch)
  GFX_DrawString(x_pos, y_pos,
 8001dee:	69b8      	ldr	r0, [r7, #24]
 8001df0:	6979      	ldr	r1, [r7, #20]
                 p_std_switch[switch_number][switch_cursor].display_text,
 8001df2:	7afb      	ldrb	r3, [r7, #11]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4413      	add	r3, r2
 8001e02:	681a      	ldr	r2, [r3, #0]
  GFX_DrawString(x_pos, y_pos,
 8001e04:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e08:	f7fe fadc 	bl	80003c4 <GFX_DrawString>
                 HMI_TEXT_COLOR);

  return;
 8001e0c:	bf00      	nop
}
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <draw_cursor_initial_values>:

void draw_cursor_initial_values(const hmi_edit_cursors_t *p_cursors,
                                const edit_option_t **p_std_switch)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  // standard switches
  for (uint8_t i = TILE_STD_SWITCH_START; i <= TILE_STD_SWITCH_END; i++)
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
 8001e22:	e008      	b.n	8001e36 <draw_cursor_initial_values+0x22>
    {
      draw_std_switch_text(p_cursors, i, p_std_switch);
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffbd 	bl	8001daa <draw_std_switch_text>
  for (uint8_t i = TILE_STD_SWITCH_START; i <= TILE_STD_SWITCH_END; i++)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	3301      	adds	r3, #1
 8001e34:	75fb      	strb	r3, [r7, #23]
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d9f3      	bls.n	8001e24 <draw_cursor_initial_values+0x10>
    }

  // address switch
  uint32_t x_pos =
      find_x_to_center_text("000000", STD_SW_LEFT_LIMIT, STD_SW_RIGHT_LIMIT);
 8001e3c:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8001e40:	2196      	movs	r1, #150	; 0x96
 8001e42:	480c      	ldr	r0, [pc, #48]	; (8001e74 <draw_cursor_initial_values+0x60>)
 8001e44:	f000 f818 	bl	8001e78 <find_x_to_center_text>
 8001e48:	6138      	str	r0, [r7, #16]
  ;
  uint32_t y_pos = ((GAP_Y_BETWEEN_TILES + WIDE_TILE_HEIGHT) * TILE_ADDRESS) +
 8001e4a:	237a      	movs	r3, #122	; 0x7a
 8001e4c:	60fb      	str	r3, [r7, #12]
                   TEXT_Y_OFFSET_WIDE_TILE;

  GFX_DrawString(x_pos, y_pos, "000000", HMI_TEXT_COLOR);
 8001e4e:	6938      	ldr	r0, [r7, #16]
 8001e50:	68f9      	ldr	r1, [r7, #12]
 8001e52:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e56:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <draw_cursor_initial_values+0x60>)
 8001e58:	f7fe fab4 	bl	80003c4 <GFX_DrawString>

  // tile selection cursor
  draw_wide_tile(NULL, TILE_HEADER, false, HMI_HIGHLIGHT_TILE_COLOR);
 8001e5c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e60:	2200      	movs	r2, #0
 8001e62:	2100      	movs	r1, #0
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff fcc7 	bl	80017f8 <draw_wide_tile>

  return;
 8001e6a:	bf00      	nop
}
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	08005a04 	.word	0x08005a04

08001e78 <find_x_to_center_text>:

/*** UTILITY FUNCTIONS **/

static uint32_t find_x_to_center_text(const char *text, uint32_t left_border,
                                      uint32_t right_border)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  uint32_t string_lenght = strlen(text) * (FONT_WIDTH + FONT_SPACE);
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f7fe f961 	bl	800014c <strlen>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	61fb      	str	r3, [r7, #28]
  uint32_t tile_width = right_border - left_border;
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	61bb      	str	r3, [r7, #24]
  uint32_t start_text_pos = ((tile_width - string_lenght) / 2) + left_border;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	085b      	lsrs	r3, r3, #1
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
  return start_text_pos;
 8001eac:	697b      	ldr	r3, [r7, #20]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <ut_get_switch_cursor>:

// this function return value of the cursor of current tile
static uint32_t ut_get_switch_cursor(const hmi_edit_cursors_t *p_cursors)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b085      	sub	sp, #20
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  uint32_t position = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  switch (p_cursors->vert_tile)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d00e      	beq.n	8001ee8 <ut_get_switch_cursor+0x32>
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	dc10      	bgt.n	8001ef0 <ut_get_switch_cursor+0x3a>
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d002      	beq.n	8001ed8 <ut_get_switch_cursor+0x22>
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d004      	beq.n	8001ee0 <ut_get_switch_cursor+0x2a>
      break;
    case (TILE_HEADER):
    case (TILE_ADDRESS):
    case (TILE_EXIT):
    default:
      break;
 8001ed6:	e00b      	b.n	8001ef0 <ut_get_switch_cursor+0x3a>
      position = p_cursors->horiz_fun;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	785b      	ldrb	r3, [r3, #1]
 8001edc:	60fb      	str	r3, [r7, #12]
      break;
 8001ede:	e008      	b.n	8001ef2 <ut_get_switch_cursor+0x3c>
      position = p_cursors->horiz_dev;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	789b      	ldrb	r3, [r3, #2]
 8001ee4:	60fb      	str	r3, [r7, #12]
      break;
 8001ee6:	e004      	b.n	8001ef2 <ut_get_switch_cursor+0x3c>
      position = p_cursors->horiz_size;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	78db      	ldrb	r3, [r3, #3]
 8001eec:	60fb      	str	r3, [r7, #12]
      break;
 8001eee:	e000      	b.n	8001ef2 <ut_get_switch_cursor+0x3c>
      break;
 8001ef0:	bf00      	nop
    }

  return position;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
	...

08001f00 <em_open_edit_menu>:

/*** EDIT MENU FUNCTIONS **/

// open edit menu to save read/write function to tile
void em_open_edit_menu(const hmi_main_screen_t *p_main_screen_data)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  draw_edit_menu(p_main_screen_data->active_main_tile);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fda3 	bl	8001a58 <draw_edit_menu>
  init_edit_menu_cursors();
 8001f12:	f000 fbed 	bl	80026f0 <init_edit_menu_cursors>
  draw_cursor_initial_values(&edit_menu_cursors, std_switches);
 8001f16:	4904      	ldr	r1, [pc, #16]	; (8001f28 <em_open_edit_menu+0x28>)
 8001f18:	4804      	ldr	r0, [pc, #16]	; (8001f2c <em_open_edit_menu+0x2c>)
 8001f1a:	f7ff ff7b 	bl	8001e14 <draw_cursor_initial_values>

  return;
 8001f1e:	bf00      	nop
}
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000008 	.word	0x20000008
 8001f2c:	200001a4 	.word	0x200001a4

08001f30 <em_active_screen>:

// active screen super loop
hmi_change_screen_t em_active_screen(hmi_main_screen_t *p_main_screen_data)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  // leaving possibilities to enter other screens from edit menu
  hmi_change_screen_t ret_action = OPEN_MAIN_MENU;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	73fb      	strb	r3, [r7, #15]

  while (1)
    {
      ret_action = edit_menu_if_button_pressed(p_main_screen_data);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f813 	bl	8001f68 <edit_menu_if_button_pressed>
 8001f42:	4603      	mov	r3, r0
 8001f44:	73fb      	strb	r3, [r7, #15]

      if (NO_CHANGE != ret_action)
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f7      	beq.n	8001f3c <em_active_screen+0xc>
        {
          if (SAVE_DATA_TO_TILE == ret_action)
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d104      	bne.n	8001f5c <em_active_screen+0x2c>
            {
        	  save_data_to_tile(p_main_screen_data);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fb5a 	bl	800260c <save_data_to_tile>
                  ret_action = OPEN_MAIN_MENU;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	73fb      	strb	r3, [r7, #15]
            }
          break;
 8001f5c:	bf00      	nop
        }
    }

  return ret_action;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <edit_menu_if_button_pressed>:

static hmi_change_screen_t
edit_menu_if_button_pressed(hmi_main_screen_t *p_main_screen_data)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  hmi_change_screen_t ret_action = NO_CHANGE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]
  buttons_state_t pending_flag = buttons_get_pending_flag();
 8001f74:	f7fe f926 	bl	80001c4 <buttons_get_pending_flag>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	73bb      	strb	r3, [r7, #14]

  if (IDLE != pending_flag)
 8001f7c:	7bbb      	ldrb	r3, [r7, #14]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d01f      	beq.n	8001fc2 <edit_menu_if_button_pressed+0x5a>
    {
      switch (pending_flag)
 8001f82:	7bbb      	ldrb	r3, [r7, #14]
 8001f84:	2b05      	cmp	r3, #5
 8001f86:	d015      	beq.n	8001fb4 <edit_menu_if_button_pressed+0x4c>
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	dc1c      	bgt.n	8001fc6 <edit_menu_if_button_pressed+0x5e>
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	dc02      	bgt.n	8001f96 <edit_menu_if_button_pressed+0x2e>
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	dc04      	bgt.n	8001f9e <edit_menu_if_button_pressed+0x36>
        case (ENTER_FLAG):
          (ret_action = action_if_enter_pressed(pending_flag));
          break;
        case (IDLE):
        default:
          break;
 8001f94:	e017      	b.n	8001fc6 <edit_menu_if_button_pressed+0x5e>
 8001f96:	3b03      	subs	r3, #3
      switch (pending_flag)
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d814      	bhi.n	8001fc6 <edit_menu_if_button_pressed+0x5e>
 8001f9c:	e005      	b.n	8001faa <edit_menu_if_button_pressed+0x42>
          select_horiz_cursor_to_edit(pending_flag, p_main_screen_data);
 8001f9e:	7bbb      	ldrb	r3, [r7, #14]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f816 	bl	8001fd4 <select_horiz_cursor_to_edit>
          break;
 8001fa8:	e00e      	b.n	8001fc8 <edit_menu_if_button_pressed+0x60>
          select_vert_cursor_to_edit(pending_flag);
 8001faa:	7bbb      	ldrb	r3, [r7, #14]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 f9c5 	bl	800233c <select_vert_cursor_to_edit>
          break;
 8001fb2:	e009      	b.n	8001fc8 <edit_menu_if_button_pressed+0x60>
          (ret_action = action_if_enter_pressed(pending_flag));
 8001fb4:	7bbb      	ldrb	r3, [r7, #14]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 faa6 	bl	8002508 <action_if_enter_pressed>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]
          break;
 8001fc0:	e002      	b.n	8001fc8 <edit_menu_if_button_pressed+0x60>
        }
    }
 8001fc2:	bf00      	nop
 8001fc4:	e000      	b.n	8001fc8 <edit_menu_if_button_pressed+0x60>
          break;
 8001fc6:	bf00      	nop

  return ret_action;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <select_horiz_cursor_to_edit>:
/*** HORIZONTAL CURSOR CHANGE FUNCTIONS **/

// change switch cursor position on screen (switch left/right)
static void select_horiz_cursor_to_edit(buttons_state_t pending_flag,
                                        hmi_main_screen_t *p_main_screen_data)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  switch (edit_menu_cursors.vert_tile)
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <select_horiz_cursor_to_edit+0x70>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	d824      	bhi.n	8002032 <select_horiz_cursor_to_edit+0x5e>
 8001fe8:	a201      	add	r2, pc, #4	; (adr r2, 8001ff0 <select_horiz_cursor_to_edit+0x1c>)
 8001fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fee:	bf00      	nop
 8001ff0:	08002009 	.word	0x08002009
 8001ff4:	08002015 	.word	0x08002015
 8001ff8:	08002015 	.word	0x08002015
 8001ffc:	08002015 	.word	0x08002015
 8002000:	0800201f 	.word	0x0800201f
 8002004:	08002029 	.word	0x08002029
    {
    case (TILE_HEADER):
      redraw_horiz_header(pending_flag, p_main_screen_data);
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	6839      	ldr	r1, [r7, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f000 f81b 	bl	8002048 <redraw_horiz_header>
      break;
 8002012:	e00e      	b.n	8002032 <select_horiz_cursor_to_edit+0x5e>

    case (TILE_DEVICE):
    case (TILE_FUNCTION):
    case (TILE_SIZE):
      redraw_horiz_std_switch(pending_flag);
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f854 	bl	80020c4 <redraw_horiz_std_switch>
      break;
 800201c:	e009      	b.n	8002032 <select_horiz_cursor_to_edit+0x5e>

    case (TILE_ADDRESS):
      redraw_horiz_address_switch(pending_flag);
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	4618      	mov	r0, r3
 8002022:	f000 f86b 	bl	80020fc <redraw_horiz_address_switch>
      break;
 8002026:	e004      	b.n	8002032 <select_horiz_cursor_to_edit+0x5e>

    case (TILE_EXIT):
      redraw_horiz_exit_switch(pending_flag);
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	4618      	mov	r0, r3
 800202c:	f000 f892 	bl	8002154 <redraw_horiz_exit_switch>
      break;
 8002030:	bf00      	nop
    }

  buttons_reset_flag(pending_flag);
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe f8f9 	bl	800022c <buttons_reset_flag>

  return;
 800203a:	bf00      	nop
}
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200001a4 	.word	0x200001a4

08002048 <redraw_horiz_header>:

// when cursor is on header tile -> if horizontal button is clicked
// change tile number
static void redraw_horiz_header(buttons_state_t pending_flag,
                                hmi_main_screen_t *p_main_screen_data)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
  // update value
  if (RIGHT_FLAG == pending_flag)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d111      	bne.n	800207e <redraw_horiz_header+0x36>
    {
      p_main_screen_data->active_main_tile =
          (p_main_screen_data->active_main_tile + 1) % 10;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <redraw_horiz_header+0x78>)
 8002062:	fb83 1302 	smull	r1, r3, r3, r2
 8002066:	1099      	asrs	r1, r3, #2
 8002068:	17d3      	asrs	r3, r2, #31
 800206a:	1ac9      	subs	r1, r1, r3
 800206c:	460b      	mov	r3, r1
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	1ad1      	subs	r1, r2, r3
      p_main_screen_data->active_main_tile =
 8002076:	b2ca      	uxtb	r2, r1
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	701a      	strb	r2, [r3, #0]
 800207c:	e014      	b.n	80020a8 <redraw_horiz_header+0x60>
    }
  else if (LEFT_FLAG == pending_flag)
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d111      	bne.n	80020a8 <redraw_horiz_header+0x60>
    {
      p_main_screen_data->active_main_tile =
          (p_main_screen_data->active_main_tile + 9) % 10;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	f103 0209 	add.w	r2, r3, #9
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <redraw_horiz_header+0x78>)
 800208e:	fb83 1302 	smull	r1, r3, r3, r2
 8002092:	1099      	asrs	r1, r3, #2
 8002094:	17d3      	asrs	r3, r2, #31
 8002096:	1ac9      	subs	r1, r1, r3
 8002098:	460b      	mov	r3, r1
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	1ad1      	subs	r1, r2, r3
      p_main_screen_data->active_main_tile =
 80020a2:	b2ca      	uxtb	r2, r1
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	701a      	strb	r2, [r3, #0]
    }

  // redraw
  draw_update_tile_number(p_main_screen_data->active_main_tile + '0');
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	3330      	adds	r3, #48	; 0x30
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fe0d 	bl	8001cd0 <draw_update_tile_number>

  return;
 80020b6:	bf00      	nop
}
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	66666667 	.word	0x66666667

080020c4 <redraw_horiz_std_switch>:

// update switches : function,device,size
static void redraw_horiz_std_switch(buttons_state_t pending_flag)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
  draw_erase_std_switch_txt(&edit_menu_cursors, std_switches);
 80020ce:	4909      	ldr	r1, [pc, #36]	; (80020f4 <redraw_horiz_std_switch+0x30>)
 80020d0:	4809      	ldr	r0, [pc, #36]	; (80020f8 <redraw_horiz_std_switch+0x34>)
 80020d2:	f7ff fe25 	bl	8001d20 <draw_erase_std_switch_txt>
  update_horiz_cursor_pos(pending_flag);
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 f855 	bl	8002188 <update_horiz_cursor_pos>
  draw_std_switch_text(&edit_menu_cursors, edit_menu_cursors.vert_tile,
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <redraw_horiz_std_switch+0x34>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <redraw_horiz_std_switch+0x30>)
 80020e4:	4619      	mov	r1, r3
 80020e6:	4804      	ldr	r0, [pc, #16]	; (80020f8 <redraw_horiz_std_switch+0x34>)
 80020e8:	f7ff fe5f 	bl	8001daa <draw_std_switch_text>
                      std_switches);
  return;
 80020ec:	bf00      	nop
}
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000008 	.word	0x20000008
 80020f8:	200001a4 	.word	0x200001a4

080020fc <redraw_horiz_address_switch>:

// redraw highlight under address digit
static void redraw_horiz_address_switch(buttons_state_t pending_flag)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
  draw_address_cursor(&edit_menu_cursors, HMI_EDIT_MENU_COLOR);
 8002106:	f240 31ef 	movw	r1, #1007	; 0x3ef
 800210a:	4811      	ldr	r0, [pc, #68]	; (8002150 <redraw_horiz_address_switch+0x54>)
 800210c:	f7ff fdb0 	bl	8001c70 <draw_address_cursor>
  update_horiz_cursor_pos(pending_flag);
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f838 	bl	8002188 <update_horiz_cursor_pos>

  // load stored value into cursor
  edit_menu_cursors.vert_address_num =
      (uint8_t)edit_menu_cursors.address[edit_menu_cursors.horiz_address];
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <redraw_horiz_address_switch+0x54>)
 800211a:	791b      	ldrb	r3, [r3, #4]
 800211c:	461a      	mov	r2, r3
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <redraw_horiz_address_switch+0x54>)
 8002120:	4413      	add	r3, r2
 8002122:	79da      	ldrb	r2, [r3, #7]
  edit_menu_cursors.vert_address_num =
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <redraw_horiz_address_switch+0x54>)
 8002126:	715a      	strb	r2, [r3, #5]
  if (edit_menu_cursors.is_edit_mode_active == true)
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <redraw_horiz_address_switch+0x54>)
 800212a:	7b5b      	ldrb	r3, [r3, #13]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <redraw_horiz_address_switch+0x40>
    {
      draw_address_cursor(&edit_menu_cursors, HMI_HIGHLIGHT_TILE_COLOR);
 8002130:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002134:	4806      	ldr	r0, [pc, #24]	; (8002150 <redraw_horiz_address_switch+0x54>)
 8002136:	f7ff fd9b 	bl	8001c70 <draw_address_cursor>
    }
  else
    {
      draw_address_cursor(&edit_menu_cursors, HMI_TEXT_COLOR);
    }
  return;
 800213a:	e005      	b.n	8002148 <redraw_horiz_address_switch+0x4c>
      draw_address_cursor(&edit_menu_cursors, HMI_TEXT_COLOR);
 800213c:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8002140:	4803      	ldr	r0, [pc, #12]	; (8002150 <redraw_horiz_address_switch+0x54>)
 8002142:	f7ff fd95 	bl	8001c70 <draw_address_cursor>
  return;
 8002146:	bf00      	nop
}
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200001a4 	.word	0x200001a4

08002154 <redraw_horiz_exit_switch>:

// update and redraw exit tile highlight
static void redraw_horiz_exit_switch(buttons_state_t pending_flag)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
  draw_exit_cursor(&edit_menu_cursors, HMI_EDIT_MENU_COLOR);
 800215e:	f240 31ef 	movw	r1, #1007	; 0x3ef
 8002162:	4808      	ldr	r0, [pc, #32]	; (8002184 <redraw_horiz_exit_switch+0x30>)
 8002164:	f7ff fd54 	bl	8001c10 <draw_exit_cursor>
  update_horiz_cursor_pos(pending_flag);
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f80c 	bl	8002188 <update_horiz_cursor_pos>
  draw_exit_cursor(&edit_menu_cursors, HMI_TEXT_COLOR);
 8002170:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8002174:	4803      	ldr	r0, [pc, #12]	; (8002184 <redraw_horiz_exit_switch+0x30>)
 8002176:	f7ff fd4b 	bl	8001c10 <draw_exit_cursor>
  return;
 800217a:	bf00      	nop
}
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200001a4 	.word	0x200001a4

08002188 <update_horiz_cursor_pos>:

// update the value of selected horizontal cursor
static void update_horiz_cursor_pos(buttons_state_t pending_flag)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if (pending_flag == LEFT_FLAG)
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d160      	bne.n	800225a <update_horiz_cursor_pos+0xd2>
    {
      switch (edit_menu_cursors.vert_tile)
 8002198:	4b65      	ldr	r3, [pc, #404]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	3b01      	subs	r3, #1
 800219e:	2b04      	cmp	r3, #4
 80021a0:	f200 80bc 	bhi.w	800231c <update_horiz_cursor_pos+0x194>
 80021a4:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <update_horiz_cursor_pos+0x24>)
 80021a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021aa:	bf00      	nop
 80021ac:	080021c1 	.word	0x080021c1
 80021b0:	080021d9 	.word	0x080021d9
 80021b4:	080021ff 	.word	0x080021ff
 80021b8:	08002221 	.word	0x08002221
 80021bc:	08002243 	.word	0x08002243
        {
        case (TILE_FUNCTION):
          edit_menu_cursors.horiz_fun = (edit_menu_cursors.horiz_fun + 1) % 2;
 80021c0:	4b5b      	ldr	r3, [pc, #364]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 80021c2:	785b      	ldrb	r3, [r3, #1]
 80021c4:	3301      	adds	r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	bfb8      	it	lt
 80021ce:	425b      	neglt	r3, r3
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b57      	ldr	r3, [pc, #348]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 80021d4:	705a      	strb	r2, [r3, #1]
          break;
 80021d6:	e0a6      	b.n	8002326 <update_horiz_cursor_pos+0x19e>
        case (TILE_DEVICE):
          edit_menu_cursors.horiz_dev = (edit_menu_cursors.horiz_dev + 11) % 12;
 80021d8:	4b55      	ldr	r3, [pc, #340]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 80021da:	789b      	ldrb	r3, [r3, #2]
 80021dc:	f103 020b 	add.w	r2, r3, #11
 80021e0:	4b54      	ldr	r3, [pc, #336]	; (8002334 <update_horiz_cursor_pos+0x1ac>)
 80021e2:	fb83 1302 	smull	r1, r3, r3, r2
 80021e6:	1059      	asrs	r1, r3, #1
 80021e8:	17d3      	asrs	r3, r2, #31
 80021ea:	1ac9      	subs	r1, r1, r3
 80021ec:	460b      	mov	r3, r1
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	440b      	add	r3, r1
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	1ad1      	subs	r1, r2, r3
 80021f6:	b2ca      	uxtb	r2, r1
 80021f8:	4b4d      	ldr	r3, [pc, #308]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 80021fa:	709a      	strb	r2, [r3, #2]
          break;
 80021fc:	e093      	b.n	8002326 <update_horiz_cursor_pos+0x19e>
        case (TILE_SIZE):
          edit_menu_cursors.horiz_size = (edit_menu_cursors.horiz_size + 4) % 5;
 80021fe:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 8002200:	78db      	ldrb	r3, [r3, #3]
 8002202:	1d1a      	adds	r2, r3, #4
 8002204:	4b4c      	ldr	r3, [pc, #304]	; (8002338 <update_horiz_cursor_pos+0x1b0>)
 8002206:	fb83 1302 	smull	r1, r3, r3, r2
 800220a:	1059      	asrs	r1, r3, #1
 800220c:	17d3      	asrs	r3, r2, #31
 800220e:	1ac9      	subs	r1, r1, r3
 8002210:	460b      	mov	r3, r1
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	1ad1      	subs	r1, r2, r3
 8002218:	b2ca      	uxtb	r2, r1
 800221a:	4b45      	ldr	r3, [pc, #276]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 800221c:	70da      	strb	r2, [r3, #3]
          break;
 800221e:	e082      	b.n	8002326 <update_horiz_cursor_pos+0x19e>
        case (TILE_ADDRESS):
          edit_menu_cursors.horiz_address =
              (edit_menu_cursors.horiz_address + 5) % 6;
 8002220:	4b43      	ldr	r3, [pc, #268]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 8002222:	791b      	ldrb	r3, [r3, #4]
 8002224:	1d5a      	adds	r2, r3, #5
 8002226:	4b43      	ldr	r3, [pc, #268]	; (8002334 <update_horiz_cursor_pos+0x1ac>)
 8002228:	fb83 3102 	smull	r3, r1, r3, r2
 800222c:	17d3      	asrs	r3, r2, #31
 800222e:	1ac9      	subs	r1, r1, r3
 8002230:	460b      	mov	r3, r1
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	440b      	add	r3, r1
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	1ad1      	subs	r1, r2, r3
          edit_menu_cursors.horiz_address =
 800223a:	b2ca      	uxtb	r2, r1
 800223c:	4b3c      	ldr	r3, [pc, #240]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 800223e:	711a      	strb	r2, [r3, #4]
          break;
 8002240:	e071      	b.n	8002326 <update_horiz_cursor_pos+0x19e>
        case (TILE_EXIT):
          edit_menu_cursors.horiz_exit = (edit_menu_cursors.horiz_exit + 1) % 2;
 8002242:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 8002244:	799b      	ldrb	r3, [r3, #6]
 8002246:	3301      	adds	r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	bfb8      	it	lt
 8002250:	425b      	neglt	r3, r3
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 8002256:	719a      	strb	r2, [r3, #6]
          break;
 8002258:	e065      	b.n	8002326 <update_horiz_cursor_pos+0x19e>

        default:
          break;
        }
    }
  else if (pending_flag == RIGHT_FLAG)
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d15f      	bne.n	8002320 <update_horiz_cursor_pos+0x198>
    {
      switch (edit_menu_cursors.vert_tile)
 8002260:	4b33      	ldr	r3, [pc, #204]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	3b01      	subs	r3, #1
 8002266:	2b04      	cmp	r3, #4
 8002268:	d85c      	bhi.n	8002324 <update_horiz_cursor_pos+0x19c>
 800226a:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <update_horiz_cursor_pos+0xe8>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	08002285 	.word	0x08002285
 8002274:	0800229d 	.word	0x0800229d
 8002278:	080022c1 	.word	0x080022c1
 800227c:	080022e3 	.word	0x080022e3
 8002280:	08002305 	.word	0x08002305
        {
        case (TILE_FUNCTION):
          edit_menu_cursors.horiz_fun = (edit_menu_cursors.horiz_fun + 1) % 2;
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 8002286:	785b      	ldrb	r3, [r3, #1]
 8002288:	3301      	adds	r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	bfb8      	it	lt
 8002292:	425b      	neglt	r3, r3
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b26      	ldr	r3, [pc, #152]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 8002298:	705a      	strb	r2, [r3, #1]
          break;
 800229a:	e044      	b.n	8002326 <update_horiz_cursor_pos+0x19e>
        case (TILE_DEVICE):
          edit_menu_cursors.horiz_dev = (edit_menu_cursors.horiz_dev + 1) % 12;
 800229c:	4b24      	ldr	r3, [pc, #144]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 800229e:	789b      	ldrb	r3, [r3, #2]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <update_horiz_cursor_pos+0x1ac>)
 80022a4:	fb83 1302 	smull	r1, r3, r3, r2
 80022a8:	1059      	asrs	r1, r3, #1
 80022aa:	17d3      	asrs	r3, r2, #31
 80022ac:	1ac9      	subs	r1, r1, r3
 80022ae:	460b      	mov	r3, r1
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	440b      	add	r3, r1
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	1ad1      	subs	r1, r2, r3
 80022b8:	b2ca      	uxtb	r2, r1
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 80022bc:	709a      	strb	r2, [r3, #2]
          break;
 80022be:	e032      	b.n	8002326 <update_horiz_cursor_pos+0x19e>
        case (TILE_SIZE):
          edit_menu_cursors.horiz_size = (edit_menu_cursors.horiz_size + 1) % 5;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 80022c2:	78db      	ldrb	r3, [r3, #3]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <update_horiz_cursor_pos+0x1b0>)
 80022c8:	fb83 1302 	smull	r1, r3, r3, r2
 80022cc:	1059      	asrs	r1, r3, #1
 80022ce:	17d3      	asrs	r3, r2, #31
 80022d0:	1ac9      	subs	r1, r1, r3
 80022d2:	460b      	mov	r3, r1
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	1ad1      	subs	r1, r2, r3
 80022da:	b2ca      	uxtb	r2, r1
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 80022de:	70da      	strb	r2, [r3, #3]
          break;
 80022e0:	e021      	b.n	8002326 <update_horiz_cursor_pos+0x19e>
        case (TILE_ADDRESS):
          edit_menu_cursors.horiz_address =
              (edit_menu_cursors.horiz_address + 1) % 6;
 80022e2:	4b13      	ldr	r3, [pc, #76]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 80022e4:	791b      	ldrb	r3, [r3, #4]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <update_horiz_cursor_pos+0x1ac>)
 80022ea:	fb83 3102 	smull	r3, r1, r3, r2
 80022ee:	17d3      	asrs	r3, r2, #31
 80022f0:	1ac9      	subs	r1, r1, r3
 80022f2:	460b      	mov	r3, r1
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	440b      	add	r3, r1
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	1ad1      	subs	r1, r2, r3
          edit_menu_cursors.horiz_address =
 80022fc:	b2ca      	uxtb	r2, r1
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 8002300:	711a      	strb	r2, [r3, #4]
          break;
 8002302:	e010      	b.n	8002326 <update_horiz_cursor_pos+0x19e>
        case (TILE_EXIT):
          edit_menu_cursors.horiz_exit = (edit_menu_cursors.horiz_exit + 1) % 2;
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 8002306:	799b      	ldrb	r3, [r3, #6]
 8002308:	3301      	adds	r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	bfb8      	it	lt
 8002312:	425b      	neglt	r3, r3
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <update_horiz_cursor_pos+0x1a8>)
 8002318:	719a      	strb	r2, [r3, #6]
          break;
 800231a:	e004      	b.n	8002326 <update_horiz_cursor_pos+0x19e>
          break;
 800231c:	bf00      	nop
 800231e:	e002      	b.n	8002326 <update_horiz_cursor_pos+0x19e>
        case (TILE_HEADER):
        default:
          break;
        }
    }
 8002320:	bf00      	nop
 8002322:	e000      	b.n	8002326 <update_horiz_cursor_pos+0x19e>
          break;
 8002324:	bf00      	nop

  return;
 8002326:	bf00      	nop
}
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	200001a4 	.word	0x200001a4
 8002334:	2aaaaaab 	.word	0x2aaaaaab
 8002338:	66666667 	.word	0x66666667

0800233c <select_vert_cursor_to_edit>:

/*** VERTICAL CURSOR CHANGE FUNCTIONS **/

// change tile cursor position on screen vertically
static void select_vert_cursor_to_edit(buttons_state_t pending_flag)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]

  // edit address
  if (edit_menu_cursors.vert_tile == TILE_ADDRESS &&
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <select_vert_cursor_to_edit+0x3c>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b04      	cmp	r3, #4
 800234c:	d108      	bne.n	8002360 <select_vert_cursor_to_edit+0x24>
      edit_menu_cursors.is_edit_mode_active == true)
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <select_vert_cursor_to_edit+0x3c>)
 8002350:	7b5b      	ldrb	r3, [r3, #13]
  if (edit_menu_cursors.vert_tile == TILE_ADDRESS &&
 8002352:	2b00      	cmp	r3, #0
 8002354:	d004      	beq.n	8002360 <select_vert_cursor_to_edit+0x24>
    {
      redraw_vert_address_char(pending_flag);
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 f80f 	bl	800237c <redraw_vert_address_char>
 800235e:	e003      	b.n	8002368 <select_vert_cursor_to_edit+0x2c>
    }
  else
    {
      redraw_vert_tile_cursor(pending_flag);
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	4618      	mov	r0, r3
 8002364:	f000 f824 	bl	80023b0 <redraw_vert_tile_cursor>
    }

  buttons_reset_flag(pending_flag);
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fd ff5e 	bl	800022c <buttons_reset_flag>

  return;
 8002370:	bf00      	nop
}
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200001a4 	.word	0x200001a4

0800237c <redraw_vert_address_char>:

// when editing selected update and redraw address number
static void redraw_vert_address_char(buttons_state_t pending_flag)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  update_vert_cursor_val(pending_flag);
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	4618      	mov	r0, r3
 800238a:	f000 f84f 	bl	800242c <update_vert_cursor_val>
  draw_address_char(&edit_menu_cursors);
 800238e:	4807      	ldr	r0, [pc, #28]	; (80023ac <redraw_vert_address_char+0x30>)
 8002390:	f7ff fc0c 	bl	8001bac <draw_address_char>
  edit_menu_cursors.address[edit_menu_cursors.horiz_address] =
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <redraw_vert_address_char+0x30>)
 8002396:	791b      	ldrb	r3, [r3, #4]
 8002398:	4619      	mov	r1, r3
      (char)edit_menu_cursors.vert_address_num;
 800239a:	4b04      	ldr	r3, [pc, #16]	; (80023ac <redraw_vert_address_char+0x30>)
 800239c:	795a      	ldrb	r2, [r3, #5]
  edit_menu_cursors.address[edit_menu_cursors.horiz_address] =
 800239e:	4b03      	ldr	r3, [pc, #12]	; (80023ac <redraw_vert_address_char+0x30>)
 80023a0:	440b      	add	r3, r1
 80023a2:	71da      	strb	r2, [r3, #7]

  return;
 80023a4:	bf00      	nop
}
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	200001a4 	.word	0x200001a4

080023b0 <redraw_vert_tile_cursor>:

// update and redraw vertical tile selection
static void redraw_vert_tile_cursor(buttons_state_t pending_flag)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
  draw_wide_tile(NULL, edit_menu_cursors.vert_tile, false, HMI_TILE_COLOR);
 80023ba:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <redraw_vert_tile_cursor+0x78>)
 80023bc:	7819      	ldrb	r1, [r3, #0]
 80023be:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80023c2:	2200      	movs	r2, #0
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff fa17 	bl	80017f8 <draw_wide_tile>
  update_vert_cursor_val(pending_flag);
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f82d 	bl	800242c <update_vert_cursor_val>
  draw_wide_tile(NULL, edit_menu_cursors.vert_tile, false,
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <redraw_vert_tile_cursor+0x78>)
 80023d4:	7819      	ldrb	r1, [r3, #0]
 80023d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023da:	2200      	movs	r2, #0
 80023dc:	2000      	movs	r0, #0
 80023de:	f7ff fa0b 	bl	80017f8 <draw_wide_tile>
                 HMI_HIGHLIGHT_TILE_COLOR);

  if (edit_menu_cursors.vert_tile == TILE_ADDRESS)
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <redraw_vert_tile_cursor+0x78>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d105      	bne.n	80023f6 <redraw_vert_tile_cursor+0x46>
    {
      draw_address_cursor(&edit_menu_cursors, HMI_TEXT_COLOR);
 80023ea:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80023ee:	480e      	ldr	r0, [pc, #56]	; (8002428 <redraw_vert_tile_cursor+0x78>)
 80023f0:	f7ff fc3e 	bl	8001c70 <draw_address_cursor>
 80023f4:	e004      	b.n	8002400 <redraw_vert_tile_cursor+0x50>
    }
  else
    {
      draw_address_cursor(&edit_menu_cursors, HMI_EDIT_MENU_COLOR);
 80023f6:	f240 31ef 	movw	r1, #1007	; 0x3ef
 80023fa:	480b      	ldr	r0, [pc, #44]	; (8002428 <redraw_vert_tile_cursor+0x78>)
 80023fc:	f7ff fc38 	bl	8001c70 <draw_address_cursor>
    }

  if (edit_menu_cursors.vert_tile == TILE_EXIT)
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <redraw_vert_tile_cursor+0x78>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b05      	cmp	r3, #5
 8002406:	d105      	bne.n	8002414 <redraw_vert_tile_cursor+0x64>
    {
      draw_exit_cursor(&edit_menu_cursors, HMI_TEXT_COLOR);
 8002408:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800240c:	4806      	ldr	r0, [pc, #24]	; (8002428 <redraw_vert_tile_cursor+0x78>)
 800240e:	f7ff fbff 	bl	8001c10 <draw_exit_cursor>
  else
    {
      draw_exit_cursor(&edit_menu_cursors, HMI_EDIT_MENU_COLOR);
    }

  return;
 8002412:	e005      	b.n	8002420 <redraw_vert_tile_cursor+0x70>
      draw_exit_cursor(&edit_menu_cursors, HMI_EDIT_MENU_COLOR);
 8002414:	f240 31ef 	movw	r1, #1007	; 0x3ef
 8002418:	4803      	ldr	r0, [pc, #12]	; (8002428 <redraw_vert_tile_cursor+0x78>)
 800241a:	f7ff fbf9 	bl	8001c10 <draw_exit_cursor>
  return;
 800241e:	bf00      	nop
}
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200001a4 	.word	0x200001a4

0800242c <update_vert_cursor_val>:

// update value of selected vertical cursor address or tile
static void update_vert_cursor_val(buttons_state_t pending_flag)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]

  if (pending_flag == UP_FLAG)
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	2b04      	cmp	r3, #4
 800243a:	d12b      	bne.n	8002494 <update_vert_cursor_val+0x68>
    {
      // check if we are changing tile or letter in the address
      if (edit_menu_cursors.vert_tile == TILE_ADDRESS &&
 800243c:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <update_vert_cursor_val+0xd0>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b04      	cmp	r3, #4
 8002442:	d116      	bne.n	8002472 <update_vert_cursor_val+0x46>
          edit_menu_cursors.is_edit_mode_active == true)
 8002444:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <update_vert_cursor_val+0xd0>)
 8002446:	7b5b      	ldrb	r3, [r3, #13]
      if (edit_menu_cursors.vert_tile == TILE_ADDRESS &&
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <update_vert_cursor_val+0x46>
        {
          edit_menu_cursors.vert_address_num =
              (edit_menu_cursors.vert_address_num + 9) % 10;
 800244c:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <update_vert_cursor_val+0xd0>)
 800244e:	795b      	ldrb	r3, [r3, #5]
 8002450:	f103 0209 	add.w	r2, r3, #9
 8002454:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <update_vert_cursor_val+0xd4>)
 8002456:	fb83 1302 	smull	r1, r3, r3, r2
 800245a:	1099      	asrs	r1, r3, #2
 800245c:	17d3      	asrs	r3, r2, #31
 800245e:	1ac9      	subs	r1, r1, r3
 8002460:	460b      	mov	r3, r1
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	1ad1      	subs	r1, r2, r3
          edit_menu_cursors.vert_address_num =
 800246a:	b2ca      	uxtb	r2, r1
 800246c:	4b23      	ldr	r3, [pc, #140]	; (80024fc <update_vert_cursor_val+0xd0>)
 800246e:	715a      	strb	r2, [r3, #5]
 8002470:	e03d      	b.n	80024ee <update_vert_cursor_val+0xc2>
        }
      else
        {
          edit_menu_cursors.vert_tile = (edit_menu_cursors.vert_tile + 5) % 6;
 8002472:	4b22      	ldr	r3, [pc, #136]	; (80024fc <update_vert_cursor_val+0xd0>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	1d5a      	adds	r2, r3, #5
 8002478:	4b22      	ldr	r3, [pc, #136]	; (8002504 <update_vert_cursor_val+0xd8>)
 800247a:	fb83 3102 	smull	r3, r1, r3, r2
 800247e:	17d3      	asrs	r3, r2, #31
 8002480:	1ac9      	subs	r1, r1, r3
 8002482:	460b      	mov	r3, r1
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	440b      	add	r3, r1
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	1ad1      	subs	r1, r2, r3
 800248c:	b2ca      	uxtb	r2, r1
 800248e:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <update_vert_cursor_val+0xd0>)
 8002490:	701a      	strb	r2, [r3, #0]
        {
          edit_menu_cursors.vert_tile = (edit_menu_cursors.vert_tile + 1) % 6;
        }
    }

  return;
 8002492:	e02d      	b.n	80024f0 <update_vert_cursor_val+0xc4>
  else if (pending_flag == DOWN_FLAG)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d12a      	bne.n	80024f0 <update_vert_cursor_val+0xc4>
      if (edit_menu_cursors.vert_tile == TILE_ADDRESS &&
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <update_vert_cursor_val+0xd0>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d115      	bne.n	80024ce <update_vert_cursor_val+0xa2>
          edit_menu_cursors.is_edit_mode_active == true)
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <update_vert_cursor_val+0xd0>)
 80024a4:	7b5b      	ldrb	r3, [r3, #13]
      if (edit_menu_cursors.vert_tile == TILE_ADDRESS &&
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d011      	beq.n	80024ce <update_vert_cursor_val+0xa2>
              (edit_menu_cursors.vert_address_num + 1) % 10;
 80024aa:	4b14      	ldr	r3, [pc, #80]	; (80024fc <update_vert_cursor_val+0xd0>)
 80024ac:	795b      	ldrb	r3, [r3, #5]
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <update_vert_cursor_val+0xd4>)
 80024b2:	fb83 1302 	smull	r1, r3, r3, r2
 80024b6:	1099      	asrs	r1, r3, #2
 80024b8:	17d3      	asrs	r3, r2, #31
 80024ba:	1ac9      	subs	r1, r1, r3
 80024bc:	460b      	mov	r3, r1
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	1ad1      	subs	r1, r2, r3
          edit_menu_cursors.vert_address_num =
 80024c6:	b2ca      	uxtb	r2, r1
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <update_vert_cursor_val+0xd0>)
 80024ca:	715a      	strb	r2, [r3, #5]
 80024cc:	e00f      	b.n	80024ee <update_vert_cursor_val+0xc2>
          edit_menu_cursors.vert_tile = (edit_menu_cursors.vert_tile + 1) % 6;
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <update_vert_cursor_val+0xd0>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <update_vert_cursor_val+0xd8>)
 80024d6:	fb83 3102 	smull	r3, r1, r3, r2
 80024da:	17d3      	asrs	r3, r2, #31
 80024dc:	1ac9      	subs	r1, r1, r3
 80024de:	460b      	mov	r3, r1
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	440b      	add	r3, r1
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	1ad1      	subs	r1, r2, r3
 80024e8:	b2ca      	uxtb	r2, r1
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <update_vert_cursor_val+0xd0>)
 80024ec:	701a      	strb	r2, [r3, #0]
  return;
 80024ee:	bf00      	nop
 80024f0:	bf00      	nop
}
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	200001a4 	.word	0x200001a4
 8002500:	66666667 	.word	0x66666667
 8002504:	2aaaaaab 	.word	0x2aaaaaab

08002508 <action_if_enter_pressed>:

/*** ENTER PRESSED FUNCTIONS **/

// action when enter is pressed
static hmi_change_screen_t action_if_enter_pressed(buttons_state_t pending_flag)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]

  hmi_change_screen_t ret_action = NO_CHANGE;
 8002512:	2300      	movs	r3, #0
 8002514:	73fb      	strb	r3, [r7, #15]

  switch (edit_menu_cursors.vert_tile)
 8002516:	4b19      	ldr	r3, [pc, #100]	; (800257c <action_if_enter_pressed+0x74>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b04      	cmp	r3, #4
 800251c:	d002      	beq.n	8002524 <action_if_enter_pressed+0x1c>
 800251e:	2b05      	cmp	r3, #5
 8002520:	d015      	beq.n	800254e <action_if_enter_pressed+0x46>
    case (TILE_HEADER):
    case (TILE_DEVICE):
    case (TILE_SIZE):
    case (TILE_FUNCTION):
    default:
      break;
 8002522:	e022      	b.n	800256a <action_if_enter_pressed+0x62>
            !(edit_menu_cursors.is_edit_mode_active);
 8002524:	4b15      	ldr	r3, [pc, #84]	; (800257c <action_if_enter_pressed+0x74>)
 8002526:	7b5b      	ldrb	r3, [r3, #13]
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f083 0301 	eor.w	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	b2da      	uxtb	r2, r3
        edit_menu_cursors.is_edit_mode_active =
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <action_if_enter_pressed+0x74>)
 8002540:	735a      	strb	r2, [r3, #13]
        show_arrows_icon_if_edit_active(edit_menu_cursors.is_edit_mode_active);
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <action_if_enter_pressed+0x74>)
 8002544:	7b5b      	ldrb	r3, [r3, #13]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f81a 	bl	8002580 <show_arrows_icon_if_edit_active>
        break;
 800254c:	e00d      	b.n	800256a <action_if_enter_pressed+0x62>
        if (edit_menu_cursors.horiz_exit == CONFIRM)
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <action_if_enter_pressed+0x74>)
 8002550:	799b      	ldrb	r3, [r3, #6]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <action_if_enter_pressed+0x54>
            ret_action = SAVE_DATA_TO_TILE;
 8002556:	2303      	movs	r3, #3
 8002558:	73fb      	strb	r3, [r7, #15]
        break;
 800255a:	e005      	b.n	8002568 <action_if_enter_pressed+0x60>
        else if (edit_menu_cursors.horiz_exit == DISCARD)
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <action_if_enter_pressed+0x74>)
 800255e:	799b      	ldrb	r3, [r3, #6]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <action_if_enter_pressed+0x60>
            ret_action = OPEN_MAIN_MENU;
 8002564:	2302      	movs	r3, #2
 8002566:	73fb      	strb	r3, [r7, #15]
        break;
 8002568:	bf00      	nop
    }

  buttons_reset_flag(pending_flag);
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	4618      	mov	r0, r3
 800256e:	f7fd fe5d 	bl	800022c <buttons_reset_flag>

  return ret_action;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	200001a4 	.word	0x200001a4

08002580 <show_arrows_icon_if_edit_active>:

static void show_arrows_icon_if_edit_active(bool edit_mode_active)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
  // show or hide arrows
  if (true == edit_mode_active)
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <show_arrows_icon_if_edit_active+0x24>
    {
      draw_arrows_icon(HMI_TEXT_COLOR);
 8002590:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002594:	f7ff fac0 	bl	8001b18 <draw_arrows_icon>
      draw_address_cursor(&edit_menu_cursors, HMI_HIGHLIGHT_TILE_COLOR);
 8002598:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800259c:	4808      	ldr	r0, [pc, #32]	; (80025c0 <show_arrows_icon_if_edit_active+0x40>)
 800259e:	f7ff fb67 	bl	8001c70 <draw_address_cursor>
    {
      draw_arrows_icon(HMI_EDIT_MENU_COLOR);
      draw_address_cursor(&edit_menu_cursors, HMI_TEXT_COLOR);
    }

  return;
 80025a2:	e009      	b.n	80025b8 <show_arrows_icon_if_edit_active+0x38>
      draw_arrows_icon(HMI_EDIT_MENU_COLOR);
 80025a4:	f240 30ef 	movw	r0, #1007	; 0x3ef
 80025a8:	f7ff fab6 	bl	8001b18 <draw_arrows_icon>
      draw_address_cursor(&edit_menu_cursors, HMI_TEXT_COLOR);
 80025ac:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80025b0:	4803      	ldr	r0, [pc, #12]	; (80025c0 <show_arrows_icon_if_edit_active+0x40>)
 80025b2:	f7ff fb5d 	bl	8001c70 <draw_address_cursor>
  return;
 80025b6:	bf00      	nop
}
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200001a4 	.word	0x200001a4

080025c4 <get_callback_to_tile>:

static tile_callback_t get_callback_to_tile(tile_function_t tile_function)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
	tile_callback_t ret_ptr = NULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]

	switch(tile_function)
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d00c      	beq.n	80025f2 <get_callback_to_tile+0x2e>
 80025d8:	2b02      	cmp	r3, #2
 80025da:	dc0d      	bgt.n	80025f8 <get_callback_to_tile+0x34>
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <get_callback_to_tile+0x22>
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d003      	beq.n	80025ec <get_callback_to_tile+0x28>
	{
		ret_ptr = NULL;
		break;
	}
	default:
		break;
 80025e4:	e008      	b.n	80025f8 <get_callback_to_tile+0x34>
		ret_ptr =  &hmi_read_tile_function;
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <get_callback_to_tile+0x44>)
 80025e8:	60fb      	str	r3, [r7, #12]
		break;
 80025ea:	e006      	b.n	80025fa <get_callback_to_tile+0x36>
		ret_ptr = NULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
		break;
 80025f0:	e003      	b.n	80025fa <get_callback_to_tile+0x36>
		ret_ptr = NULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
		break;
 80025f6:	e000      	b.n	80025fa <get_callback_to_tile+0x36>
		break;
 80025f8:	bf00      	nop
	}

	return ret_ptr;
 80025fa:	68fb      	ldr	r3, [r7, #12]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	080013e1 	.word	0x080013e1

0800260c <save_data_to_tile>:

// assign function callback to tile
static void save_data_to_tile(hmi_main_screen_t *p_main_screen_data)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint8_t save_tile_number = p_main_screen_data->active_main_tile;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	73fb      	strb	r3, [r7, #15]
  uint8_t save_device = edit_menu_cursors.horiz_dev;
 800261a:	4b31      	ldr	r3, [pc, #196]	; (80026e0 <save_data_to_tile+0xd4>)
 800261c:	789b      	ldrb	r3, [r3, #2]
 800261e:	73bb      	strb	r3, [r7, #14]
  uint8_t save_size = edit_menu_cursors.horiz_size;
 8002620:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <save_data_to_tile+0xd4>)
 8002622:	78db      	ldrb	r3, [r3, #3]
 8002624:	737b      	strb	r3, [r7, #13]
  uint8_t save_function = edit_menu_cursors.horiz_fun;
 8002626:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <save_data_to_tile+0xd4>)
 8002628:	785b      	ldrb	r3, [r3, #1]
 800262a:	733b      	strb	r3, [r7, #12]

  // this might be confusing but its just save data to correct tile

  p_main_screen_data->buttons[save_tile_number].data.tile_number = save_tile_number;
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	440b      	add	r3, r1
 800263a:	330c      	adds	r3, #12
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	701a      	strb	r2, [r3, #0]
  p_main_screen_data->buttons[save_tile_number].data.device_type =
      device_switch[save_device].frame_letter;
 8002640:	7bbb      	ldrb	r3, [r7, #14]
  p_main_screen_data->buttons[save_tile_number].data.device_type =
 8002642:	7bfa      	ldrb	r2, [r7, #15]
      device_switch[save_device].frame_letter;
 8002644:	4927      	ldr	r1, [pc, #156]	; (80026e4 <save_data_to_tile+0xd8>)
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	7918      	ldrb	r0, [r3, #4]
  p_main_screen_data->buttons[save_tile_number].data.device_type =
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	330e      	adds	r3, #14
 800265a:	4602      	mov	r2, r0
 800265c:	701a      	strb	r2, [r3, #0]
  p_main_screen_data->buttons[save_tile_number].data.size_mark =
      size_switch[save_size].frame_letter;
 800265e:	7b7b      	ldrb	r3, [r7, #13]
  p_main_screen_data->buttons[save_tile_number].data.size_mark =
 8002660:	7bfa      	ldrb	r2, [r7, #15]
      size_switch[save_size].frame_letter;
 8002662:	4921      	ldr	r1, [pc, #132]	; (80026e8 <save_data_to_tile+0xdc>)
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	440b      	add	r3, r1
 8002668:	7918      	ldrb	r0, [r3, #4]
  p_main_screen_data->buttons[save_tile_number].data.size_mark =
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	330f      	adds	r3, #15
 8002678:	4602      	mov	r2, r0
 800267a:	701a      	strb	r2, [r3, #0]
  p_main_screen_data->buttons[save_tile_number].data.function =
      fun_switch[save_function].frame_letter;
 800267c:	7b3b      	ldrb	r3, [r7, #12]
  p_main_screen_data->buttons[save_tile_number].data.function =
 800267e:	7bfa      	ldrb	r2, [r7, #15]
      fun_switch[save_function].frame_letter;
 8002680:	491a      	ldr	r1, [pc, #104]	; (80026ec <save_data_to_tile+0xe0>)
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	7918      	ldrb	r0, [r3, #4]
  p_main_screen_data->buttons[save_tile_number].data.function =
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	330d      	adds	r3, #13
 8002696:	4602      	mov	r2, r0
 8002698:	701a      	strb	r2, [r3, #0]
  memcpy(p_main_screen_data->buttons[save_tile_number].data.address,
 800269a:	7bfa      	ldrb	r2, [r7, #15]
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	3308      	adds	r3, #8
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	f103 0208 	add.w	r2, r3, #8
 80026ae:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <save_data_to_tile+0xd4>)
 80026b0:	3307      	adds	r3, #7
 80026b2:	6819      	ldr	r1, [r3, #0]
 80026b4:	6011      	str	r1, [r2, #0]
 80026b6:	889b      	ldrh	r3, [r3, #4]
 80026b8:	8093      	strh	r3, [r2, #4]
         &(edit_menu_cursors.address), 6);

  p_main_screen_data->buttons[save_tile_number].callback = get_callback_to_tile(save_function);
 80026ba:	7bfc      	ldrb	r4, [r7, #15]
 80026bc:	7b3b      	ldrb	r3, [r7, #12]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff ff80 	bl	80025c4 <get_callback_to_tile>
 80026c4:	4601      	mov	r1, r0
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4623      	mov	r3, r4
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4423      	add	r3, r4
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	3318      	adds	r3, #24
 80026d4:	6019      	str	r1, [r3, #0]

  return;
 80026d6:	bf00      	nop
}
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd90      	pop	{r4, r7, pc}
 80026de:	bf00      	nop
 80026e0:	200001a4 	.word	0x200001a4
 80026e4:	08005d34 	.word	0x08005d34
 80026e8:	08005d94 	.word	0x08005d94
 80026ec:	08005d1c 	.word	0x08005d1c

080026f0 <init_edit_menu_cursors>:

static void init_edit_menu_cursors(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  memcpy(&edit_menu_cursors.address, "00000", 6);
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <init_edit_menu_cursors+0x4c>)
 80026f6:	4a12      	ldr	r2, [pc, #72]	; (8002740 <init_edit_menu_cursors+0x50>)
 80026f8:	3307      	adds	r3, #7
 80026fa:	6810      	ldr	r0, [r2, #0]
 80026fc:	6018      	str	r0, [r3, #0]
 80026fe:	8892      	ldrh	r2, [r2, #4]
 8002700:	809a      	strh	r2, [r3, #4]
  edit_menu_cursors.is_edit_mode_active = false;
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <init_edit_menu_cursors+0x4c>)
 8002704:	2200      	movs	r2, #0
 8002706:	735a      	strb	r2, [r3, #13]
  edit_menu_cursors.horiz_address = 0;
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <init_edit_menu_cursors+0x4c>)
 800270a:	2200      	movs	r2, #0
 800270c:	711a      	strb	r2, [r3, #4]
  edit_menu_cursors.horiz_dev = 0;
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <init_edit_menu_cursors+0x4c>)
 8002710:	2200      	movs	r2, #0
 8002712:	709a      	strb	r2, [r3, #2]
  edit_menu_cursors.horiz_exit = 0;
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <init_edit_menu_cursors+0x4c>)
 8002716:	2200      	movs	r2, #0
 8002718:	719a      	strb	r2, [r3, #6]
  edit_menu_cursors.horiz_fun = 0;
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <init_edit_menu_cursors+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	705a      	strb	r2, [r3, #1]
  edit_menu_cursors.horiz_size = 0;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <init_edit_menu_cursors+0x4c>)
 8002722:	2200      	movs	r2, #0
 8002724:	70da      	strb	r2, [r3, #3]
  edit_menu_cursors.vert_address_num = 0;
 8002726:	4b05      	ldr	r3, [pc, #20]	; (800273c <init_edit_menu_cursors+0x4c>)
 8002728:	2200      	movs	r2, #0
 800272a:	715a      	strb	r2, [r3, #5]
  edit_menu_cursors.vert_tile = TILE_HEADER;
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <init_edit_menu_cursors+0x4c>)
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]

  return;
 8002732:	bf00      	nop
}
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	200001a4 	.word	0x200001a4
 8002740:	08005a9c 	.word	0x08005a9c

08002744 <xgb_read_single_device>:
static uint8_t data_marking_to_size(xgb_data_size_marking_t data_size);

xgb_comm_err_t xgb_read_single_device(xgb_device_type_t type,
                                      xgb_data_size_marking_t size_mark,
                                      const char *address)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	603a      	str	r2, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
 8002750:	460b      	mov	r3, r1
 8002752:	71bb      	strb	r3, [r7, #6]
  cmd_frame_data frame = {0};
 8002754:	f107 0308 	add.w	r3, r7, #8
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
  xgb_comm_err_t comm_status = XGB_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	75fb      	strb	r3, [r7, #23]

  frame.ind_read.data_size = size_mark;
 8002764:	79bb      	ldrb	r3, [r7, #6]
 8002766:	72bb      	strb	r3, [r7, #10]
  frame.ind_read.device_type = type;
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	72fb      	strb	r3, [r7, #11]
  frame.ind_read.no_of_blocks = 1;
 800276c:	2301      	movs	r3, #1
 800276e:	727b      	strb	r3, [r7, #9]
  frame.ind_read.p_device_address = address;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	60fb      	str	r3, [r7, #12]
  frame.ind_read.station_number = STATION_NUMBER;
 8002774:	2301      	movs	r3, #1
 8002776:	723b      	strb	r3, [r7, #8]

  comm_status = send_specific_cmd(&frame, INDIVI_READ);
 8002778:	f107 0308 	add.w	r3, r7, #8
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fb34 	bl	8002dec <send_specific_cmd>
 8002784:	4603      	mov	r3, r0
 8002786:	75fb      	strb	r3, [r7, #23]

  return comm_status;
 8002788:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <send_frame>:

/*
 * Basic send frame function, uart transmit function
 */
static xgb_comm_err_t send_frame(const uint8_t *p_frame, uint32_t lenght)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  xgb_comm_err_t comm_status = XGB_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	73fb      	strb	r3, [r7, #15]

  if ((HAL_UART_Transmit(&huart1, (uint8_t *)p_frame, lenght, 1000) != HAL_OK))
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4806      	ldr	r0, [pc, #24]	; (80027c8 <send_frame+0x34>)
 80027ae:	f001 fe66 	bl	800447e <HAL_UART_Transmit>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <send_frame+0x28>
    {
      comm_status = XGB_ERR_TRANSMIT_TIMEOUT;
 80027b8:	23ff      	movs	r3, #255	; 0xff
 80027ba:	73fb      	strb	r3, [r7, #15]
    }

  return comm_status;
 80027bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200002a4 	.word	0x200002a4

080027cc <prep_frame>:

/*
 * Delete all the empty spaces between parts of frame and add NULL at the end
 */
static xgb_comm_err_t prep_frame(const u_frame *raw_frame, u_frame *ready_frame)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint8_t j = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
  xgb_comm_err_t comm_status = XGB_ERR_EOT_MISSING;
 80027da:	23fe      	movs	r3, #254	; 0xfe
 80027dc:	73bb      	strb	r3, [r7, #14]

  // go trough array and if cell is not empty
  // rewrite it to ready frame
  for (uint16_t i = 0; i < MAX_FRAME_SIZE; i++)
 80027de:	2300      	movs	r3, #0
 80027e0:	81bb      	strh	r3, [r7, #12]
 80027e2:	e01c      	b.n	800281e <prep_frame+0x52>
    {
      if (0 != raw_frame->frame_bytes[i])
 80027e4:	89bb      	ldrh	r3, [r7, #12]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	5cd3      	ldrb	r3, [r2, r3]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d014      	beq.n	8002818 <prep_frame+0x4c>
        {
          ready_frame->frame_bytes[j] = raw_frame->frame_bytes[i];
 80027ee:	89ba      	ldrh	r2, [r7, #12]
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	5c89      	ldrb	r1, [r1, r2]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	54d1      	strb	r1, [r2, r3]

          if (XGB_CC_EOT == raw_frame->frame_bytes[i]) // if its EOT
 80027fa:	89bb      	ldrh	r3, [r7, #12]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	2b04      	cmp	r3, #4
 8002802:	d106      	bne.n	8002812 <prep_frame+0x46>
            {
              // finish the message with NULL to create a string
              ready_frame->frame_bytes[j + 1] = 0; // NULL
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	3301      	adds	r3, #1
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	2100      	movs	r1, #0
 800280c:	54d1      	strb	r1, [r2, r3]
              comm_status = XGB_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	73bb      	strb	r3, [r7, #14]
            }

          j++;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	3301      	adds	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
  for (uint16_t i = 0; i < MAX_FRAME_SIZE; i++)
 8002818:	89bb      	ldrh	r3, [r7, #12]
 800281a:	3301      	adds	r3, #1
 800281c:	81bb      	strh	r3, [r7, #12]
 800281e:	89bb      	ldrh	r3, [r7, #12]
 8002820:	2bff      	cmp	r3, #255	; 0xff
 8002822:	d9df      	bls.n	80027e4 <prep_frame+0x18>
        }
    }

  return comm_status;
 8002824:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <prep_indivi_read_frame>:
/*
 * Prepare frame - request of individual read
 */
static xgb_comm_err_t prep_indivi_read_frame(u_frame *frame,
                                             const cmd_frame_data *p_frame_data)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b0c4      	sub	sp, #272	; 0x110
 8002836:	af00      	add	r7, sp, #0
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	6018      	str	r0, [r3, #0]
 800283c:	463b      	mov	r3, r7
 800283e:	6019      	str	r1, [r3, #0]
  u_frame temp_frame = {0};
 8002840:	f107 030c 	add.w	r3, r7, #12
 8002844:	4618      	mov	r0, r3
 8002846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800284a:	461a      	mov	r2, r3
 800284c:	2100      	movs	r1, #0
 800284e:	f002 fc4f 	bl	80050f0 <memset>
  xgb_comm_err_t comm_status = XGB_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

  // header
  temp_frame.ind_read_frame.header_enq = XGB_CC_ENQ;
 8002858:	f107 030c 	add.w	r3, r7, #12
 800285c:	2205      	movs	r2, #5
 800285e:	701a      	strb	r2, [r3, #0]

  // station number
  temp_frame.ind_read_frame.station_number[0] =
      (p_frame_data->ind_read.station_number / 16) + '0';
 8002860:	463b      	mov	r3, r7
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	b2db      	uxtb	r3, r3
 800286a:	3330      	adds	r3, #48	; 0x30
 800286c:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.station_number[0] =
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	705a      	strb	r2, [r3, #1]
  temp_frame.ind_read_frame.station_number[1] =
      (p_frame_data->ind_read.station_number % 16) + '0';
 8002874:	463b      	mov	r3, r7
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	b2db      	uxtb	r3, r3
 8002880:	3330      	adds	r3, #48	; 0x30
 8002882:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.station_number[1] =
 8002884:	f107 030c 	add.w	r3, r7, #12
 8002888:	709a      	strb	r2, [r3, #2]

  // command
  temp_frame.ind_read_frame.command = 'R';
 800288a:	f107 030c 	add.w	r3, r7, #12
 800288e:	2252      	movs	r2, #82	; 0x52
 8002890:	70da      	strb	r2, [r3, #3]

  // command type
  temp_frame.ind_read_frame.command_type[0] = 'S';
 8002892:	f107 030c 	add.w	r3, r7, #12
 8002896:	2253      	movs	r2, #83	; 0x53
 8002898:	711a      	strb	r2, [r3, #4]
  temp_frame.ind_read_frame.command_type[1] = 'S';
 800289a:	f107 030c 	add.w	r3, r7, #12
 800289e:	2253      	movs	r2, #83	; 0x53
 80028a0:	715a      	strb	r2, [r3, #5]

  // no blocks
  temp_frame.ind_read_frame.no_blocks[0] =
      (p_frame_data->ind_read.no_of_blocks / 16) + '0';
 80028a2:	463b      	mov	r3, r7
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	785b      	ldrb	r3, [r3, #1]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	3330      	adds	r3, #48	; 0x30
 80028ae:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.no_blocks[0] =
 80028b0:	f107 030c 	add.w	r3, r7, #12
 80028b4:	719a      	strb	r2, [r3, #6]
  temp_frame.ind_read_frame.no_blocks[1] =
      (p_frame_data->ind_read.no_of_blocks % 16) + '0';
 80028b6:	463b      	mov	r3, r7
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	785b      	ldrb	r3, [r3, #1]
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	3330      	adds	r3, #48	; 0x30
 80028c4:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.no_blocks[1] =
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	71da      	strb	r2, [r3, #7]

  // device lenght %MW <- this is 3 chars and then we add lenght of address
  // %MW100 = 3 + strlen("100") = 6
  temp_frame.ind_read_frame.device_lenght[0] =
      ((3 + strlen(p_frame_data->ind_read.p_device_address)) / 16) + '0';
 80028cc:	463b      	mov	r3, r7
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd fc3a 	bl	800014c <strlen>
 80028d8:	4603      	mov	r3, r0
 80028da:	3303      	adds	r3, #3
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	3330      	adds	r3, #48	; 0x30
 80028e2:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.device_lenght[0] =
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	721a      	strb	r2, [r3, #8]
  temp_frame.ind_read_frame.device_lenght[1] =
      ((3 + strlen(p_frame_data->ind_read.p_device_address)) % 16) + '0';
 80028ea:	463b      	mov	r3, r7
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fd fc2b 	bl	800014c <strlen>
 80028f6:	4603      	mov	r3, r0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	3303      	adds	r3, #3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	b2db      	uxtb	r3, r3
 8002904:	3330      	adds	r3, #48	; 0x30
 8002906:	b2da      	uxtb	r2, r3
  temp_frame.ind_read_frame.device_lenght[1] =
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	725a      	strb	r2, [r3, #9]

  // prepare device name
  temp_frame.ind_read_frame.device_name[0] = '%';
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	2225      	movs	r2, #37	; 0x25
 8002914:	729a      	strb	r2, [r3, #10]
  temp_frame.ind_read_frame.device_name[1] =
      p_frame_data->ind_read.device_type; // device memory group (P,M,L etc.)
 8002916:	463b      	mov	r3, r7
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	78da      	ldrb	r2, [r3, #3]
  temp_frame.ind_read_frame.device_name[1] =
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	72da      	strb	r2, [r3, #11]
  temp_frame.ind_read_frame.device_name[2] = p_frame_data->ind_read.data_size;
 8002922:	463b      	mov	r3, r7
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	789a      	ldrb	r2, [r3, #2]
 8002928:	f107 030c 	add.w	r3, r7, #12
 800292c:	731a      	strb	r2, [r3, #12]
  strcpy((char *restrict)(&temp_frame.ind_read_frame.device_name[3]),
         (const char *)p_frame_data->ind_read.p_device_address);
 800292e:	463b      	mov	r3, r7
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
  strcpy((char *restrict)(&temp_frame.ind_read_frame.device_name[3]),
 8002934:	f107 030c 	add.w	r3, r7, #12
 8002938:	330d      	adds	r3, #13
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f002 fbff 	bl	8005140 <strcpy>

  temp_frame.ind_read_frame.tail_eot = XGB_CC_EOT;
 8002942:	f107 030c 	add.w	r3, r7, #12
 8002946:	2204      	movs	r2, #4
 8002948:	769a      	strb	r2, [r3, #26]

  // prepare message
  comm_status = prep_frame(&temp_frame, frame);
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	f107 020c 	add.w	r2, r7, #12
 8002950:	6819      	ldr	r1, [r3, #0]
 8002952:	4610      	mov	r0, r2
 8002954:	f7ff ff3a 	bl	80027cc <prep_frame>
 8002958:	4603      	mov	r3, r0
 800295a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  return comm_status;
 800295e:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8002962:	4618      	mov	r0, r3
 8002964:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <prep_indivi_write_frame>:
/*
 * Prepare frame - request of individual write
 */
static xgb_comm_err_t
prep_indivi_write_frame(u_frame *frame, const cmd_frame_data *p_frame_data)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b0c4      	sub	sp, #272	; 0x110
 8002970:	af00      	add	r7, sp, #0
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	6018      	str	r0, [r3, #0]
 8002976:	463b      	mov	r3, r7
 8002978:	6019      	str	r1, [r3, #0]
  // prepare message - fill union with 0s
  u_frame temp_frame = {0};
 800297a:	f107 030c 	add.w	r3, r7, #12
 800297e:	4618      	mov	r0, r3
 8002980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002984:	461a      	mov	r2, r3
 8002986:	2100      	movs	r1, #0
 8002988:	f002 fbb2 	bl	80050f0 <memset>
  xgb_comm_err_t comm_status = XGB_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  ;

  // header
  temp_frame.ind_write_frame.header_enq = XGB_CC_ENQ;
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	2205      	movs	r2, #5
 8002998:	701a      	strb	r2, [r3, #0]

  // station number
  temp_frame.ind_write_frame.station_number[0] =
      (p_frame_data->ind_write.station_number / 16) + '0';
 800299a:	463b      	mov	r3, r7
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3330      	adds	r3, #48	; 0x30
 80029a6:	b2da      	uxtb	r2, r3
  temp_frame.ind_write_frame.station_number[0] =
 80029a8:	f107 030c 	add.w	r3, r7, #12
 80029ac:	705a      	strb	r2, [r3, #1]
  temp_frame.ind_write_frame.station_number[1] =
      (p_frame_data->ind_write.station_number % 16) + '0';
 80029ae:	463b      	mov	r3, r7
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	3330      	adds	r3, #48	; 0x30
 80029bc:	b2da      	uxtb	r2, r3
  temp_frame.ind_write_frame.station_number[1] =
 80029be:	f107 030c 	add.w	r3, r7, #12
 80029c2:	709a      	strb	r2, [r3, #2]

  // command
  temp_frame.ind_write_frame.command = 'W';
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	2257      	movs	r2, #87	; 0x57
 80029ca:	70da      	strb	r2, [r3, #3]

  // command type
  temp_frame.ind_write_frame.command_type[0] = 'S';
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	2253      	movs	r2, #83	; 0x53
 80029d2:	711a      	strb	r2, [r3, #4]
  temp_frame.ind_write_frame.command_type[1] = 'S';
 80029d4:	f107 030c 	add.w	r3, r7, #12
 80029d8:	2253      	movs	r2, #83	; 0x53
 80029da:	715a      	strb	r2, [r3, #5]

  // no blocks
  temp_frame.ind_write_frame.no_blocks[0] =
      (p_frame_data->ind_write.no_of_blocks / 16) + '0';
 80029dc:	463b      	mov	r3, r7
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	785b      	ldrb	r3, [r3, #1]
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	3330      	adds	r3, #48	; 0x30
 80029e8:	b2da      	uxtb	r2, r3
  temp_frame.ind_write_frame.no_blocks[0] =
 80029ea:	f107 030c 	add.w	r3, r7, #12
 80029ee:	719a      	strb	r2, [r3, #6]
  temp_frame.ind_write_frame.no_blocks[1] =
      (p_frame_data->ind_write.no_of_blocks % 16) + '0';
 80029f0:	463b      	mov	r3, r7
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	785b      	ldrb	r3, [r3, #1]
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3330      	adds	r3, #48	; 0x30
 80029fe:	b2da      	uxtb	r2, r3
  temp_frame.ind_write_frame.no_blocks[1] =
 8002a00:	f107 030c 	add.w	r3, r7, #12
 8002a04:	71da      	strb	r2, [r3, #7]

  // device lenght %MW <- this is 3 chars and then we add lenght of address
  // %MW100 = 3 + strlen("100") = 6
  temp_frame.ind_write_frame.device_lenght[0] =
      ((3 + strlen(p_frame_data->ind_write.p_device_address)) / 16) + '0';
 8002a06:	463b      	mov	r3, r7
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fb9d 	bl	800014c <strlen>
 8002a12:	4603      	mov	r3, r0
 8002a14:	3303      	adds	r3, #3
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	3330      	adds	r3, #48	; 0x30
 8002a1c:	b2da      	uxtb	r2, r3
  temp_frame.ind_write_frame.device_lenght[0] =
 8002a1e:	f107 030c 	add.w	r3, r7, #12
 8002a22:	721a      	strb	r2, [r3, #8]
  temp_frame.ind_write_frame.device_lenght[1] =
      ((3 + strlen(p_frame_data->ind_write.p_device_address)) % 16) + '0';
 8002a24:	463b      	mov	r3, r7
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fb8e 	bl	800014c <strlen>
 8002a30:	4603      	mov	r3, r0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	3303      	adds	r3, #3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	3330      	adds	r3, #48	; 0x30
 8002a40:	b2da      	uxtb	r2, r3
  temp_frame.ind_write_frame.device_lenght[1] =
 8002a42:	f107 030c 	add.w	r3, r7, #12
 8002a46:	725a      	strb	r2, [r3, #9]

  // prepare device name
  temp_frame.ind_write_frame.device_name[0] = '%';
 8002a48:	f107 030c 	add.w	r3, r7, #12
 8002a4c:	2225      	movs	r2, #37	; 0x25
 8002a4e:	729a      	strb	r2, [r3, #10]
  temp_frame.ind_write_frame.device_name[1] =
      p_frame_data->ind_write.device_type; // device memory group (P,M,L etc.)
 8002a50:	463b      	mov	r3, r7
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	78da      	ldrb	r2, [r3, #3]
  temp_frame.ind_write_frame.device_name[1] =
 8002a56:	f107 030c 	add.w	r3, r7, #12
 8002a5a:	72da      	strb	r2, [r3, #11]
  temp_frame.ind_write_frame.device_name[2] = p_frame_data->ind_write.data_size;
 8002a5c:	463b      	mov	r3, r7
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	789a      	ldrb	r2, [r3, #2]
 8002a62:	f107 030c 	add.w	r3, r7, #12
 8002a66:	731a      	strb	r2, [r3, #12]
  strcpy((char *restrict)(&temp_frame.ind_read_frame.device_name[3]),
         (const char *)p_frame_data->ind_write.p_device_address);
 8002a68:	463b      	mov	r3, r7
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
  strcpy((char *restrict)(&temp_frame.ind_read_frame.device_name[3]),
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	330d      	adds	r3, #13
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f002 fb62 	bl	8005140 <strcpy>

  // prepare frame data
  uint8_t no_bytes_to_copy =
      p_frame_data->ind_write.no_of_blocks *
      (data_marking_to_size(p_frame_data->ind_write.data_size) * 2);
 8002a7c:	463b      	mov	r3, r7
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	789b      	ldrb	r3, [r3, #2]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f9ea 	bl	8002e5c <data_marking_to_size>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461a      	mov	r2, r3
      p_frame_data->ind_write.no_of_blocks *
 8002a8c:	463b      	mov	r3, r7
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	785b      	ldrb	r3, [r3, #1]
  uint8_t no_bytes_to_copy =
 8002a92:	fb03 f302 	mul.w	r3, r3, r2
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
  memcpy(temp_frame.ind_write_frame.data, p_frame_data->ind_write.p_data_buffer,
 8002a9e:	463b      	mov	r3, r7
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6899      	ldr	r1, [r3, #8]
 8002aa4:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	331a      	adds	r3, #26
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 fb10 	bl	80050d4 <memcpy>
         no_bytes_to_copy);

  for (uint8_t i = 0; i < no_bytes_to_copy; i++)
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002aba:	e013      	b.n	8002ae4 <prep_indivi_write_frame+0x178>
    {
      temp_frame.ind_write_frame.data[i] += '0';
 8002abc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002ac0:	f107 020c 	add.w	r2, r7, #12
 8002ac4:	4413      	add	r3, r2
 8002ac6:	7e9a      	ldrb	r2, [r3, #26]
 8002ac8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002acc:	3230      	adds	r2, #48	; 0x30
 8002ace:	b2d1      	uxtb	r1, r2
 8002ad0:	f107 020c 	add.w	r2, r7, #12
 8002ad4:	4413      	add	r3, r2
 8002ad6:	460a      	mov	r2, r1
 8002ad8:	769a      	strb	r2, [r3, #26]
  for (uint8_t i = 0; i < no_bytes_to_copy; i++)
 8002ada:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002ae4:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002ae8:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d3e5      	bcc.n	8002abc <prep_indivi_write_frame+0x150>
    }

  temp_frame.ind_write_frame.tail_eot = XGB_CC_EOT; // EOT
 8002af0:	f107 030c 	add.w	r3, r7, #12
 8002af4:	2204      	movs	r2, #4
 8002af6:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

  comm_status =  prep_frame(&temp_frame, frame);
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	f107 020c 	add.w	r2, r7, #12
 8002b00:	6819      	ldr	r1, [r3, #0]
 8002b02:	4610      	mov	r0, r2
 8002b04:	f7ff fe62 	bl	80027cc <prep_frame>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  return comm_status;
 8002b0e:	f997 310e 	ldrsb.w	r3, [r7, #270]	; 0x10e
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <prep_cont_read_frame>:
/*
 * Prepare frame - request of continuous read
 */
static xgb_comm_err_t prep_cont_read_frame(u_frame *frame,
                                           const cmd_frame_data *p_frame_data)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b0c2      	sub	sp, #264	; 0x108
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	1d3b      	adds	r3, r7, #4
 8002b24:	6018      	str	r0, [r3, #0]
 8002b26:	463b      	mov	r3, r7
 8002b28:	6019      	str	r1, [r3, #0]
  // prepare message - fill union with 0s
  u_frame temp_frame = {0};
 8002b2a:	f107 0308 	add.w	r3, r7, #8
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b34:	461a      	mov	r2, r3
 8002b36:	2100      	movs	r1, #0
 8002b38:	f002 fada 	bl	80050f0 <memset>

  // header
  temp_frame.cont_read_frame.header_enq = XGB_CC_ENQ; // ENQ
 8002b3c:	f107 0308 	add.w	r3, r7, #8
 8002b40:	2205      	movs	r2, #5
 8002b42:	701a      	strb	r2, [r3, #0]

  // station number
  temp_frame.cont_read_frame.station_number[0] =
      (p_frame_data->cont_read.station_number / 16) + '0';
 8002b44:	463b      	mov	r3, r7
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	3330      	adds	r3, #48	; 0x30
 8002b50:	b2da      	uxtb	r2, r3
  temp_frame.cont_read_frame.station_number[0] =
 8002b52:	f107 0308 	add.w	r3, r7, #8
 8002b56:	705a      	strb	r2, [r3, #1]
  temp_frame.cont_read_frame.station_number[1] =
      (p_frame_data->cont_read.station_number % 16) + '0';
 8002b58:	463b      	mov	r3, r7
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	3330      	adds	r3, #48	; 0x30
 8002b66:	b2da      	uxtb	r2, r3
  temp_frame.cont_read_frame.station_number[1] =
 8002b68:	f107 0308 	add.w	r3, r7, #8
 8002b6c:	709a      	strb	r2, [r3, #2]

  // command
  temp_frame.cont_read_frame.command = 'R';
 8002b6e:	f107 0308 	add.w	r3, r7, #8
 8002b72:	2252      	movs	r2, #82	; 0x52
 8002b74:	70da      	strb	r2, [r3, #3]

  // command type
  temp_frame.cont_read_frame.command_type[0] = 'S';
 8002b76:	f107 0308 	add.w	r3, r7, #8
 8002b7a:	2253      	movs	r2, #83	; 0x53
 8002b7c:	711a      	strb	r2, [r3, #4]
  temp_frame.cont_read_frame.command_type[1] = 'B';
 8002b7e:	f107 0308 	add.w	r3, r7, #8
 8002b82:	2242      	movs	r2, #66	; 0x42
 8002b84:	715a      	strb	r2, [r3, #5]

  // device lenght %MW <- this is 3 chars and then we add lenght of address
  // %MW100 = 3 + strlen("100") = 6
  temp_frame.cont_read_frame.device_lenght[0] =
      ((3 + strlen(p_frame_data->cont_read.p_device_address)) / 16) + '0';
 8002b86:	463b      	mov	r3, r7
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fadd 	bl	800014c <strlen>
 8002b92:	4603      	mov	r3, r0
 8002b94:	3303      	adds	r3, #3
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	3330      	adds	r3, #48	; 0x30
 8002b9c:	b2da      	uxtb	r2, r3
  temp_frame.cont_read_frame.device_lenght[0] =
 8002b9e:	f107 0308 	add.w	r3, r7, #8
 8002ba2:	719a      	strb	r2, [r3, #6]
  temp_frame.cont_read_frame.device_lenght[1] =
      ((3 + strlen(p_frame_data->cont_read.p_device_address)) % 16) + '0';
 8002ba4:	463b      	mov	r3, r7
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd face 	bl	800014c <strlen>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	3303      	adds	r3, #3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	3330      	adds	r3, #48	; 0x30
 8002bc0:	b2da      	uxtb	r2, r3
  temp_frame.cont_read_frame.device_lenght[1] =
 8002bc2:	f107 0308 	add.w	r3, r7, #8
 8002bc6:	71da      	strb	r2, [r3, #7]

  // prepare device name
  temp_frame.cont_read_frame.device_name[0] = '%';
 8002bc8:	f107 0308 	add.w	r3, r7, #8
 8002bcc:	2225      	movs	r2, #37	; 0x25
 8002bce:	721a      	strb	r2, [r3, #8]
  temp_frame.cont_read_frame.device_name[1] =
      p_frame_data->cont_read.device_type; // device memory group (P,M,L etc.)
 8002bd0:	463b      	mov	r3, r7
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	789a      	ldrb	r2, [r3, #2]
  temp_frame.cont_read_frame.device_name[1] =
 8002bd6:	f107 0308 	add.w	r3, r7, #8
 8002bda:	725a      	strb	r2, [r3, #9]
  temp_frame.cont_read_frame.device_name[2] = p_frame_data->cont_read.data_size;
 8002bdc:	463b      	mov	r3, r7
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	785a      	ldrb	r2, [r3, #1]
 8002be2:	f107 0308 	add.w	r3, r7, #8
 8002be6:	729a      	strb	r2, [r3, #10]
  strcpy((char *restrict)(&temp_frame.cont_read_frame.device_name[3]),
         (const char *)p_frame_data->cont_read.p_device_address);
 8002be8:	463b      	mov	r3, r7
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
  strcpy((char *restrict)(&temp_frame.cont_read_frame.device_name[3]),
 8002bee:	f107 0308 	add.w	r3, r7, #8
 8002bf2:	330b      	adds	r3, #11
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 faa2 	bl	8005140 <strcpy>

  // no of data
  temp_frame.cont_read_frame.no_data[0] =
      (p_frame_data->cont_read.no_of_data / 16) + '0';
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	78db      	ldrb	r3, [r3, #3]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	3330      	adds	r3, #48	; 0x30
 8002c08:	b2da      	uxtb	r2, r3
  temp_frame.cont_read_frame.no_data[0] =
 8002c0a:	f107 0308 	add.w	r3, r7, #8
 8002c0e:	761a      	strb	r2, [r3, #24]
  temp_frame.cont_read_frame.no_data[1] =
      (p_frame_data->cont_read.no_of_data % 16) + '0';
 8002c10:	463b      	mov	r3, r7
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	78db      	ldrb	r3, [r3, #3]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	3330      	adds	r3, #48	; 0x30
 8002c1e:	b2da      	uxtb	r2, r3
  temp_frame.cont_read_frame.no_data[1] =
 8002c20:	f107 0308 	add.w	r3, r7, #8
 8002c24:	765a      	strb	r2, [r3, #25]

  temp_frame.cont_read_frame.tail_eot = XGB_CC_EOT; // EOT
 8002c26:	f107 0308 	add.w	r3, r7, #8
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	769a      	strb	r2, [r3, #26]

  // trimm message
  return prep_frame(&temp_frame, frame);
 8002c2e:	1d3b      	adds	r3, r7, #4
 8002c30:	f107 0208 	add.w	r2, r7, #8
 8002c34:	6819      	ldr	r1, [r3, #0]
 8002c36:	4610      	mov	r0, r2
 8002c38:	f7ff fdc8 	bl	80027cc <prep_frame>
 8002c3c:	4603      	mov	r3, r0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <prep_cont_write_frame>:
/*
 * Prepare frame - request of continuous write
 */
static xgb_comm_err_t prep_cont_write_frame(u_frame *frame,
                                            const cmd_frame_data *p_frame_data)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0c4      	sub	sp, #272	; 0x110
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	6018      	str	r0, [r3, #0]
 8002c52:	463b      	mov	r3, r7
 8002c54:	6019      	str	r1, [r3, #0]
  // prepare message - fill union with 0s
  u_frame temp_frame = {0};
 8002c56:	f107 030c 	add.w	r3, r7, #12
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c60:	461a      	mov	r2, r3
 8002c62:	2100      	movs	r1, #0
 8002c64:	f002 fa44 	bl	80050f0 <memset>

  // header
  temp_frame.cont_write_frame.header_enq = XGB_CC_ENQ; // ENQ
 8002c68:	f107 030c 	add.w	r3, r7, #12
 8002c6c:	2205      	movs	r2, #5
 8002c6e:	701a      	strb	r2, [r3, #0]

  // station number
  temp_frame.cont_write_frame.station_number[0] =
      (p_frame_data->cont_write.station_number / 16) + '0';
 8002c70:	463b      	mov	r3, r7
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	3330      	adds	r3, #48	; 0x30
 8002c7c:	b2da      	uxtb	r2, r3
  temp_frame.cont_write_frame.station_number[0] =
 8002c7e:	f107 030c 	add.w	r3, r7, #12
 8002c82:	705a      	strb	r2, [r3, #1]
  temp_frame.cont_write_frame.station_number[1] =
      (p_frame_data->cont_write.station_number % 16) + '0';
 8002c84:	463b      	mov	r3, r7
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	3330      	adds	r3, #48	; 0x30
 8002c92:	b2da      	uxtb	r2, r3
  temp_frame.cont_write_frame.station_number[1] =
 8002c94:	f107 030c 	add.w	r3, r7, #12
 8002c98:	709a      	strb	r2, [r3, #2]

  // command
  temp_frame.cont_write_frame.command = 'W';
 8002c9a:	f107 030c 	add.w	r3, r7, #12
 8002c9e:	2257      	movs	r2, #87	; 0x57
 8002ca0:	70da      	strb	r2, [r3, #3]

  // command type
  temp_frame.cont_write_frame.command_type[0] = 'S';
 8002ca2:	f107 030c 	add.w	r3, r7, #12
 8002ca6:	2253      	movs	r2, #83	; 0x53
 8002ca8:	711a      	strb	r2, [r3, #4]
  temp_frame.cont_write_frame.command_type[1] = 'B';
 8002caa:	f107 030c 	add.w	r3, r7, #12
 8002cae:	2242      	movs	r2, #66	; 0x42
 8002cb0:	715a      	strb	r2, [r3, #5]

  // device lenght %MW <- this is 3 chars and then we add lenght of address
  // %MW100 = 3 + strlen("100") = 6
  temp_frame.cont_write_frame.device_lenght[0] =
      ((3 + strlen(p_frame_data->cont_write.p_device_address)) / 16) + '0';
 8002cb2:	463b      	mov	r3, r7
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fa47 	bl	800014c <strlen>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	3303      	adds	r3, #3
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	3330      	adds	r3, #48	; 0x30
 8002cc8:	b2da      	uxtb	r2, r3
  temp_frame.cont_write_frame.device_lenght[0] =
 8002cca:	f107 030c 	add.w	r3, r7, #12
 8002cce:	719a      	strb	r2, [r3, #6]
  temp_frame.cont_write_frame.device_lenght[1] =
      ((3 + strlen(p_frame_data->cont_write.p_device_address)) % 16) + '0';
 8002cd0:	463b      	mov	r3, r7
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd fa38 	bl	800014c <strlen>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	3303      	adds	r3, #3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	3330      	adds	r3, #48	; 0x30
 8002cec:	b2da      	uxtb	r2, r3
  temp_frame.cont_write_frame.device_lenght[1] =
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	71da      	strb	r2, [r3, #7]

  // prepare device name
  temp_frame.cont_write_frame.device_name[0] = '%';
 8002cf4:	f107 030c 	add.w	r3, r7, #12
 8002cf8:	2225      	movs	r2, #37	; 0x25
 8002cfa:	721a      	strb	r2, [r3, #8]
  temp_frame.cont_write_frame.device_name[1] =
      p_frame_data->cont_write.device_type; // device memory group (P,M,L etc.)
 8002cfc:	463b      	mov	r3, r7
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	789a      	ldrb	r2, [r3, #2]
  temp_frame.cont_write_frame.device_name[1] =
 8002d02:	f107 030c 	add.w	r3, r7, #12
 8002d06:	725a      	strb	r2, [r3, #9]
  temp_frame.cont_write_frame.device_name[2] =
      p_frame_data->cont_write.data_size;
 8002d08:	463b      	mov	r3, r7
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	785a      	ldrb	r2, [r3, #1]
  temp_frame.cont_write_frame.device_name[2] =
 8002d0e:	f107 030c 	add.w	r3, r7, #12
 8002d12:	729a      	strb	r2, [r3, #10]
  strcpy((char *restrict)(&temp_frame.cont_write_frame.device_name[3]),
         (const char *)p_frame_data->cont_write.p_device_address);
 8002d14:	463b      	mov	r3, r7
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
  strcpy((char *restrict)(&temp_frame.cont_write_frame.device_name[3]),
 8002d1a:	f107 030c 	add.w	r3, r7, #12
 8002d1e:	330b      	adds	r3, #11
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f002 fa0c 	bl	8005140 <strcpy>

  // no of data
  temp_frame.cont_write_frame.no_data[0] =
      (p_frame_data->cont_write.no_of_data / 16) + '0';
 8002d28:	463b      	mov	r3, r7
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	78db      	ldrb	r3, [r3, #3]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	3330      	adds	r3, #48	; 0x30
 8002d34:	b2da      	uxtb	r2, r3
  temp_frame.cont_write_frame.no_data[0] =
 8002d36:	f107 030c 	add.w	r3, r7, #12
 8002d3a:	761a      	strb	r2, [r3, #24]
  temp_frame.cont_write_frame.no_data[1] =
      (p_frame_data->cont_write.no_of_data % 16) + '0';
 8002d3c:	463b      	mov	r3, r7
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	78db      	ldrb	r3, [r3, #3]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	3330      	adds	r3, #48	; 0x30
 8002d4a:	b2da      	uxtb	r2, r3
  temp_frame.cont_write_frame.no_data[1] =
 8002d4c:	f107 030c 	add.w	r3, r7, #12
 8002d50:	765a      	strb	r2, [r3, #25]

  // prepare frame data
  uint8_t no_bytes_to_copy =
      p_frame_data->cont_write.no_of_data *
      (data_marking_to_size(p_frame_data->cont_write.data_size) * 2);
 8002d52:	463b      	mov	r3, r7
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 f87f 	bl	8002e5c <data_marking_to_size>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	461a      	mov	r2, r3
      p_frame_data->cont_write.no_of_data *
 8002d62:	463b      	mov	r3, r7
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	78db      	ldrb	r3, [r3, #3]
  uint8_t no_bytes_to_copy =
 8002d68:	fb03 f302 	mul.w	r3, r3, r2
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

  memcpy(temp_frame.cont_write_frame.data,
         p_frame_data->cont_write.p_data_buffer, no_bytes_to_copy);
 8002d74:	463b      	mov	r3, r7
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6899      	ldr	r1, [r3, #8]
  memcpy(temp_frame.cont_write_frame.data,
 8002d7a:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8002d7e:	f107 030c 	add.w	r3, r7, #12
 8002d82:	331a      	adds	r3, #26
 8002d84:	4618      	mov	r0, r3
 8002d86:	f002 f9a5 	bl	80050d4 <memcpy>

  for (uint8_t i = 0; i < no_bytes_to_copy; i++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002d90:	e013      	b.n	8002dba <prep_cont_write_frame+0x172>
    {
      temp_frame.cont_write_frame.data[i] += '0';
 8002d92:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d96:	f107 020c 	add.w	r2, r7, #12
 8002d9a:	4413      	add	r3, r2
 8002d9c:	7e9a      	ldrb	r2, [r3, #26]
 8002d9e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002da2:	3230      	adds	r2, #48	; 0x30
 8002da4:	b2d1      	uxtb	r1, r2
 8002da6:	f107 020c 	add.w	r2, r7, #12
 8002daa:	4413      	add	r3, r2
 8002dac:	460a      	mov	r2, r1
 8002dae:	769a      	strb	r2, [r3, #26]
  for (uint8_t i = 0; i < no_bytes_to_copy; i++)
 8002db0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002db4:	3301      	adds	r3, #1
 8002db6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002dba:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002dbe:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d3e5      	bcc.n	8002d92 <prep_cont_write_frame+0x14a>
    }

  temp_frame.cont_write_frame.tail_eot = XGB_CC_EOT; // EOT
 8002dc6:	f107 030c 	add.w	r3, r7, #12
 8002dca:	2204      	movs	r2, #4
 8002dcc:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

  // trimm message
  return prep_frame(&temp_frame, frame);
 8002dd0:	1d3b      	adds	r3, r7, #4
 8002dd2:	f107 020c 	add.w	r2, r7, #12
 8002dd6:	6819      	ldr	r1, [r3, #0]
 8002dd8:	4610      	mov	r0, r2
 8002dda:	f7ff fcf7 	bl	80027cc <prep_frame>
 8002dde:	4603      	mov	r3, r0

  return XGB_ERR_EOT_MISSING;
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <send_specific_cmd>:

static xgb_comm_err_t send_specific_cmd(const cmd_frame_data *p_frame_data,
                                        prep_frame_ID ID)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b0c4      	sub	sp, #272	; 0x110
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	6018      	str	r0, [r3, #0]
 8002df6:	460a      	mov	r2, r1
 8002df8:	1cfb      	adds	r3, r7, #3
 8002dfa:	701a      	strb	r2, [r3, #0]
      {INDIVI_READ, prep_indivi_read_frame},
      {CONT_READ, prep_cont_read_frame},
      {INDIVI_WRITE, prep_indivi_write_frame},
      {CONT_WRITE, prep_cont_write_frame}};

  xgb_comm_err_t status = XGB_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  u_frame frame;

  status = prep_fun_mapper[ID].function(&frame, p_frame_data);
 8002e02:	1cfb      	adds	r3, r7, #3
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <send_specific_cmd+0x6c>)
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	1d3a      	adds	r2, r7, #4
 8002e10:	f107 0008 	add.w	r0, r7, #8
 8002e14:	6811      	ldr	r1, [r2, #0]
 8002e16:	4798      	blx	r3
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

  if(XGB_OK == status)
 8002e1e:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d110      	bne.n	8002e48 <send_specific_cmd+0x5c>
  {
	  uint32_t len = (uint32_t)strlen((char *)frame.frame_bytes);
 8002e26:	f107 0308 	add.w	r3, r7, #8
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd f98e 	bl	800014c <strlen>
 8002e30:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	  status = send_frame((uint8_t *)&frame.frame_bytes,len);
 8002e34:	f107 0308 	add.w	r3, r7, #8
 8002e38:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fca9 	bl	8002794 <send_frame>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  }

  return status;
 8002e48:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	08005dbc 	.word	0x08005dbc

08002e5c <data_marking_to_size>:

// converts marking to amount of bytes
static uint8_t data_marking_to_size(xgb_data_size_marking_t data_size)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	71fb      	strb	r3, [r7, #7]
  switch (data_size)
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	3b42      	subs	r3, #66	; 0x42
 8002e6a:	2b16      	cmp	r3, #22
 8002e6c:	d83a      	bhi.n	8002ee4 <data_marking_to_size+0x88>
 8002e6e:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <data_marking_to_size+0x18>)
 8002e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e74:	08002ed5 	.word	0x08002ed5
 8002e78:	08002ee5 	.word	0x08002ee5
 8002e7c:	08002edd 	.word	0x08002edd
 8002e80:	08002ee5 	.word	0x08002ee5
 8002e84:	08002ee5 	.word	0x08002ee5
 8002e88:	08002ee5 	.word	0x08002ee5
 8002e8c:	08002ee5 	.word	0x08002ee5
 8002e90:	08002ee5 	.word	0x08002ee5
 8002e94:	08002ee5 	.word	0x08002ee5
 8002e98:	08002ee5 	.word	0x08002ee5
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee5 	.word	0x08002ee5
 8002ea4:	08002ee5 	.word	0x08002ee5
 8002ea8:	08002ee5 	.word	0x08002ee5
 8002eac:	08002ee5 	.word	0x08002ee5
 8002eb0:	08002ee5 	.word	0x08002ee5
 8002eb4:	08002ee5 	.word	0x08002ee5
 8002eb8:	08002ee5 	.word	0x08002ee5
 8002ebc:	08002ee5 	.word	0x08002ee5
 8002ec0:	08002ee5 	.word	0x08002ee5
 8002ec4:	08002ee5 	.word	0x08002ee5
 8002ec8:	08002ed9 	.word	0x08002ed9
 8002ecc:	08002ed1 	.word	0x08002ed1
    {
    case (XGB_DATA_SIZE_BIT):
      {
        return 1;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e008      	b.n	8002ee6 <data_marking_to_size+0x8a>
      }
    case (XGB_DATA_SIZE_BYTE):
      {
        return 1;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e006      	b.n	8002ee6 <data_marking_to_size+0x8a>
      }
    case (XGB_DATA_SIZE_WORD):
      {
        return 2;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e004      	b.n	8002ee6 <data_marking_to_size+0x8a>
      }
    case (XGB_DATA_SIZE_DWORD):
      {
        return 4;
 8002edc:	2304      	movs	r3, #4
 8002ede:	e002      	b.n	8002ee6 <data_marking_to_size+0x8a>
      }
    case (XGB_DATA_SIZE_LWORD):
      {
        return 8;
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	e000      	b.n	8002ee6 <data_marking_to_size+0x8a>
      }
    default:
      {
        return 0;
 8002ee4:	2300      	movs	r3, #0
      }
    }
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_Init>:
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <HAL_Init+0x28>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a07      	ldr	r2, [pc, #28]	; (8002f18 <HAL_Init+0x28>)
 8002efa:	f043 0310 	orr.w	r3, r3, #16
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	2003      	movs	r0, #3
 8002f02:	f000 f947 	bl	8003194 <HAL_NVIC_SetPriorityGrouping>
 8002f06:	200f      	movs	r0, #15
 8002f08:	f000 f808 	bl	8002f1c <HAL_InitTick>
 8002f0c:	f7fe f8a2 	bl	8001054 <HAL_MspInit>
 8002f10:	2300      	movs	r3, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40022000 	.word	0x40022000

08002f1c <HAL_InitTick>:
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <HAL_InitTick+0x54>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_InitTick+0x58>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 f95f 	bl	80031fe <HAL_SYSTICK_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_InitTick+0x2e>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e00e      	b.n	8002f68 <HAL_InitTick+0x4c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b0f      	cmp	r3, #15
 8002f4e:	d80a      	bhi.n	8002f66 <HAL_InitTick+0x4a>
 8002f50:	2200      	movs	r2, #0
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295
 8002f58:	f000 f927 	bl	80031aa <HAL_NVIC_SetPriority>
 8002f5c:	4a06      	ldr	r2, [pc, #24]	; (8002f78 <HAL_InitTick+0x5c>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	2300      	movs	r3, #0
 8002f64:	e000      	b.n	8002f68 <HAL_InitTick+0x4c>
 8002f66:	2301      	movs	r3, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000004 	.word	0x20000004
 8002f74:	2000001c 	.word	0x2000001c
 8002f78:	20000018 	.word	0x20000018

08002f7c <HAL_IncTick>:
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_IncTick+0x1c>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_IncTick+0x20>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	4a03      	ldr	r2, [pc, #12]	; (8002f9c <HAL_IncTick+0x20>)
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	2000001c 	.word	0x2000001c
 8002f9c:	200002e8 	.word	0x200002e8

08002fa0 <HAL_GetTick>:
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4b02      	ldr	r3, [pc, #8]	; (8002fb0 <HAL_GetTick+0x10>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr
 8002fb0:	200002e8 	.word	0x200002e8

08002fb4 <HAL_Delay>:
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	f7ff fff0 	bl	8002fa0 <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d005      	beq.n	8002fda <HAL_Delay+0x26>
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_Delay+0x44>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	bf00      	nop
 8002fdc:	f7ff ffe0 	bl	8002fa0 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d8f7      	bhi.n	8002fdc <HAL_Delay+0x28>
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000001c 	.word	0x2000001c

08002ffc <__NVIC_SetPriorityGrouping>:
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003018:	4013      	ands	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	021a      	lsls	r2, r3, #8
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
 8003024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	60d3      	str	r3, [r2, #12]
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_GetPriorityGrouping>:
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <__NVIC_GetPriorityGrouping+0x18>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_EnableIRQ>:
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	db0b      	blt.n	800308a <__NVIC_EnableIRQ+0x2a>
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	4906      	ldr	r1, [pc, #24]	; (8003094 <__NVIC_EnableIRQ+0x34>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	2001      	movs	r0, #1
 8003082:	fa00 f202 	lsl.w	r2, r0, r2
 8003086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	e000e100 	.word	0xe000e100

08003098 <__NVIC_SetPriority>:
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	6039      	str	r1, [r7, #0]
 80030a2:	71fb      	strb	r3, [r7, #7]
 80030a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	db0a      	blt.n	80030c2 <__NVIC_SetPriority+0x2a>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	490c      	ldr	r1, [pc, #48]	; (80030e4 <__NVIC_SetPriority+0x4c>)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	0112      	lsls	r2, r2, #4
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	440b      	add	r3, r1
 80030bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80030c0:	e00a      	b.n	80030d8 <__NVIC_SetPriority+0x40>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	4908      	ldr	r1, [pc, #32]	; (80030e8 <__NVIC_SetPriority+0x50>)
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	3b04      	subs	r3, #4
 80030d0:	0112      	lsls	r2, r2, #4
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	440b      	add	r3, r1
 80030d6:	761a      	strb	r2, [r3, #24]
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000e100 	.word	0xe000e100
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <NVIC_EncodePriority>:
 80030ec:	b480      	push	{r7}
 80030ee:	b089      	sub	sp, #36	; 0x24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f1c3 0307 	rsb	r3, r3, #7
 8003106:	2b04      	cmp	r3, #4
 8003108:	bf28      	it	cs
 800310a:	2304      	movcs	r3, #4
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3304      	adds	r3, #4
 8003112:	2b06      	cmp	r3, #6
 8003114:	d902      	bls.n	800311c <NVIC_EncodePriority+0x30>
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3b03      	subs	r3, #3
 800311a:	e000      	b.n	800311e <NVIC_EncodePriority+0x32>
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	f04f 32ff 	mov.w	r2, #4294967295
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43da      	mvns	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	401a      	ands	r2, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	409a      	lsls	r2, r3
 8003134:	f04f 31ff 	mov.w	r1, #4294967295
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	fa01 f303 	lsl.w	r3, r1, r3
 800313e:	43d9      	mvns	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	400b      	ands	r3, r1
 8003144:	4313      	orrs	r3, r2
 8003146:	4618      	mov	r0, r3
 8003148:	3724      	adds	r7, #36	; 0x24
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <SysTick_Config>:
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003160:	d301      	bcc.n	8003166 <SysTick_Config+0x16>
 8003162:	2301      	movs	r3, #1
 8003164:	e00f      	b.n	8003186 <SysTick_Config+0x36>
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <SysTick_Config+0x40>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	6053      	str	r3, [r2, #4]
 800316e:	210f      	movs	r1, #15
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	f7ff ff90 	bl	8003098 <__NVIC_SetPriority>
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <SysTick_Config+0x40>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
 800317e:	4b04      	ldr	r3, [pc, #16]	; (8003190 <SysTick_Config+0x40>)
 8003180:	2207      	movs	r2, #7
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	2300      	movs	r3, #0
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	e000e010 	.word	0xe000e010

08003194 <HAL_NVIC_SetPriorityGrouping>:
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff2d 	bl	8002ffc <__NVIC_SetPriorityGrouping>
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_NVIC_SetPriority>:
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b086      	sub	sp, #24
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	73fb      	strb	r3, [r7, #15]
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	f7ff ff42 	bl	8003044 <__NVIC_GetPriorityGrouping>
 80031c0:	6178      	str	r0, [r7, #20]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	6978      	ldr	r0, [r7, #20]
 80031c8:	f7ff ff90 	bl	80030ec <NVIC_EncodePriority>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff5f 	bl	8003098 <__NVIC_SetPriority>
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_EnableIRQ>:
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	71fb      	strb	r3, [r7, #7]
 80031ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff35 	bl	8003060 <__NVIC_EnableIRQ>
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_SYSTICK_Config>:
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ffa2 	bl	8003150 <SysTick_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_DMA_Init>:
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_DMA_Init+0x16>
 800322a:	2301      	movs	r3, #1
 800322c:	e043      	b.n	80032b6 <HAL_DMA_Init+0x9e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <HAL_DMA_Init+0xa8>)
 8003236:	4413      	add	r3, r2
 8003238:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <HAL_DMA_Init+0xac>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	009a      	lsls	r2, r3, #2
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a1f      	ldr	r2, [pc, #124]	; (80032c8 <HAL_DMA_Init+0xb0>)
 800324a:	63da      	str	r2, [r3, #60]	; 0x3c
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003262:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	4313      	orrs	r3, r2
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	639a      	str	r2, [r3, #56]	; 0x38
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2020 	strb.w	r2, [r3, #32]
 80032b4:	2300      	movs	r3, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	bffdfff8 	.word	0xbffdfff8
 80032c4:	cccccccd 	.word	0xcccccccd
 80032c8:	40020000 	.word	0x40020000

080032cc <HAL_DMA_Start_IT>:
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
 80032da:	2300      	movs	r3, #0
 80032dc:	75fb      	strb	r3, [r7, #23]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_DMA_Start_IT+0x20>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e04a      	b.n	8003382 <HAL_DMA_Start_IT+0xb6>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2020 	strb.w	r2, [r3, #32]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d13a      	bne.n	8003374 <HAL_DMA_Start_IT+0xa8>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	639a      	str	r2, [r3, #56]	; 0x38
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f9e8 	bl	80036f8 <DMA_SetConfig>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_DMA_Start_IT+0x76>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 020e 	orr.w	r2, r2, #14
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e00f      	b.n	8003362 <HAL_DMA_Start_IT+0x96>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0204 	bic.w	r2, r2, #4
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 020a 	orr.w	r2, r2, #10
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e005      	b.n	8003380 <HAL_DMA_Start_IT+0xb4>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2020 	strb.w	r2, [r3, #32]
 800337c:	2302      	movs	r3, #2
 800337e:	75fb      	strb	r3, [r7, #23]
 8003380:	7dfb      	ldrb	r3, [r7, #23]
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_DMA_Abort>:
 800338a:	b480      	push	{r7}
 800338c:	b085      	sub	sp, #20
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800339c:	2b02      	cmp	r3, #2
 800339e:	d008      	beq.n	80033b2 <HAL_DMA_Abort+0x28>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2204      	movs	r2, #4
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2020 	strb.w	r2, [r3, #32]
 80033ae:	2301      	movs	r3, #1
 80033b0:	e020      	b.n	80033f4 <HAL_DMA_Abort+0x6a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 020e 	bic.w	r2, r2, #14
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033da:	2101      	movs	r1, #1
 80033dc:	fa01 f202 	lsl.w	r2, r1, r2
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2020 	strb.w	r2, [r3, #32]
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
	...

08003400 <HAL_DMA_Abort_IT>:
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	2300      	movs	r3, #0
 800340a:	73fb      	strb	r3, [r7, #15]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003412:	2b02      	cmp	r3, #2
 8003414:	d005      	beq.n	8003422 <HAL_DMA_Abort_IT+0x22>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2204      	movs	r2, #4
 800341a:	639a      	str	r2, [r3, #56]	; 0x38
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
 8003420:	e051      	b.n	80034c6 <HAL_DMA_Abort_IT+0xc6>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 020e 	bic.w	r2, r2, #14
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0201 	bic.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <HAL_DMA_Abort_IT+0xd0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d029      	beq.n	80034a0 <HAL_DMA_Abort_IT+0xa0>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a20      	ldr	r2, [pc, #128]	; (80034d4 <HAL_DMA_Abort_IT+0xd4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d022      	beq.n	800349c <HAL_DMA_Abort_IT+0x9c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_DMA_Abort_IT+0xd8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d01a      	beq.n	8003496 <HAL_DMA_Abort_IT+0x96>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1d      	ldr	r2, [pc, #116]	; (80034dc <HAL_DMA_Abort_IT+0xdc>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d012      	beq.n	8003490 <HAL_DMA_Abort_IT+0x90>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <HAL_DMA_Abort_IT+0xe0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00a      	beq.n	800348a <HAL_DMA_Abort_IT+0x8a>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1a      	ldr	r2, [pc, #104]	; (80034e4 <HAL_DMA_Abort_IT+0xe4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d102      	bne.n	8003484 <HAL_DMA_Abort_IT+0x84>
 800347e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003482:	e00e      	b.n	80034a2 <HAL_DMA_Abort_IT+0xa2>
 8003484:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003488:	e00b      	b.n	80034a2 <HAL_DMA_Abort_IT+0xa2>
 800348a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800348e:	e008      	b.n	80034a2 <HAL_DMA_Abort_IT+0xa2>
 8003490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003494:	e005      	b.n	80034a2 <HAL_DMA_Abort_IT+0xa2>
 8003496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800349a:	e002      	b.n	80034a2 <HAL_DMA_Abort_IT+0xa2>
 800349c:	2310      	movs	r3, #16
 800349e:	e000      	b.n	80034a2 <HAL_DMA_Abort_IT+0xa2>
 80034a0:	2301      	movs	r3, #1
 80034a2:	4a11      	ldr	r2, [pc, #68]	; (80034e8 <HAL_DMA_Abort_IT+0xe8>)
 80034a4:	6053      	str	r3, [r2, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2020 	strb.w	r2, [r3, #32]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_DMA_Abort_IT+0xc6>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	4798      	blx	r3
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40020008 	.word	0x40020008
 80034d4:	4002001c 	.word	0x4002001c
 80034d8:	40020030 	.word	0x40020030
 80034dc:	40020044 	.word	0x40020044
 80034e0:	40020058 	.word	0x40020058
 80034e4:	4002006c 	.word	0x4002006c
 80034e8:	40020000 	.word	0x40020000

080034ec <HAL_DMA_IRQHandler>:
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	2204      	movs	r2, #4
 800350a:	409a      	lsls	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d04f      	beq.n	80035b4 <HAL_DMA_IRQHandler+0xc8>
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d04a      	beq.n	80035b4 <HAL_DMA_IRQHandler+0xc8>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d107      	bne.n	800353c <HAL_DMA_IRQHandler+0x50>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0204 	bic.w	r2, r2, #4
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a66      	ldr	r2, [pc, #408]	; (80036dc <HAL_DMA_IRQHandler+0x1f0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d029      	beq.n	800359a <HAL_DMA_IRQHandler+0xae>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a65      	ldr	r2, [pc, #404]	; (80036e0 <HAL_DMA_IRQHandler+0x1f4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d022      	beq.n	8003596 <HAL_DMA_IRQHandler+0xaa>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a63      	ldr	r2, [pc, #396]	; (80036e4 <HAL_DMA_IRQHandler+0x1f8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d01a      	beq.n	8003590 <HAL_DMA_IRQHandler+0xa4>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a62      	ldr	r2, [pc, #392]	; (80036e8 <HAL_DMA_IRQHandler+0x1fc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d012      	beq.n	800358a <HAL_DMA_IRQHandler+0x9e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a60      	ldr	r2, [pc, #384]	; (80036ec <HAL_DMA_IRQHandler+0x200>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00a      	beq.n	8003584 <HAL_DMA_IRQHandler+0x98>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a5f      	ldr	r2, [pc, #380]	; (80036f0 <HAL_DMA_IRQHandler+0x204>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d102      	bne.n	800357e <HAL_DMA_IRQHandler+0x92>
 8003578:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800357c:	e00e      	b.n	800359c <HAL_DMA_IRQHandler+0xb0>
 800357e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003582:	e00b      	b.n	800359c <HAL_DMA_IRQHandler+0xb0>
 8003584:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003588:	e008      	b.n	800359c <HAL_DMA_IRQHandler+0xb0>
 800358a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800358e:	e005      	b.n	800359c <HAL_DMA_IRQHandler+0xb0>
 8003590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003594:	e002      	b.n	800359c <HAL_DMA_IRQHandler+0xb0>
 8003596:	2340      	movs	r3, #64	; 0x40
 8003598:	e000      	b.n	800359c <HAL_DMA_IRQHandler+0xb0>
 800359a:	2304      	movs	r3, #4
 800359c:	4a55      	ldr	r2, [pc, #340]	; (80036f4 <HAL_DMA_IRQHandler+0x208>)
 800359e:	6053      	str	r3, [r2, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8094 	beq.w	80036d2 <HAL_DMA_IRQHandler+0x1e6>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
 80035b2:	e08e      	b.n	80036d2 <HAL_DMA_IRQHandler+0x1e6>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	2202      	movs	r2, #2
 80035ba:	409a      	lsls	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d056      	beq.n	8003672 <HAL_DMA_IRQHandler+0x186>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d051      	beq.n	8003672 <HAL_DMA_IRQHandler+0x186>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <HAL_DMA_IRQHandler+0x108>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 020a 	bic.w	r2, r2, #10
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a38      	ldr	r2, [pc, #224]	; (80036dc <HAL_DMA_IRQHandler+0x1f0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d029      	beq.n	8003652 <HAL_DMA_IRQHandler+0x166>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a37      	ldr	r2, [pc, #220]	; (80036e0 <HAL_DMA_IRQHandler+0x1f4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d022      	beq.n	800364e <HAL_DMA_IRQHandler+0x162>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a35      	ldr	r2, [pc, #212]	; (80036e4 <HAL_DMA_IRQHandler+0x1f8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d01a      	beq.n	8003648 <HAL_DMA_IRQHandler+0x15c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a34      	ldr	r2, [pc, #208]	; (80036e8 <HAL_DMA_IRQHandler+0x1fc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d012      	beq.n	8003642 <HAL_DMA_IRQHandler+0x156>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a32      	ldr	r2, [pc, #200]	; (80036ec <HAL_DMA_IRQHandler+0x200>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00a      	beq.n	800363c <HAL_DMA_IRQHandler+0x150>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a31      	ldr	r2, [pc, #196]	; (80036f0 <HAL_DMA_IRQHandler+0x204>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d102      	bne.n	8003636 <HAL_DMA_IRQHandler+0x14a>
 8003630:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003634:	e00e      	b.n	8003654 <HAL_DMA_IRQHandler+0x168>
 8003636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800363a:	e00b      	b.n	8003654 <HAL_DMA_IRQHandler+0x168>
 800363c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003640:	e008      	b.n	8003654 <HAL_DMA_IRQHandler+0x168>
 8003642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003646:	e005      	b.n	8003654 <HAL_DMA_IRQHandler+0x168>
 8003648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800364c:	e002      	b.n	8003654 <HAL_DMA_IRQHandler+0x168>
 800364e:	2320      	movs	r3, #32
 8003650:	e000      	b.n	8003654 <HAL_DMA_IRQHandler+0x168>
 8003652:	2302      	movs	r3, #2
 8003654:	4a27      	ldr	r2, [pc, #156]	; (80036f4 <HAL_DMA_IRQHandler+0x208>)
 8003656:	6053      	str	r3, [r2, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2020 	strb.w	r2, [r3, #32]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	d034      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x1e6>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4798      	blx	r3
 8003670:	e02f      	b.n	80036d2 <HAL_DMA_IRQHandler+0x1e6>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	2208      	movs	r2, #8
 8003678:	409a      	lsls	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d028      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x1e8>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d023      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x1e8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 020e 	bic.w	r2, r2, #14
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	2101      	movs	r1, #1
 80036a6:	fa01 f202 	lsl.w	r2, r1, r2
 80036aa:	605a      	str	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	639a      	str	r2, [r3, #56]	; 0x38
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2020 	strb.w	r2, [r3, #32]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x1e8>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	4798      	blx	r3
 80036d2:	bf00      	nop
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40020008 	.word	0x40020008
 80036e0:	4002001c 	.word	0x4002001c
 80036e4:	40020030 	.word	0x40020030
 80036e8:	40020044 	.word	0x40020044
 80036ec:	40020058 	.word	0x40020058
 80036f0:	4002006c 	.word	0x4002006c
 80036f4:	40020000 	.word	0x40020000

080036f8 <DMA_SetConfig>:
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370e:	2101      	movs	r1, #1
 8003710:	fa01 f202 	lsl.w	r2, r1, r2
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b10      	cmp	r3, #16
 8003724:	d108      	bne.n	8003738 <DMA_SetConfig+0x40>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	60da      	str	r2, [r3, #12]
 8003736:	e007      	b.n	8003748 <DMA_SetConfig+0x50>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	60da      	str	r2, [r3, #12]
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr
	...

08003754 <HAL_GPIO_Init>:
 8003754:	b480      	push	{r7}
 8003756:	b08b      	sub	sp, #44	; 0x2c
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
 800375e:	2300      	movs	r3, #0
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
 8003762:	2300      	movs	r3, #0
 8003764:	623b      	str	r3, [r7, #32]
 8003766:	e148      	b.n	80039fa <HAL_GPIO_Init+0x2a6>
 8003768:	2201      	movs	r2, #1
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	429a      	cmp	r2, r3
 8003782:	f040 8137 	bne.w	80039f4 <HAL_GPIO_Init+0x2a0>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4aa3      	ldr	r2, [pc, #652]	; (8003a18 <HAL_GPIO_Init+0x2c4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d05e      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 8003790:	4aa1      	ldr	r2, [pc, #644]	; (8003a18 <HAL_GPIO_Init+0x2c4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d875      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 8003796:	4aa1      	ldr	r2, [pc, #644]	; (8003a1c <HAL_GPIO_Init+0x2c8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d058      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 800379c:	4a9f      	ldr	r2, [pc, #636]	; (8003a1c <HAL_GPIO_Init+0x2c8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d86f      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 80037a2:	4a9f      	ldr	r2, [pc, #636]	; (8003a20 <HAL_GPIO_Init+0x2cc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d052      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 80037a8:	4a9d      	ldr	r2, [pc, #628]	; (8003a20 <HAL_GPIO_Init+0x2cc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d869      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 80037ae:	4a9d      	ldr	r2, [pc, #628]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d04c      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 80037b4:	4a9b      	ldr	r2, [pc, #620]	; (8003a24 <HAL_GPIO_Init+0x2d0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d863      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 80037ba:	4a9b      	ldr	r2, [pc, #620]	; (8003a28 <HAL_GPIO_Init+0x2d4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d046      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 80037c0:	4a99      	ldr	r2, [pc, #612]	; (8003a28 <HAL_GPIO_Init+0x2d4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d85d      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 80037c6:	2b12      	cmp	r3, #18
 80037c8:	d82a      	bhi.n	8003820 <HAL_GPIO_Init+0xcc>
 80037ca:	2b12      	cmp	r3, #18
 80037cc:	d859      	bhi.n	8003882 <HAL_GPIO_Init+0x12e>
 80037ce:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <HAL_GPIO_Init+0x80>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	0800384f 	.word	0x0800384f
 80037d8:	08003829 	.word	0x08003829
 80037dc:	0800383b 	.word	0x0800383b
 80037e0:	0800387d 	.word	0x0800387d
 80037e4:	08003883 	.word	0x08003883
 80037e8:	08003883 	.word	0x08003883
 80037ec:	08003883 	.word	0x08003883
 80037f0:	08003883 	.word	0x08003883
 80037f4:	08003883 	.word	0x08003883
 80037f8:	08003883 	.word	0x08003883
 80037fc:	08003883 	.word	0x08003883
 8003800:	08003883 	.word	0x08003883
 8003804:	08003883 	.word	0x08003883
 8003808:	08003883 	.word	0x08003883
 800380c:	08003883 	.word	0x08003883
 8003810:	08003883 	.word	0x08003883
 8003814:	08003883 	.word	0x08003883
 8003818:	08003831 	.word	0x08003831
 800381c:	08003845 	.word	0x08003845
 8003820:	4a82      	ldr	r2, [pc, #520]	; (8003a2c <HAL_GPIO_Init+0x2d8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <HAL_GPIO_Init+0xfa>
 8003826:	e02c      	b.n	8003882 <HAL_GPIO_Init+0x12e>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	e029      	b.n	8003884 <HAL_GPIO_Init+0x130>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	3304      	adds	r3, #4
 8003836:	623b      	str	r3, [r7, #32]
 8003838:	e024      	b.n	8003884 <HAL_GPIO_Init+0x130>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	3308      	adds	r3, #8
 8003840:	623b      	str	r3, [r7, #32]
 8003842:	e01f      	b.n	8003884 <HAL_GPIO_Init+0x130>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	330c      	adds	r3, #12
 800384a:	623b      	str	r3, [r7, #32]
 800384c:	e01a      	b.n	8003884 <HAL_GPIO_Init+0x130>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d102      	bne.n	800385c <HAL_GPIO_Init+0x108>
 8003856:	2304      	movs	r3, #4
 8003858:	623b      	str	r3, [r7, #32]
 800385a:	e013      	b.n	8003884 <HAL_GPIO_Init+0x130>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <HAL_GPIO_Init+0x11c>
 8003864:	2308      	movs	r3, #8
 8003866:	623b      	str	r3, [r7, #32]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	611a      	str	r2, [r3, #16]
 800386e:	e009      	b.n	8003884 <HAL_GPIO_Init+0x130>
 8003870:	2308      	movs	r3, #8
 8003872:	623b      	str	r3, [r7, #32]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	615a      	str	r2, [r3, #20]
 800387a:	e003      	b.n	8003884 <HAL_GPIO_Init+0x130>
 800387c:	2300      	movs	r3, #0
 800387e:	623b      	str	r3, [r7, #32]
 8003880:	e000      	b.n	8003884 <HAL_GPIO_Init+0x130>
 8003882:	bf00      	nop
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2bff      	cmp	r3, #255	; 0xff
 8003888:	d801      	bhi.n	800388e <HAL_GPIO_Init+0x13a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	e001      	b.n	8003892 <HAL_GPIO_Init+0x13e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3304      	adds	r3, #4
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2bff      	cmp	r3, #255	; 0xff
 8003898:	d802      	bhi.n	80038a0 <HAL_GPIO_Init+0x14c>
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	e002      	b.n	80038a6 <HAL_GPIO_Init+0x152>
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	3b08      	subs	r3, #8
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	210f      	movs	r1, #15
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	401a      	ands	r2, r3
 80038b8:	6a39      	ldr	r1, [r7, #32]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	fa01 f303 	lsl.w	r3, r1, r3
 80038c0:	431a      	orrs	r2, r3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 8090 	beq.w	80039f4 <HAL_GPIO_Init+0x2a0>
 80038d4:	4b56      	ldr	r3, [pc, #344]	; (8003a30 <HAL_GPIO_Init+0x2dc>)
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	4a55      	ldr	r2, [pc, #340]	; (8003a30 <HAL_GPIO_Init+0x2dc>)
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	6193      	str	r3, [r2, #24]
 80038e0:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <HAL_GPIO_Init+0x2dc>)
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4a51      	ldr	r2, [pc, #324]	; (8003a34 <HAL_GPIO_Init+0x2e0>)
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	089b      	lsrs	r3, r3, #2
 80038f2:	3302      	adds	r3, #2
 80038f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	220f      	movs	r2, #15
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4013      	ands	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a49      	ldr	r2, [pc, #292]	; (8003a38 <HAL_GPIO_Init+0x2e4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00d      	beq.n	8003934 <HAL_GPIO_Init+0x1e0>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a48      	ldr	r2, [pc, #288]	; (8003a3c <HAL_GPIO_Init+0x2e8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d007      	beq.n	8003930 <HAL_GPIO_Init+0x1dc>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a47      	ldr	r2, [pc, #284]	; (8003a40 <HAL_GPIO_Init+0x2ec>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d101      	bne.n	800392c <HAL_GPIO_Init+0x1d8>
 8003928:	2302      	movs	r3, #2
 800392a:	e004      	b.n	8003936 <HAL_GPIO_Init+0x1e2>
 800392c:	2303      	movs	r3, #3
 800392e:	e002      	b.n	8003936 <HAL_GPIO_Init+0x1e2>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <HAL_GPIO_Init+0x1e2>
 8003934:	2300      	movs	r3, #0
 8003936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003938:	f002 0203 	and.w	r2, r2, #3
 800393c:	0092      	lsls	r2, r2, #2
 800393e:	4093      	lsls	r3, r2
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	493b      	ldr	r1, [pc, #236]	; (8003a34 <HAL_GPIO_Init+0x2e0>)
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	3302      	adds	r3, #2
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d006      	beq.n	800396e <HAL_GPIO_Init+0x21a>
 8003960:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4937      	ldr	r1, [pc, #220]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	4313      	orrs	r3, r2
 800396a:	600b      	str	r3, [r1, #0]
 800396c:	e006      	b.n	800397c <HAL_GPIO_Init+0x228>
 800396e:	4b35      	ldr	r3, [pc, #212]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	43db      	mvns	r3, r3
 8003976:	4933      	ldr	r1, [pc, #204]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 8003978:	4013      	ands	r3, r2
 800397a:	600b      	str	r3, [r1, #0]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d006      	beq.n	8003996 <HAL_GPIO_Init+0x242>
 8003988:	4b2e      	ldr	r3, [pc, #184]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	492d      	ldr	r1, [pc, #180]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
 8003994:	e006      	b.n	80039a4 <HAL_GPIO_Init+0x250>
 8003996:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	43db      	mvns	r3, r3
 800399e:	4929      	ldr	r1, [pc, #164]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d006      	beq.n	80039be <HAL_GPIO_Init+0x26a>
 80039b0:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	4923      	ldr	r1, [pc, #140]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]
 80039bc:	e006      	b.n	80039cc <HAL_GPIO_Init+0x278>
 80039be:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	491f      	ldr	r1, [pc, #124]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d006      	beq.n	80039e6 <HAL_GPIO_Init+0x292>
 80039d8:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	4919      	ldr	r1, [pc, #100]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60cb      	str	r3, [r1, #12]
 80039e4:	e006      	b.n	80039f4 <HAL_GPIO_Init+0x2a0>
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	4915      	ldr	r1, [pc, #84]	; (8003a44 <HAL_GPIO_Init+0x2f0>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	60cb      	str	r3, [r1, #12]
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	3301      	adds	r3, #1
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f47f aeaf 	bne.w	8003768 <HAL_GPIO_Init+0x14>
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
 8003a0e:	372c      	adds	r7, #44	; 0x2c
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	10320000 	.word	0x10320000
 8003a1c:	10310000 	.word	0x10310000
 8003a20:	10220000 	.word	0x10220000
 8003a24:	10210000 	.word	0x10210000
 8003a28:	10120000 	.word	0x10120000
 8003a2c:	10110000 	.word	0x10110000
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40010000 	.word	0x40010000
 8003a38:	40010800 	.word	0x40010800
 8003a3c:	40010c00 	.word	0x40010c00
 8003a40:	40011000 	.word	0x40011000
 8003a44:	40010400 	.word	0x40010400

08003a48 <HAL_GPIO_WritePin>:
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	807b      	strh	r3, [r7, #2]
 8003a54:	4613      	mov	r3, r2
 8003a56:	707b      	strb	r3, [r7, #1]
 8003a58:	787b      	ldrb	r3, [r7, #1]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_WritePin+0x1e>
 8003a5e:	887a      	ldrh	r2, [r7, #2]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	611a      	str	r2, [r3, #16]
 8003a64:	e003      	b.n	8003a6e <HAL_GPIO_WritePin+0x26>
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	041a      	lsls	r2, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	611a      	str	r2, [r3, #16]
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <HAL_GPIO_EXTI_IRQHandler>:
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	80fb      	strh	r3, [r7, #6]
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d006      	beq.n	8003a9c <HAL_GPIO_EXTI_IRQHandler+0x24>
 8003a8e:	4a05      	ldr	r2, [pc, #20]	; (8003aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	6153      	str	r3, [r2, #20]
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fc fbfa 	bl	8000290 <HAL_GPIO_EXTI_Callback>
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40010400 	.word	0x40010400

08003aa8 <HAL_RCC_OscConfig>:
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_OscConfig+0x12>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e26c      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8087 	beq.w	8003bd6 <HAL_RCC_OscConfig+0x12e>
 8003ac8:	4b92      	ldr	r3, [pc, #584]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d00c      	beq.n	8003aee <HAL_RCC_OscConfig+0x46>
 8003ad4:	4b8f      	ldr	r3, [pc, #572]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d112      	bne.n	8003b06 <HAL_RCC_OscConfig+0x5e>
 8003ae0:	4b8c      	ldr	r3, [pc, #560]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aec:	d10b      	bne.n	8003b06 <HAL_RCC_OscConfig+0x5e>
 8003aee:	4b89      	ldr	r3, [pc, #548]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d06c      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x12c>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d168      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x12c>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e246      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x76>
 8003b10:	4b80      	ldr	r3, [pc, #512]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a7f      	ldr	r2, [pc, #508]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e02e      	b.n	8003b7c <HAL_RCC_OscConfig+0xd4>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x98>
 8003b26:	4b7b      	ldr	r3, [pc, #492]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a7a      	ldr	r2, [pc, #488]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	4b78      	ldr	r3, [pc, #480]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a77      	ldr	r2, [pc, #476]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e01d      	b.n	8003b7c <HAL_RCC_OscConfig+0xd4>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0xbc>
 8003b4a:	4b72      	ldr	r3, [pc, #456]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a71      	ldr	r2, [pc, #452]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	4b6f      	ldr	r3, [pc, #444]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a6e      	ldr	r2, [pc, #440]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e00b      	b.n	8003b7c <HAL_RCC_OscConfig+0xd4>
 8003b64:	4b6b      	ldr	r3, [pc, #428]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6a      	ldr	r2, [pc, #424]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4b68      	ldr	r3, [pc, #416]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a67      	ldr	r2, [pc, #412]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d013      	beq.n	8003bac <HAL_RCC_OscConfig+0x104>
 8003b84:	f7ff fa0c 	bl	8002fa0 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0xf6>
 8003b8c:	f7ff fa08 	bl	8002fa0 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0xf6>
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e1fa      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003b9e:	4b5d      	ldr	r3, [pc, #372]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0xe4>
 8003baa:	e014      	b.n	8003bd6 <HAL_RCC_OscConfig+0x12e>
 8003bac:	f7ff f9f8 	bl	8002fa0 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x11e>
 8003bb4:	f7ff f9f4 	bl	8002fa0 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x11e>
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e1e6      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003bc6:	4b53      	ldr	r3, [pc, #332]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x10c>
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x12e>
 8003bd4:	bf00      	nop
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d063      	beq.n	8003caa <HAL_RCC_OscConfig+0x202>
 8003be2:	4b4c      	ldr	r3, [pc, #304]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00b      	beq.n	8003c06 <HAL_RCC_OscConfig+0x15e>
 8003bee:	4b49      	ldr	r3, [pc, #292]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d11c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x18c>
 8003bfa:	4b46      	ldr	r3, [pc, #280]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d116      	bne.n	8003c34 <HAL_RCC_OscConfig+0x18c>
 8003c06:	4b43      	ldr	r3, [pc, #268]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_RCC_OscConfig+0x176>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d001      	beq.n	8003c1e <HAL_RCC_OscConfig+0x176>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e1ba      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003c1e:	4b3d      	ldr	r3, [pc, #244]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4939      	ldr	r1, [pc, #228]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]
 8003c32:	e03a      	b.n	8003caa <HAL_RCC_OscConfig+0x202>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d020      	beq.n	8003c7e <HAL_RCC_OscConfig+0x1d6>
 8003c3c:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <HAL_RCC_OscConfig+0x270>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	f7ff f9ad 	bl	8002fa0 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x1b4>
 8003c4a:	f7ff f9a9 	bl	8002fa0 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x1b4>
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e19b      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003c5c:	4b2d      	ldr	r3, [pc, #180]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x1a2>
 8003c68:	4b2a      	ldr	r3, [pc, #168]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4927      	ldr	r1, [pc, #156]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	600b      	str	r3, [r1, #0]
 8003c7c:	e015      	b.n	8003caa <HAL_RCC_OscConfig+0x202>
 8003c7e:	4b26      	ldr	r3, [pc, #152]	; (8003d18 <HAL_RCC_OscConfig+0x270>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	f7ff f98c 	bl	8002fa0 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x1f6>
 8003c8c:	f7ff f988 	bl	8002fa0 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x1f6>
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e17a      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x1e4>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d03a      	beq.n	8003d2c <HAL_RCC_OscConfig+0x284>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d019      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x24a>
 8003cbe:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <HAL_RCC_OscConfig+0x274>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	f7ff f96c 	bl	8002fa0 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x236>
 8003ccc:	f7ff f968 	bl	8002fa0 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x236>
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e15a      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003cde:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x224>
 8003cea:	2001      	movs	r0, #1
 8003cec:	f000 fad8 	bl	80042a0 <RCC_Delay>
 8003cf0:	e01c      	b.n	8003d2c <HAL_RCC_OscConfig+0x284>
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <HAL_RCC_OscConfig+0x274>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	f7ff f952 	bl	8002fa0 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]
 8003cfe:	e00f      	b.n	8003d20 <HAL_RCC_OscConfig+0x278>
 8003d00:	f7ff f94e 	bl	8002fa0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d908      	bls.n	8003d20 <HAL_RCC_OscConfig+0x278>
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e140      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	42420000 	.word	0x42420000
 8003d1c:	42420480 	.word	0x42420480
 8003d20:	4b9e      	ldr	r3, [pc, #632]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e9      	bne.n	8003d00 <HAL_RCC_OscConfig+0x258>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80a6 	beq.w	8003e86 <HAL_RCC_OscConfig+0x3de>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	75fb      	strb	r3, [r7, #23]
 8003d3e:	4b97      	ldr	r3, [pc, #604]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10d      	bne.n	8003d66 <HAL_RCC_OscConfig+0x2be>
 8003d4a:	4b94      	ldr	r3, [pc, #592]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4a93      	ldr	r2, [pc, #588]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d54:	61d3      	str	r3, [r2, #28]
 8003d56:	4b91      	ldr	r3, [pc, #580]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2301      	movs	r3, #1
 8003d64:	75fb      	strb	r3, [r7, #23]
 8003d66:	4b8e      	ldr	r3, [pc, #568]	; (8003fa0 <HAL_RCC_OscConfig+0x4f8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d118      	bne.n	8003da4 <HAL_RCC_OscConfig+0x2fc>
 8003d72:	4b8b      	ldr	r3, [pc, #556]	; (8003fa0 <HAL_RCC_OscConfig+0x4f8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a8a      	ldr	r2, [pc, #552]	; (8003fa0 <HAL_RCC_OscConfig+0x4f8>)
 8003d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	f7ff f90f 	bl	8002fa0 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x2f0>
 8003d86:	f7ff f90b 	bl	8002fa0 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b64      	cmp	r3, #100	; 0x64
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x2f0>
 8003d94:	2303      	movs	r3, #3
 8003d96:	e0fd      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003d98:	4b81      	ldr	r3, [pc, #516]	; (8003fa0 <HAL_RCC_OscConfig+0x4f8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x2de>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d106      	bne.n	8003dba <HAL_RCC_OscConfig+0x312>
 8003dac:	4b7b      	ldr	r3, [pc, #492]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	4a7a      	ldr	r2, [pc, #488]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6213      	str	r3, [r2, #32]
 8003db8:	e02d      	b.n	8003e16 <HAL_RCC_OscConfig+0x36e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x334>
 8003dc2:	4b76      	ldr	r3, [pc, #472]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	4a75      	ldr	r2, [pc, #468]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	6213      	str	r3, [r2, #32]
 8003dce:	4b73      	ldr	r3, [pc, #460]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	4a72      	ldr	r2, [pc, #456]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003dd4:	f023 0304 	bic.w	r3, r3, #4
 8003dd8:	6213      	str	r3, [r2, #32]
 8003dda:	e01c      	b.n	8003e16 <HAL_RCC_OscConfig+0x36e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b05      	cmp	r3, #5
 8003de2:	d10c      	bne.n	8003dfe <HAL_RCC_OscConfig+0x356>
 8003de4:	4b6d      	ldr	r3, [pc, #436]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	4a6c      	ldr	r2, [pc, #432]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003dea:	f043 0304 	orr.w	r3, r3, #4
 8003dee:	6213      	str	r3, [r2, #32]
 8003df0:	4b6a      	ldr	r3, [pc, #424]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	4a69      	ldr	r2, [pc, #420]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6213      	str	r3, [r2, #32]
 8003dfc:	e00b      	b.n	8003e16 <HAL_RCC_OscConfig+0x36e>
 8003dfe:	4b67      	ldr	r3, [pc, #412]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	4a66      	ldr	r2, [pc, #408]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	6213      	str	r3, [r2, #32]
 8003e0a:	4b64      	ldr	r3, [pc, #400]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	4a63      	ldr	r2, [pc, #396]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003e10:	f023 0304 	bic.w	r3, r3, #4
 8003e14:	6213      	str	r3, [r2, #32]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d015      	beq.n	8003e4a <HAL_RCC_OscConfig+0x3a2>
 8003e1e:	f7ff f8bf 	bl	8002fa0 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]
 8003e24:	e00a      	b.n	8003e3c <HAL_RCC_OscConfig+0x394>
 8003e26:	f7ff f8bb 	bl	8002fa0 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x394>
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e0ab      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003e3c:	4b57      	ldr	r3, [pc, #348]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0ee      	beq.n	8003e26 <HAL_RCC_OscConfig+0x37e>
 8003e48:	e014      	b.n	8003e74 <HAL_RCC_OscConfig+0x3cc>
 8003e4a:	f7ff f8a9 	bl	8002fa0 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_OscConfig+0x3c0>
 8003e52:	f7ff f8a5 	bl	8002fa0 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x3c0>
 8003e64:	2303      	movs	r3, #3
 8003e66:	e095      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003e68:	4b4c      	ldr	r3, [pc, #304]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1ee      	bne.n	8003e52 <HAL_RCC_OscConfig+0x3aa>
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <HAL_RCC_OscConfig+0x3de>
 8003e7a:	4b48      	ldr	r3, [pc, #288]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	4a47      	ldr	r2, [pc, #284]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e84:	61d3      	str	r3, [r2, #28]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 8081 	beq.w	8003f92 <HAL_RCC_OscConfig+0x4ea>
 8003e90:	4b42      	ldr	r3, [pc, #264]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d061      	beq.n	8003f60 <HAL_RCC_OscConfig+0x4b8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d146      	bne.n	8003f32 <HAL_RCC_OscConfig+0x48a>
 8003ea4:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <HAL_RCC_OscConfig+0x4fc>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	f7ff f879 	bl	8002fa0 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x41c>
 8003eb2:	f7ff f875 	bl	8002fa0 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x41c>
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e067      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003ec4:	4b35      	ldr	r3, [pc, #212]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f0      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x40a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed8:	d108      	bne.n	8003eec <HAL_RCC_OscConfig+0x444>
 8003eda:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	492d      	ldr	r1, [pc, #180]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	604b      	str	r3, [r1, #4]
 8003eec:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a19      	ldr	r1, [r3, #32]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	430b      	orrs	r3, r1
 8003efe:	4927      	ldr	r1, [pc, #156]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
 8003f04:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <HAL_RCC_OscConfig+0x4fc>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f7ff f849 	bl	8002fa0 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x47c>
 8003f12:	f7ff f845 	bl	8002fa0 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x47c>
 8003f20:	2303      	movs	r3, #3
 8003f22:	e037      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x46a>
 8003f30:	e02f      	b.n	8003f92 <HAL_RCC_OscConfig+0x4ea>
 8003f32:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <HAL_RCC_OscConfig+0x4fc>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	f7ff f832 	bl	8002fa0 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x4aa>
 8003f40:	f7ff f82e 	bl	8002fa0 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x4aa>
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e020      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x498>
 8003f5e:	e018      	b.n	8003f92 <HAL_RCC_OscConfig+0x4ea>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_OscConfig+0x4c4>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e013      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCC_OscConfig+0x4f4>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCC_OscConfig+0x4e6>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCC_OscConfig+0x4ea>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_RCC_OscConfig+0x4ec>
 8003f92:	2300      	movs	r3, #0
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	42420060 	.word	0x42420060

08003fa8 <HAL_RCC_ClockConfig>:
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x14>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0d0      	b.n	800415e <HAL_RCC_ClockConfig+0x1b6>
 8003fbc:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d910      	bls.n	8003fec <HAL_RCC_ClockConfig+0x44>
 8003fca:	4b67      	ldr	r3, [pc, #412]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 0207 	bic.w	r2, r3, #7
 8003fd2:	4965      	ldr	r1, [pc, #404]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
 8003fda:	4b63      	ldr	r3, [pc, #396]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x44>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0b8      	b.n	800415e <HAL_RCC_ClockConfig+0x1b6>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d020      	beq.n	800403a <HAL_RCC_ClockConfig+0x92>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_RCC_ClockConfig+0x68>
 8004004:	4b59      	ldr	r3, [pc, #356]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4a58      	ldr	r2, [pc, #352]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 800400a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800400e:	6053      	str	r3, [r2, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_RCC_ClockConfig+0x80>
 800401c:	4b53      	ldr	r3, [pc, #332]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	4a52      	ldr	r2, [pc, #328]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004022:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004026:	6053      	str	r3, [r2, #4]
 8004028:	4b50      	ldr	r3, [pc, #320]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	494d      	ldr	r1, [pc, #308]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004036:	4313      	orrs	r3, r2
 8004038:	604b      	str	r3, [r1, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d040      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x120>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d107      	bne.n	800405e <HAL_RCC_ClockConfig+0xb6>
 800404e:	4b47      	ldr	r3, [pc, #284]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d115      	bne.n	8004086 <HAL_RCC_ClockConfig+0xde>
 800405a:	2301      	movs	r3, #1
 800405c:	e07f      	b.n	800415e <HAL_RCC_ClockConfig+0x1b6>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d107      	bne.n	8004076 <HAL_RCC_ClockConfig+0xce>
 8004066:	4b41      	ldr	r3, [pc, #260]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <HAL_RCC_ClockConfig+0xde>
 8004072:	2301      	movs	r3, #1
 8004074:	e073      	b.n	800415e <HAL_RCC_ClockConfig+0x1b6>
 8004076:	4b3d      	ldr	r3, [pc, #244]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_RCC_ClockConfig+0xde>
 8004082:	2301      	movs	r3, #1
 8004084:	e06b      	b.n	800415e <HAL_RCC_ClockConfig+0x1b6>
 8004086:	4b39      	ldr	r3, [pc, #228]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f023 0203 	bic.w	r2, r3, #3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4936      	ldr	r1, [pc, #216]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]
 8004098:	f7fe ff82 	bl	8002fa0 <HAL_GetTick>
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	e00a      	b.n	80040b6 <HAL_RCC_ClockConfig+0x10e>
 80040a0:	f7fe ff7e 	bl	8002fa0 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_ClockConfig+0x10e>
 80040b2:	2303      	movs	r3, #3
 80040b4:	e053      	b.n	800415e <HAL_RCC_ClockConfig+0x1b6>
 80040b6:	4b2d      	ldr	r3, [pc, #180]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 020c 	and.w	r2, r3, #12
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d1eb      	bne.n	80040a0 <HAL_RCC_ClockConfig+0xf8>
 80040c8:	4b27      	ldr	r3, [pc, #156]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d210      	bcs.n	80040f8 <HAL_RCC_ClockConfig+0x150>
 80040d6:	4b24      	ldr	r3, [pc, #144]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 0207 	bic.w	r2, r3, #7
 80040de:	4922      	ldr	r1, [pc, #136]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
 80040e6:	4b20      	ldr	r3, [pc, #128]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x150>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e032      	b.n	800415e <HAL_RCC_ClockConfig+0x1b6>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_RCC_ClockConfig+0x16e>
 8004104:	4b19      	ldr	r3, [pc, #100]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	4916      	ldr	r1, [pc, #88]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004112:	4313      	orrs	r3, r2
 8004114:	604b      	str	r3, [r1, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <HAL_RCC_ClockConfig+0x18e>
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	490e      	ldr	r1, [pc, #56]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004132:	4313      	orrs	r3, r2
 8004134:	604b      	str	r3, [r1, #4]
 8004136:	f000 f821 	bl	800417c <HAL_RCC_GetSysClockFreq>
 800413a:	4602      	mov	r2, r0
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	091b      	lsrs	r3, r3, #4
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	490a      	ldr	r1, [pc, #40]	; (8004170 <HAL_RCC_ClockConfig+0x1c8>)
 8004148:	5ccb      	ldrb	r3, [r1, r3]
 800414a:	fa22 f303 	lsr.w	r3, r2, r3
 800414e:	4a09      	ldr	r2, [pc, #36]	; (8004174 <HAL_RCC_ClockConfig+0x1cc>)
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4b09      	ldr	r3, [pc, #36]	; (8004178 <HAL_RCC_ClockConfig+0x1d0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe fee0 	bl	8002f1c <HAL_InitTick>
 800415c:	2300      	movs	r3, #0
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40022000 	.word	0x40022000
 800416c:	40021000 	.word	0x40021000
 8004170:	08005b24 	.word	0x08005b24
 8004174:	20000004 	.word	0x20000004
 8004178:	20000018 	.word	0x20000018

0800417c <HAL_RCC_GetSysClockFreq>:
 800417c:	b490      	push	{r4, r7}
 800417e:	b08a      	sub	sp, #40	; 0x28
 8004180:	af00      	add	r7, sp, #0
 8004182:	4b2a      	ldr	r3, [pc, #168]	; (800422c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004184:	1d3c      	adds	r4, r7, #4
 8004186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800418c:	f240 2301 	movw	r3, #513	; 0x201
 8004190:	803b      	strh	r3, [r7, #0]
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	2300      	movs	r3, #0
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	2300      	movs	r3, #0
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	2300      	movs	r3, #0
 80041a4:	623b      	str	r3, [r7, #32]
 80041a6:	4b22      	ldr	r3, [pc, #136]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d002      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0x40>
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d003      	beq.n	80041c2 <HAL_RCC_GetSysClockFreq+0x46>
 80041ba:	e02d      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x9c>
 80041bc:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041be:	623b      	str	r3, [r7, #32]
 80041c0:	e02d      	b.n	800421e <HAL_RCC_GetSysClockFreq+0xa2>
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	0c9b      	lsrs	r3, r3, #18
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041ce:	4413      	add	r3, r2
 80041d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d013      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0x8c>
 80041e0:	4b13      	ldr	r3, [pc, #76]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	0c5b      	lsrs	r3, r3, #17
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041ee:	4413      	add	r3, r2
 80041f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	4a0e      	ldr	r2, [pc, #56]	; (8004234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041fa:	fb02 f203 	mul.w	r2, r2, r3
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
 8004206:	e004      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0x96>
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	4a0b      	ldr	r2, [pc, #44]	; (8004238 <HAL_RCC_GetSysClockFreq+0xbc>)
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	623b      	str	r3, [r7, #32]
 8004216:	e002      	b.n	800421e <HAL_RCC_GetSysClockFreq+0xa2>
 8004218:	4b06      	ldr	r3, [pc, #24]	; (8004234 <HAL_RCC_GetSysClockFreq+0xb8>)
 800421a:	623b      	str	r3, [r7, #32]
 800421c:	bf00      	nop
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	4618      	mov	r0, r3
 8004222:	3728      	adds	r7, #40	; 0x28
 8004224:	46bd      	mov	sp, r7
 8004226:	bc90      	pop	{r4, r7}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	08005aa4 	.word	0x08005aa4
 8004230:	40021000 	.word	0x40021000
 8004234:	007a1200 	.word	0x007a1200
 8004238:	003d0900 	.word	0x003d0900

0800423c <HAL_RCC_GetHCLKFreq>:
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
 8004240:	4b02      	ldr	r3, [pc, #8]	; (800424c <HAL_RCC_GetHCLKFreq+0x10>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr
 800424c:	20000004 	.word	0x20000004

08004250 <HAL_RCC_GetPCLK1Freq>:
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
 8004254:	f7ff fff2 	bl	800423c <HAL_RCC_GetHCLKFreq>
 8004258:	4602      	mov	r2, r0
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	4903      	ldr	r1, [pc, #12]	; (8004274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004266:	5ccb      	ldrb	r3, [r1, r3]
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40021000 	.word	0x40021000
 8004274:	08005b34 	.word	0x08005b34

08004278 <HAL_RCC_GetPCLK2Freq>:
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
 800427c:	f7ff ffde 	bl	800423c <HAL_RCC_GetHCLKFreq>
 8004280:	4602      	mov	r2, r0
 8004282:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	0adb      	lsrs	r3, r3, #11
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	4903      	ldr	r1, [pc, #12]	; (800429c <HAL_RCC_GetPCLK2Freq+0x24>)
 800428e:	5ccb      	ldrb	r3, [r1, r3]
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	08005b34 	.word	0x08005b34

080042a0 <RCC_Delay>:
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <RCC_Delay+0x34>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <RCC_Delay+0x38>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	0a5b      	lsrs	r3, r3, #9
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	bf00      	nop
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1e5a      	subs	r2, r3, #1
 80042c2:	60fa      	str	r2, [r7, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f9      	bne.n	80042bc <RCC_Delay+0x1c>
 80042c8:	bf00      	nop
 80042ca:	bf00      	nop
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr
 80042d4:	20000004 	.word	0x20000004
 80042d8:	10624dd3 	.word	0x10624dd3

080042dc <HAL_SPI_Init>:
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_SPI_Init+0x12>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e076      	b.n	80043dc <HAL_SPI_Init+0x100>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d108      	bne.n	8004308 <HAL_SPI_Init+0x2c>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042fe:	d009      	beq.n	8004314 <HAL_SPI_Init+0x38>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	61da      	str	r2, [r3, #28]
 8004306:	e005      	b.n	8004314 <HAL_SPI_Init+0x38>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	611a      	str	r2, [r3, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	615a      	str	r2, [r3, #20]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	629a      	str	r2, [r3, #40]	; 0x28
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_SPI_Init+0x58>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fc fe1c 	bl	8000f6c <HAL_SPI_MspInit>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004398:	ea42 0103 	orr.w	r1, r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	0c1a      	lsrs	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f002 0204 	and.w	r2, r2, #4
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ca:	61da      	str	r2, [r3, #28]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	655a      	str	r2, [r3, #84]	; 0x54
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80043da:	2300      	movs	r3, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_UART_Init>:
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_UART_Init+0x12>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e03f      	b.n	8004476 <HAL_UART_Init+0x92>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_UART_Init+0x2c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7fc ff1c 	bl	8001248 <HAL_UART_MspInit>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2224      	movs	r2, #36	; 0x24
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004426:	60da      	str	r2, [r3, #12]
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fd9b 	bl	8004f64 <UART_SetConfig>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800443c:	611a      	str	r2, [r3, #16]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695a      	ldr	r2, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800444c:	615a      	str	r2, [r3, #20]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800445c:	60da      	str	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	641a      	str	r2, [r3, #64]	; 0x40
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004474:	2300      	movs	r3, #0
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_UART_Transmit>:
 800447e:	b580      	push	{r7, lr}
 8004480:	b08a      	sub	sp, #40	; 0x28
 8004482:	af02      	add	r7, sp, #8
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	603b      	str	r3, [r7, #0]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b20      	cmp	r3, #32
 800449c:	d17c      	bne.n	8004598 <HAL_UART_Transmit+0x11a>
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <HAL_UART_Transmit+0x2c>
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Transmit+0x30>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e075      	b.n	800459a <HAL_UART_Transmit+0x11c>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Transmit+0x3e>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e06e      	b.n	800459a <HAL_UART_Transmit+0x11c>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2221      	movs	r2, #33	; 0x21
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044d2:	f7fe fd65 	bl	8002fa0 <HAL_GetTick>
 80044d6:	6178      	str	r0, [r7, #20]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	88fa      	ldrh	r2, [r7, #6]
 80044dc:	849a      	strh	r2, [r3, #36]	; 0x24
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	88fa      	ldrh	r2, [r7, #6]
 80044e2:	84da      	strh	r2, [r3, #38]	; 0x26
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ec:	d108      	bne.n	8004500 <HAL_UART_Transmit+0x82>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d104      	bne.n	8004500 <HAL_UART_Transmit+0x82>
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	e003      	b.n	8004508 <HAL_UART_Transmit+0x8a>
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	2300      	movs	r3, #0
 8004506:	61bb      	str	r3, [r7, #24]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004510:	e02a      	b.n	8004568 <HAL_UART_Transmit+0xea>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2200      	movs	r2, #0
 800451a:	2180      	movs	r1, #128	; 0x80
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 fb0d 	bl	8004b3c <UART_WaitOnFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <HAL_UART_Transmit+0xae>
 8004528:	2303      	movs	r3, #3
 800452a:	e036      	b.n	800459a <HAL_UART_Transmit+0x11c>
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10b      	bne.n	800454a <HAL_UART_Transmit+0xcc>
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	3302      	adds	r3, #2
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	e007      	b.n	800455a <HAL_UART_Transmit+0xdc>
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	781a      	ldrb	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	605a      	str	r2, [r3, #4]
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	3301      	adds	r3, #1
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	84da      	strh	r2, [r3, #38]	; 0x26
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1cf      	bne.n	8004512 <HAL_UART_Transmit+0x94>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2200      	movs	r2, #0
 800457a:	2140      	movs	r1, #64	; 0x40
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fadd 	bl	8004b3c <UART_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_UART_Transmit+0x10e>
 8004588:	2303      	movs	r3, #3
 800458a:	e006      	b.n	800459a <HAL_UART_Transmit+0x11c>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004594:	2300      	movs	r3, #0
 8004596:	e000      	b.n	800459a <HAL_UART_Transmit+0x11c>
 8004598:	2302      	movs	r3, #2
 800459a:	4618      	mov	r0, r3
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_UARTEx_ReceiveToIdle_DMA>:
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b086      	sub	sp, #24
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	4613      	mov	r3, r2
 80045ae:	80fb      	strh	r3, [r7, #6]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d13c      	bne.n	8004636 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e035      	b.n	8004638 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e02e      	b.n	8004638 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
 80045e8:	88fb      	ldrh	r3, [r7, #6]
 80045ea:	461a      	mov	r2, r3
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 faee 	bl	8004bd0 <UART_Start_Receive_DMA>
 80045f4:	4603      	mov	r3, r0
 80045f6:	75fb      	strb	r3, [r7, #23]
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d119      	bne.n	8004632 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	2b01      	cmp	r3, #1
 8004604:	d113      	bne.n	800462e <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0210 	orr.w	r2, r2, #16
 800462a:	60da      	str	r2, [r3, #12]
 800462c:	e001      	b.n	8004632 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
 800462e:	2301      	movs	r3, #1
 8004630:	75fb      	strb	r3, [r7, #23]
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	e000      	b.n	8004638 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8004636:	2302      	movs	r3, #2
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_UART_IRQHandler>:
 8004640:	b580      	push	{r7, lr}
 8004642:	b08a      	sub	sp, #40	; 0x28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	623b      	str	r3, [r7, #32]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	61fb      	str	r3, [r7, #28]
 8004660:	2300      	movs	r3, #0
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10d      	bne.n	8004692 <HAL_UART_IRQHandler+0x52>
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_UART_IRQHandler+0x52>
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_UART_IRQHandler+0x52>
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fbc0 	bl	8004e10 <UART_Receive_IT>
 8004690:	e17b      	b.n	800498a <HAL_UART_IRQHandler+0x34a>
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80b1 	beq.w	80047fc <HAL_UART_IRQHandler+0x1bc>
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <HAL_UART_IRQHandler+0x70>
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80a6 	beq.w	80047fc <HAL_UART_IRQHandler+0x1bc>
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_UART_IRQHandler+0x90>
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_UART_IRQHandler+0x90>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	f043 0201 	orr.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_UART_IRQHandler+0xb0>
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_UART_IRQHandler+0xb0>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	f043 0202 	orr.w	r2, r3, #2
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <HAL_UART_IRQHandler+0xd0>
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_UART_IRQHandler+0xd0>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	f043 0204 	orr.w	r2, r3, #4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	641a      	str	r2, [r3, #64]	; 0x40
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00f      	beq.n	800473a <HAL_UART_IRQHandler+0xfa>
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d104      	bne.n	800472e <HAL_UART_IRQHandler+0xee>
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_UART_IRQHandler+0xfa>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	f043 0208 	orr.w	r2, r3, #8
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	641a      	str	r2, [r3, #64]	; 0x40
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 811e 	beq.w	8004980 <HAL_UART_IRQHandler+0x340>
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <HAL_UART_IRQHandler+0x11e>
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_UART_IRQHandler+0x11e>
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fb59 	bl	8004e10 <UART_Receive_IT>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	bf14      	ite	ne
 800476c:	2301      	movne	r3, #1
 800476e:	2300      	moveq	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <HAL_UART_IRQHandler+0x146>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d031      	beq.n	80047ea <HAL_UART_IRQHandler+0x1aa>
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa9b 	bl	8004cc2 <UART_EndRxTransfer>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d023      	beq.n	80047e2 <HAL_UART_IRQHandler+0x1a2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a8:	615a      	str	r2, [r3, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d013      	beq.n	80047da <HAL_UART_IRQHandler+0x19a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	4a76      	ldr	r2, [pc, #472]	; (8004990 <HAL_UART_IRQHandler+0x350>)
 80047b8:	635a      	str	r2, [r3, #52]	; 0x34
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe fe1e 	bl	8003400 <HAL_DMA_Abort_IT>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d016      	beq.n	80047f8 <HAL_UART_IRQHandler+0x1b8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047d4:	4610      	mov	r0, r2
 80047d6:	4798      	blx	r3
 80047d8:	e00e      	b.n	80047f8 <HAL_UART_IRQHandler+0x1b8>
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f8f5 	bl	80049ca <HAL_UART_ErrorCallback>
 80047e0:	e00a      	b.n	80047f8 <HAL_UART_IRQHandler+0x1b8>
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f8f1 	bl	80049ca <HAL_UART_ErrorCallback>
 80047e8:	e006      	b.n	80047f8 <HAL_UART_IRQHandler+0x1b8>
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f8ed 	bl	80049ca <HAL_UART_ErrorCallback>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40
 80047f6:	e0c3      	b.n	8004980 <HAL_UART_IRQHandler+0x340>
 80047f8:	bf00      	nop
 80047fa:	e0c1      	b.n	8004980 <HAL_UART_IRQHandler+0x340>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	2b01      	cmp	r3, #1
 8004802:	f040 80a1 	bne.w	8004948 <HAL_UART_IRQHandler+0x308>
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 809b 	beq.w	8004948 <HAL_UART_IRQHandler+0x308>
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8095 	beq.w	8004948 <HAL_UART_IRQHandler+0x308>
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d04e      	beq.n	80048e0 <HAL_UART_IRQHandler+0x2a0>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	823b      	strh	r3, [r7, #16]
 800484c:	8a3b      	ldrh	r3, [r7, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 8098 	beq.w	8004984 <HAL_UART_IRQHandler+0x344>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004858:	8a3a      	ldrh	r2, [r7, #16]
 800485a:	429a      	cmp	r2, r3
 800485c:	f080 8092 	bcs.w	8004984 <HAL_UART_IRQHandler+0x344>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8a3a      	ldrh	r2, [r7, #16]
 8004864:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	2b20      	cmp	r3, #32
 800486e:	d02b      	beq.n	80048c8 <HAL_UART_IRQHandler+0x288>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800487e:	60da      	str	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	615a      	str	r2, [r3, #20]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695a      	ldr	r2, [r3, #20]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489e:	615a      	str	r2, [r3, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0210 	bic.w	r2, r2, #16
 80048bc:	60da      	str	r2, [r3, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fe fd61 	bl	800338a <HAL_DMA_Abort>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	4619      	mov	r1, r3
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7fc fdb9 	bl	8001450 <HAL_UARTEx_RxEventCallback>
 80048de:	e051      	b.n	8004984 <HAL_UART_IRQHandler+0x344>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	827b      	strh	r3, [r7, #18]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d047      	beq.n	8004988 <HAL_UART_IRQHandler+0x348>
 80048f8:	8a7b      	ldrh	r3, [r7, #18]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d044      	beq.n	8004988 <HAL_UART_IRQHandler+0x348>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800490c:	60da      	str	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695a      	ldr	r2, [r3, #20]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0201 	bic.w	r2, r2, #1
 800491c:	615a      	str	r2, [r3, #20]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0210 	bic.w	r2, r2, #16
 800493a:	60da      	str	r2, [r3, #12]
 800493c:	8a7b      	ldrh	r3, [r7, #18]
 800493e:	4619      	mov	r1, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7fc fd85 	bl	8001450 <HAL_UARTEx_RxEventCallback>
 8004946:	e01f      	b.n	8004988 <HAL_UART_IRQHandler+0x348>
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <HAL_UART_IRQHandler+0x324>
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_UART_IRQHandler+0x324>
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f9f0 	bl	8004d42 <UART_Transmit_IT>
 8004962:	e012      	b.n	800498a <HAL_UART_IRQHandler+0x34a>
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00d      	beq.n	800498a <HAL_UART_IRQHandler+0x34a>
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_UART_IRQHandler+0x34a>
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fa31 	bl	8004de0 <UART_EndTransmit_IT>
 800497e:	e004      	b.n	800498a <HAL_UART_IRQHandler+0x34a>
 8004980:	bf00      	nop
 8004982:	e002      	b.n	800498a <HAL_UART_IRQHandler+0x34a>
 8004984:	bf00      	nop
 8004986:	e000      	b.n	800498a <HAL_UART_IRQHandler+0x34a>
 8004988:	bf00      	nop
 800498a:	3728      	adds	r7, #40	; 0x28
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	08004d1b 	.word	0x08004d1b

08004994 <HAL_UART_TxCpltCallback>:
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr

080049a6 <HAL_UART_RxCpltCallback>:
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <HAL_UART_RxHalfCpltCallback>:
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr

080049ca <HAL_UART_ErrorCallback>:
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <UART_DMAReceiveCplt>:
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d12a      	bne.n	8004a4e <UART_DMAReceiveCplt+0x72>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	85da      	strh	r2, [r3, #46]	; 0x2e
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a0c:	60da      	str	r2, [r3, #12]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695a      	ldr	r2, [r3, #20]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	615a      	str	r2, [r3, #20]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695a      	ldr	r2, [r3, #20]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a2c:	615a      	str	r2, [r3, #20]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d107      	bne.n	8004a4e <UART_DMAReceiveCplt+0x72>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0210 	bic.w	r2, r2, #16
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d106      	bne.n	8004a64 <UART_DMAReceiveCplt+0x88>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f7fc fcf7 	bl	8001450 <HAL_UARTEx_RxEventCallback>
 8004a62:	e002      	b.n	8004a6a <UART_DMAReceiveCplt+0x8e>
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff ff9e 	bl	80049a6 <HAL_UART_RxCpltCallback>
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <UART_DMARxHalfCplt>:
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b084      	sub	sp, #16
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d108      	bne.n	8004a9a <UART_DMARxHalfCplt+0x28>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a8c:	085b      	lsrs	r3, r3, #1
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	4619      	mov	r1, r3
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7fc fcdc 	bl	8001450 <HAL_UARTEx_RxEventCallback>
 8004a98:	e002      	b.n	8004aa0 <UART_DMARxHalfCplt+0x2e>
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f7ff ff8c 	bl	80049b8 <HAL_UART_RxHalfCpltCallback>
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <UART_DMAError>:
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf14      	ite	ne
 8004ac8:	2301      	movne	r3, #1
 8004aca:	2300      	moveq	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b21      	cmp	r3, #33	; 0x21
 8004ada:	d108      	bne.n	8004aee <UART_DMAError+0x46>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <UART_DMAError+0x46>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	84da      	strh	r2, [r3, #38]	; 0x26
 8004ae8:	68b8      	ldr	r0, [r7, #8]
 8004aea:	f000 f8d5 	bl	8004c98 <UART_EndTxTransfer>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b22      	cmp	r3, #34	; 0x22
 8004b0e:	d108      	bne.n	8004b22 <UART_DMAError+0x7a>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <UART_DMAError+0x7a>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004b1c:	68b8      	ldr	r0, [r7, #8]
 8004b1e:	f000 f8d0 	bl	8004cc2 <UART_EndRxTransfer>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f043 0210 	orr.w	r2, r3, #16
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40
 8004b2e:	68b8      	ldr	r0, [r7, #8]
 8004b30:	f7ff ff4b 	bl	80049ca <HAL_UART_ErrorCallback>
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <UART_WaitOnFlagUntilTimeout>:
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	71fb      	strb	r3, [r7, #7]
 8004b4c:	e02c      	b.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x6c>
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d028      	beq.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x6c>
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b5c:	f7fe fa20 	bl	8002fa0 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d21d      	bcs.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x6c>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b7a:	60da      	str	r2, [r3, #12]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	615a      	str	r2, [r3, #20]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e00f      	b.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x8c>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d0c3      	beq.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x12>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <UART_Start_Receive_DMA>:
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	80fb      	strh	r3, [r7, #6]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2222      	movs	r2, #34	; 0x22
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	4a23      	ldr	r2, [pc, #140]	; (8004c8c <UART_Start_Receive_DMA+0xbc>)
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	4a22      	ldr	r2, [pc, #136]	; (8004c90 <UART_Start_Receive_DMA+0xc0>)
 8004c06:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	4a21      	ldr	r2, [pc, #132]	; (8004c94 <UART_Start_Receive_DMA+0xc4>)
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	2200      	movs	r2, #0
 8004c16:	635a      	str	r2, [r3, #52]	; 0x34
 8004c18:	f107 0308 	add.w	r3, r7, #8
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3304      	adds	r3, #4
 8004c28:	4619      	mov	r1, r3
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	f7fe fb4c 	bl	80032cc <HAL_DMA_Start_IT>
 8004c34:	2300      	movs	r3, #0
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695a      	ldr	r2, [r3, #20]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0201 	orr.w	r2, r2, #1
 8004c70:	615a      	str	r2, [r3, #20]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695a      	ldr	r2, [r3, #20]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c80:	615a      	str	r2, [r3, #20]
 8004c82:	2300      	movs	r3, #0
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	080049dd 	.word	0x080049dd
 8004c90:	08004a73 	.word	0x08004a73
 8004c94:	08004aa9 	.word	0x08004aa9

08004c98 <UART_EndTxTransfer>:
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004cae:	60da      	str	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr

08004cc2 <UART_EndRxTransfer>:
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cd8:	60da      	str	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695a      	ldr	r2, [r3, #20]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	615a      	str	r2, [r3, #20]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d107      	bne.n	8004d02 <UART_EndRxTransfer+0x40>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0210 	bic.w	r2, r2, #16
 8004d00:	60da      	str	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <UART_DMAAbortOnError>:
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	84da      	strh	r2, [r3, #38]	; 0x26
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff fe48 	bl	80049ca <HAL_UART_ErrorCallback>
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <UART_Transmit_IT>:
 8004d42:	b480      	push	{r7}
 8004d44:	b085      	sub	sp, #20
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b21      	cmp	r3, #33	; 0x21
 8004d54:	d13e      	bne.n	8004dd4 <UART_Transmit_IT+0x92>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5e:	d114      	bne.n	8004d8a <UART_Transmit_IT+0x48>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d110      	bne.n	8004d8a <UART_Transmit_IT+0x48>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	1c9a      	adds	r2, r3, #2
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	621a      	str	r2, [r3, #32]
 8004d88:	e008      	b.n	8004d9c <UART_Transmit_IT+0x5a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	1c59      	adds	r1, r3, #1
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6211      	str	r1, [r2, #32]
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	605a      	str	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	4619      	mov	r1, r3
 8004daa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10f      	bne.n	8004dd0 <UART_Transmit_IT+0x8e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dbe:	60da      	str	r2, [r3, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dce:	60da      	str	r2, [r3, #12]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e000      	b.n	8004dd6 <UART_Transmit_IT+0x94>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr

08004de0 <UART_EndTransmit_IT>:
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df6:	60da      	str	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff fdc7 	bl	8004994 <HAL_UART_TxCpltCallback>
 8004e06:	2300      	movs	r3, #0
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <UART_Receive_IT>:
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b22      	cmp	r3, #34	; 0x22
 8004e22:	f040 8099 	bne.w	8004f58 <UART_Receive_IT+0x148>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2e:	d117      	bne.n	8004e60 <UART_Receive_IT+0x50>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d113      	bne.n	8004e60 <UART_Receive_IT+0x50>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	801a      	strh	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	1c9a      	adds	r2, r3, #2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	629a      	str	r2, [r3, #40]	; 0x28
 8004e5e:	e026      	b.n	8004eae <UART_Receive_IT+0x9e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e72:	d007      	beq.n	8004e84 <UART_Receive_IT+0x74>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10a      	bne.n	8004e92 <UART_Receive_IT+0x82>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <UART_Receive_IT+0x82>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	e008      	b.n	8004ea4 <UART_Receive_IT+0x94>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	701a      	strb	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	629a      	str	r2, [r3, #40]	; 0x28
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d148      	bne.n	8004f54 <UART_Receive_IT+0x144>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0220 	bic.w	r2, r2, #32
 8004ed0:	60da      	str	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ee0:	60da      	str	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695a      	ldr	r2, [r3, #20]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0201 	bic.w	r2, r2, #1
 8004ef0:	615a      	str	r2, [r3, #20]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d123      	bne.n	8004f4a <UART_Receive_IT+0x13a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0210 	bic.w	r2, r2, #16
 8004f16:	60da      	str	r2, [r3, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0310 	and.w	r3, r3, #16
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	d10a      	bne.n	8004f3c <UART_Receive_IT+0x12c>
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f40:	4619      	mov	r1, r3
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fc fa84 	bl	8001450 <HAL_UARTEx_RxEventCallback>
 8004f48:	e002      	b.n	8004f50 <UART_Receive_IT+0x140>
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff fd2b 	bl	80049a6 <HAL_UART_RxCpltCallback>
 8004f50:	2300      	movs	r3, #0
 8004f52:	e002      	b.n	8004f5a <UART_Receive_IT+0x14a>
 8004f54:	2300      	movs	r3, #0
 8004f56:	e000      	b.n	8004f5a <UART_Receive_IT+0x14a>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <UART_SetConfig>:
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	611a      	str	r2, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f9e:	f023 030c 	bic.w	r3, r3, #12
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	60d3      	str	r3, [r2, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	615a      	str	r2, [r3, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a2c      	ldr	r2, [pc, #176]	; (8005078 <UART_SetConfig+0x114>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d103      	bne.n	8004fd4 <UART_SetConfig+0x70>
 8004fcc:	f7ff f954 	bl	8004278 <HAL_RCC_GetPCLK2Freq>
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	e002      	b.n	8004fda <UART_SetConfig+0x76>
 8004fd4:	f7ff f93c 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009a      	lsls	r2, r3, #2
 8004fe4:	441a      	add	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff0:	4a22      	ldr	r2, [pc, #136]	; (800507c <UART_SetConfig+0x118>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	0119      	lsls	r1, r3, #4
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	009a      	lsls	r2, r3, #2
 8005004:	441a      	add	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005010:	4b1a      	ldr	r3, [pc, #104]	; (800507c <UART_SetConfig+0x118>)
 8005012:	fba3 0302 	umull	r0, r3, r3, r2
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	2064      	movs	r0, #100	; 0x64
 800501a:	fb00 f303 	mul.w	r3, r0, r3
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	3332      	adds	r3, #50	; 0x32
 8005024:	4a15      	ldr	r2, [pc, #84]	; (800507c <UART_SetConfig+0x118>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005030:	4419      	add	r1, r3
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	009a      	lsls	r2, r3, #2
 800503c:	441a      	add	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	fbb2 f2f3 	udiv	r2, r2, r3
 8005048:	4b0c      	ldr	r3, [pc, #48]	; (800507c <UART_SetConfig+0x118>)
 800504a:	fba3 0302 	umull	r0, r3, r3, r2
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	2064      	movs	r0, #100	; 0x64
 8005052:	fb00 f303 	mul.w	r3, r0, r3
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	3332      	adds	r3, #50	; 0x32
 800505c:	4a07      	ldr	r2, [pc, #28]	; (800507c <UART_SetConfig+0x118>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	f003 020f 	and.w	r2, r3, #15
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	440a      	add	r2, r1
 800506e:	609a      	str	r2, [r3, #8]
 8005070:	bf00      	nop
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40013800 	.word	0x40013800
 800507c:	51eb851f 	.word	0x51eb851f

08005080 <__errno>:
 8005080:	4b01      	ldr	r3, [pc, #4]	; (8005088 <__errno+0x8>)
 8005082:	6818      	ldr	r0, [r3, #0]
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	20000020 	.word	0x20000020

0800508c <__libc_init_array>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	2600      	movs	r6, #0
 8005090:	4d0c      	ldr	r5, [pc, #48]	; (80050c4 <__libc_init_array+0x38>)
 8005092:	4c0d      	ldr	r4, [pc, #52]	; (80050c8 <__libc_init_array+0x3c>)
 8005094:	1b64      	subs	r4, r4, r5
 8005096:	10a4      	asrs	r4, r4, #2
 8005098:	42a6      	cmp	r6, r4
 800509a:	d109      	bne.n	80050b0 <__libc_init_array+0x24>
 800509c:	f000 fc64 	bl	8005968 <_init>
 80050a0:	2600      	movs	r6, #0
 80050a2:	4d0a      	ldr	r5, [pc, #40]	; (80050cc <__libc_init_array+0x40>)
 80050a4:	4c0a      	ldr	r4, [pc, #40]	; (80050d0 <__libc_init_array+0x44>)
 80050a6:	1b64      	subs	r4, r4, r5
 80050a8:	10a4      	asrs	r4, r4, #2
 80050aa:	42a6      	cmp	r6, r4
 80050ac:	d105      	bne.n	80050ba <__libc_init_array+0x2e>
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b4:	4798      	blx	r3
 80050b6:	3601      	adds	r6, #1
 80050b8:	e7ee      	b.n	8005098 <__libc_init_array+0xc>
 80050ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80050be:	4798      	blx	r3
 80050c0:	3601      	adds	r6, #1
 80050c2:	e7f2      	b.n	80050aa <__libc_init_array+0x1e>
 80050c4:	08005e10 	.word	0x08005e10
 80050c8:	08005e10 	.word	0x08005e10
 80050cc:	08005e10 	.word	0x08005e10
 80050d0:	08005e14 	.word	0x08005e14

080050d4 <memcpy>:
 80050d4:	440a      	add	r2, r1
 80050d6:	4291      	cmp	r1, r2
 80050d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80050dc:	d100      	bne.n	80050e0 <memcpy+0xc>
 80050de:	4770      	bx	lr
 80050e0:	b510      	push	{r4, lr}
 80050e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050e6:	4291      	cmp	r1, r2
 80050e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050ec:	d1f9      	bne.n	80050e2 <memcpy+0xe>
 80050ee:	bd10      	pop	{r4, pc}

080050f0 <memset>:
 80050f0:	4603      	mov	r3, r0
 80050f2:	4402      	add	r2, r0
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d100      	bne.n	80050fa <memset+0xa>
 80050f8:	4770      	bx	lr
 80050fa:	f803 1b01 	strb.w	r1, [r3], #1
 80050fe:	e7f9      	b.n	80050f4 <memset+0x4>

08005100 <siprintf>:
 8005100:	b40e      	push	{r1, r2, r3}
 8005102:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005106:	b500      	push	{lr}
 8005108:	b09c      	sub	sp, #112	; 0x70
 800510a:	ab1d      	add	r3, sp, #116	; 0x74
 800510c:	9002      	str	r0, [sp, #8]
 800510e:	9006      	str	r0, [sp, #24]
 8005110:	9107      	str	r1, [sp, #28]
 8005112:	9104      	str	r1, [sp, #16]
 8005114:	4808      	ldr	r0, [pc, #32]	; (8005138 <siprintf+0x38>)
 8005116:	4909      	ldr	r1, [pc, #36]	; (800513c <siprintf+0x3c>)
 8005118:	f853 2b04 	ldr.w	r2, [r3], #4
 800511c:	9105      	str	r1, [sp, #20]
 800511e:	6800      	ldr	r0, [r0, #0]
 8005120:	a902      	add	r1, sp, #8
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	f000 f870 	bl	8005208 <_svfiprintf_r>
 8005128:	2200      	movs	r2, #0
 800512a:	9b02      	ldr	r3, [sp, #8]
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	b01c      	add	sp, #112	; 0x70
 8005130:	f85d eb04 	ldr.w	lr, [sp], #4
 8005134:	b003      	add	sp, #12
 8005136:	4770      	bx	lr
 8005138:	20000020 	.word	0x20000020
 800513c:	ffff0208 	.word	0xffff0208

08005140 <strcpy>:
 8005140:	4603      	mov	r3, r0
 8005142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005146:	f803 2b01 	strb.w	r2, [r3], #1
 800514a:	2a00      	cmp	r2, #0
 800514c:	d1f9      	bne.n	8005142 <strcpy+0x2>
 800514e:	4770      	bx	lr

08005150 <__ssputs_r>:
 8005150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005154:	688e      	ldr	r6, [r1, #8]
 8005156:	4682      	mov	sl, r0
 8005158:	429e      	cmp	r6, r3
 800515a:	460c      	mov	r4, r1
 800515c:	4690      	mov	r8, r2
 800515e:	461f      	mov	r7, r3
 8005160:	d838      	bhi.n	80051d4 <__ssputs_r+0x84>
 8005162:	898a      	ldrh	r2, [r1, #12]
 8005164:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005168:	d032      	beq.n	80051d0 <__ssputs_r+0x80>
 800516a:	6825      	ldr	r5, [r4, #0]
 800516c:	6909      	ldr	r1, [r1, #16]
 800516e:	3301      	adds	r3, #1
 8005170:	eba5 0901 	sub.w	r9, r5, r1
 8005174:	6965      	ldr	r5, [r4, #20]
 8005176:	444b      	add	r3, r9
 8005178:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800517c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005180:	106d      	asrs	r5, r5, #1
 8005182:	429d      	cmp	r5, r3
 8005184:	bf38      	it	cc
 8005186:	461d      	movcc	r5, r3
 8005188:	0553      	lsls	r3, r2, #21
 800518a:	d531      	bpl.n	80051f0 <__ssputs_r+0xa0>
 800518c:	4629      	mov	r1, r5
 800518e:	f000 fb45 	bl	800581c <_malloc_r>
 8005192:	4606      	mov	r6, r0
 8005194:	b950      	cbnz	r0, 80051ac <__ssputs_r+0x5c>
 8005196:	230c      	movs	r3, #12
 8005198:	f04f 30ff 	mov.w	r0, #4294967295
 800519c:	f8ca 3000 	str.w	r3, [sl]
 80051a0:	89a3      	ldrh	r3, [r4, #12]
 80051a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051a6:	81a3      	strh	r3, [r4, #12]
 80051a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ac:	464a      	mov	r2, r9
 80051ae:	6921      	ldr	r1, [r4, #16]
 80051b0:	f7ff ff90 	bl	80050d4 <memcpy>
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	6126      	str	r6, [r4, #16]
 80051c2:	444e      	add	r6, r9
 80051c4:	6026      	str	r6, [r4, #0]
 80051c6:	463e      	mov	r6, r7
 80051c8:	6165      	str	r5, [r4, #20]
 80051ca:	eba5 0509 	sub.w	r5, r5, r9
 80051ce:	60a5      	str	r5, [r4, #8]
 80051d0:	42be      	cmp	r6, r7
 80051d2:	d900      	bls.n	80051d6 <__ssputs_r+0x86>
 80051d4:	463e      	mov	r6, r7
 80051d6:	4632      	mov	r2, r6
 80051d8:	4641      	mov	r1, r8
 80051da:	6820      	ldr	r0, [r4, #0]
 80051dc:	f000 fab8 	bl	8005750 <memmove>
 80051e0:	68a3      	ldr	r3, [r4, #8]
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	1b9b      	subs	r3, r3, r6
 80051e6:	4432      	add	r2, r6
 80051e8:	2000      	movs	r0, #0
 80051ea:	60a3      	str	r3, [r4, #8]
 80051ec:	6022      	str	r2, [r4, #0]
 80051ee:	e7db      	b.n	80051a8 <__ssputs_r+0x58>
 80051f0:	462a      	mov	r2, r5
 80051f2:	f000 fb6d 	bl	80058d0 <_realloc_r>
 80051f6:	4606      	mov	r6, r0
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d1e1      	bne.n	80051c0 <__ssputs_r+0x70>
 80051fc:	4650      	mov	r0, sl
 80051fe:	6921      	ldr	r1, [r4, #16]
 8005200:	f000 fac0 	bl	8005784 <_free_r>
 8005204:	e7c7      	b.n	8005196 <__ssputs_r+0x46>
	...

08005208 <_svfiprintf_r>:
 8005208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520c:	4698      	mov	r8, r3
 800520e:	898b      	ldrh	r3, [r1, #12]
 8005210:	4607      	mov	r7, r0
 8005212:	061b      	lsls	r3, r3, #24
 8005214:	460d      	mov	r5, r1
 8005216:	4614      	mov	r4, r2
 8005218:	b09d      	sub	sp, #116	; 0x74
 800521a:	d50e      	bpl.n	800523a <_svfiprintf_r+0x32>
 800521c:	690b      	ldr	r3, [r1, #16]
 800521e:	b963      	cbnz	r3, 800523a <_svfiprintf_r+0x32>
 8005220:	2140      	movs	r1, #64	; 0x40
 8005222:	f000 fafb 	bl	800581c <_malloc_r>
 8005226:	6028      	str	r0, [r5, #0]
 8005228:	6128      	str	r0, [r5, #16]
 800522a:	b920      	cbnz	r0, 8005236 <_svfiprintf_r+0x2e>
 800522c:	230c      	movs	r3, #12
 800522e:	603b      	str	r3, [r7, #0]
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	e0d1      	b.n	80053da <_svfiprintf_r+0x1d2>
 8005236:	2340      	movs	r3, #64	; 0x40
 8005238:	616b      	str	r3, [r5, #20]
 800523a:	2300      	movs	r3, #0
 800523c:	9309      	str	r3, [sp, #36]	; 0x24
 800523e:	2320      	movs	r3, #32
 8005240:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005244:	2330      	movs	r3, #48	; 0x30
 8005246:	f04f 0901 	mov.w	r9, #1
 800524a:	f8cd 800c 	str.w	r8, [sp, #12]
 800524e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80053f4 <_svfiprintf_r+0x1ec>
 8005252:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005256:	4623      	mov	r3, r4
 8005258:	469a      	mov	sl, r3
 800525a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800525e:	b10a      	cbz	r2, 8005264 <_svfiprintf_r+0x5c>
 8005260:	2a25      	cmp	r2, #37	; 0x25
 8005262:	d1f9      	bne.n	8005258 <_svfiprintf_r+0x50>
 8005264:	ebba 0b04 	subs.w	fp, sl, r4
 8005268:	d00b      	beq.n	8005282 <_svfiprintf_r+0x7a>
 800526a:	465b      	mov	r3, fp
 800526c:	4622      	mov	r2, r4
 800526e:	4629      	mov	r1, r5
 8005270:	4638      	mov	r0, r7
 8005272:	f7ff ff6d 	bl	8005150 <__ssputs_r>
 8005276:	3001      	adds	r0, #1
 8005278:	f000 80aa 	beq.w	80053d0 <_svfiprintf_r+0x1c8>
 800527c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800527e:	445a      	add	r2, fp
 8005280:	9209      	str	r2, [sp, #36]	; 0x24
 8005282:	f89a 3000 	ldrb.w	r3, [sl]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 80a2 	beq.w	80053d0 <_svfiprintf_r+0x1c8>
 800528c:	2300      	movs	r3, #0
 800528e:	f04f 32ff 	mov.w	r2, #4294967295
 8005292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005296:	f10a 0a01 	add.w	sl, sl, #1
 800529a:	9304      	str	r3, [sp, #16]
 800529c:	9307      	str	r3, [sp, #28]
 800529e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052a2:	931a      	str	r3, [sp, #104]	; 0x68
 80052a4:	4654      	mov	r4, sl
 80052a6:	2205      	movs	r2, #5
 80052a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ac:	4851      	ldr	r0, [pc, #324]	; (80053f4 <_svfiprintf_r+0x1ec>)
 80052ae:	f000 fa41 	bl	8005734 <memchr>
 80052b2:	9a04      	ldr	r2, [sp, #16]
 80052b4:	b9d8      	cbnz	r0, 80052ee <_svfiprintf_r+0xe6>
 80052b6:	06d0      	lsls	r0, r2, #27
 80052b8:	bf44      	itt	mi
 80052ba:	2320      	movmi	r3, #32
 80052bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052c0:	0711      	lsls	r1, r2, #28
 80052c2:	bf44      	itt	mi
 80052c4:	232b      	movmi	r3, #43	; 0x2b
 80052c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ca:	f89a 3000 	ldrb.w	r3, [sl]
 80052ce:	2b2a      	cmp	r3, #42	; 0x2a
 80052d0:	d015      	beq.n	80052fe <_svfiprintf_r+0xf6>
 80052d2:	4654      	mov	r4, sl
 80052d4:	2000      	movs	r0, #0
 80052d6:	f04f 0c0a 	mov.w	ip, #10
 80052da:	9a07      	ldr	r2, [sp, #28]
 80052dc:	4621      	mov	r1, r4
 80052de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052e2:	3b30      	subs	r3, #48	; 0x30
 80052e4:	2b09      	cmp	r3, #9
 80052e6:	d94e      	bls.n	8005386 <_svfiprintf_r+0x17e>
 80052e8:	b1b0      	cbz	r0, 8005318 <_svfiprintf_r+0x110>
 80052ea:	9207      	str	r2, [sp, #28]
 80052ec:	e014      	b.n	8005318 <_svfiprintf_r+0x110>
 80052ee:	eba0 0308 	sub.w	r3, r0, r8
 80052f2:	fa09 f303 	lsl.w	r3, r9, r3
 80052f6:	4313      	orrs	r3, r2
 80052f8:	46a2      	mov	sl, r4
 80052fa:	9304      	str	r3, [sp, #16]
 80052fc:	e7d2      	b.n	80052a4 <_svfiprintf_r+0x9c>
 80052fe:	9b03      	ldr	r3, [sp, #12]
 8005300:	1d19      	adds	r1, r3, #4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	9103      	str	r1, [sp, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	bfbb      	ittet	lt
 800530a:	425b      	neglt	r3, r3
 800530c:	f042 0202 	orrlt.w	r2, r2, #2
 8005310:	9307      	strge	r3, [sp, #28]
 8005312:	9307      	strlt	r3, [sp, #28]
 8005314:	bfb8      	it	lt
 8005316:	9204      	strlt	r2, [sp, #16]
 8005318:	7823      	ldrb	r3, [r4, #0]
 800531a:	2b2e      	cmp	r3, #46	; 0x2e
 800531c:	d10c      	bne.n	8005338 <_svfiprintf_r+0x130>
 800531e:	7863      	ldrb	r3, [r4, #1]
 8005320:	2b2a      	cmp	r3, #42	; 0x2a
 8005322:	d135      	bne.n	8005390 <_svfiprintf_r+0x188>
 8005324:	9b03      	ldr	r3, [sp, #12]
 8005326:	3402      	adds	r4, #2
 8005328:	1d1a      	adds	r2, r3, #4
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	9203      	str	r2, [sp, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	bfb8      	it	lt
 8005332:	f04f 33ff 	movlt.w	r3, #4294967295
 8005336:	9305      	str	r3, [sp, #20]
 8005338:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005404 <_svfiprintf_r+0x1fc>
 800533c:	2203      	movs	r2, #3
 800533e:	4650      	mov	r0, sl
 8005340:	7821      	ldrb	r1, [r4, #0]
 8005342:	f000 f9f7 	bl	8005734 <memchr>
 8005346:	b140      	cbz	r0, 800535a <_svfiprintf_r+0x152>
 8005348:	2340      	movs	r3, #64	; 0x40
 800534a:	eba0 000a 	sub.w	r0, r0, sl
 800534e:	fa03 f000 	lsl.w	r0, r3, r0
 8005352:	9b04      	ldr	r3, [sp, #16]
 8005354:	3401      	adds	r4, #1
 8005356:	4303      	orrs	r3, r0
 8005358:	9304      	str	r3, [sp, #16]
 800535a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800535e:	2206      	movs	r2, #6
 8005360:	4825      	ldr	r0, [pc, #148]	; (80053f8 <_svfiprintf_r+0x1f0>)
 8005362:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005366:	f000 f9e5 	bl	8005734 <memchr>
 800536a:	2800      	cmp	r0, #0
 800536c:	d038      	beq.n	80053e0 <_svfiprintf_r+0x1d8>
 800536e:	4b23      	ldr	r3, [pc, #140]	; (80053fc <_svfiprintf_r+0x1f4>)
 8005370:	bb1b      	cbnz	r3, 80053ba <_svfiprintf_r+0x1b2>
 8005372:	9b03      	ldr	r3, [sp, #12]
 8005374:	3307      	adds	r3, #7
 8005376:	f023 0307 	bic.w	r3, r3, #7
 800537a:	3308      	adds	r3, #8
 800537c:	9303      	str	r3, [sp, #12]
 800537e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005380:	4433      	add	r3, r6
 8005382:	9309      	str	r3, [sp, #36]	; 0x24
 8005384:	e767      	b.n	8005256 <_svfiprintf_r+0x4e>
 8005386:	460c      	mov	r4, r1
 8005388:	2001      	movs	r0, #1
 800538a:	fb0c 3202 	mla	r2, ip, r2, r3
 800538e:	e7a5      	b.n	80052dc <_svfiprintf_r+0xd4>
 8005390:	2300      	movs	r3, #0
 8005392:	f04f 0c0a 	mov.w	ip, #10
 8005396:	4619      	mov	r1, r3
 8005398:	3401      	adds	r4, #1
 800539a:	9305      	str	r3, [sp, #20]
 800539c:	4620      	mov	r0, r4
 800539e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053a2:	3a30      	subs	r2, #48	; 0x30
 80053a4:	2a09      	cmp	r2, #9
 80053a6:	d903      	bls.n	80053b0 <_svfiprintf_r+0x1a8>
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0c5      	beq.n	8005338 <_svfiprintf_r+0x130>
 80053ac:	9105      	str	r1, [sp, #20]
 80053ae:	e7c3      	b.n	8005338 <_svfiprintf_r+0x130>
 80053b0:	4604      	mov	r4, r0
 80053b2:	2301      	movs	r3, #1
 80053b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80053b8:	e7f0      	b.n	800539c <_svfiprintf_r+0x194>
 80053ba:	ab03      	add	r3, sp, #12
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	462a      	mov	r2, r5
 80053c0:	4638      	mov	r0, r7
 80053c2:	4b0f      	ldr	r3, [pc, #60]	; (8005400 <_svfiprintf_r+0x1f8>)
 80053c4:	a904      	add	r1, sp, #16
 80053c6:	f3af 8000 	nop.w
 80053ca:	1c42      	adds	r2, r0, #1
 80053cc:	4606      	mov	r6, r0
 80053ce:	d1d6      	bne.n	800537e <_svfiprintf_r+0x176>
 80053d0:	89ab      	ldrh	r3, [r5, #12]
 80053d2:	065b      	lsls	r3, r3, #25
 80053d4:	f53f af2c 	bmi.w	8005230 <_svfiprintf_r+0x28>
 80053d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053da:	b01d      	add	sp, #116	; 0x74
 80053dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e0:	ab03      	add	r3, sp, #12
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	462a      	mov	r2, r5
 80053e6:	4638      	mov	r0, r7
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <_svfiprintf_r+0x1f8>)
 80053ea:	a904      	add	r1, sp, #16
 80053ec:	f000 f87c 	bl	80054e8 <_printf_i>
 80053f0:	e7eb      	b.n	80053ca <_svfiprintf_r+0x1c2>
 80053f2:	bf00      	nop
 80053f4:	08005ddc 	.word	0x08005ddc
 80053f8:	08005de6 	.word	0x08005de6
 80053fc:	00000000 	.word	0x00000000
 8005400:	08005151 	.word	0x08005151
 8005404:	08005de2 	.word	0x08005de2

08005408 <_printf_common>:
 8005408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800540c:	4616      	mov	r6, r2
 800540e:	4699      	mov	r9, r3
 8005410:	688a      	ldr	r2, [r1, #8]
 8005412:	690b      	ldr	r3, [r1, #16]
 8005414:	4607      	mov	r7, r0
 8005416:	4293      	cmp	r3, r2
 8005418:	bfb8      	it	lt
 800541a:	4613      	movlt	r3, r2
 800541c:	6033      	str	r3, [r6, #0]
 800541e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005422:	460c      	mov	r4, r1
 8005424:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005428:	b10a      	cbz	r2, 800542e <_printf_common+0x26>
 800542a:	3301      	adds	r3, #1
 800542c:	6033      	str	r3, [r6, #0]
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	0699      	lsls	r1, r3, #26
 8005432:	bf42      	ittt	mi
 8005434:	6833      	ldrmi	r3, [r6, #0]
 8005436:	3302      	addmi	r3, #2
 8005438:	6033      	strmi	r3, [r6, #0]
 800543a:	6825      	ldr	r5, [r4, #0]
 800543c:	f015 0506 	ands.w	r5, r5, #6
 8005440:	d106      	bne.n	8005450 <_printf_common+0x48>
 8005442:	f104 0a19 	add.w	sl, r4, #25
 8005446:	68e3      	ldr	r3, [r4, #12]
 8005448:	6832      	ldr	r2, [r6, #0]
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	42ab      	cmp	r3, r5
 800544e:	dc28      	bgt.n	80054a2 <_printf_common+0x9a>
 8005450:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005454:	1e13      	subs	r3, r2, #0
 8005456:	6822      	ldr	r2, [r4, #0]
 8005458:	bf18      	it	ne
 800545a:	2301      	movne	r3, #1
 800545c:	0692      	lsls	r2, r2, #26
 800545e:	d42d      	bmi.n	80054bc <_printf_common+0xb4>
 8005460:	4649      	mov	r1, r9
 8005462:	4638      	mov	r0, r7
 8005464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005468:	47c0      	blx	r8
 800546a:	3001      	adds	r0, #1
 800546c:	d020      	beq.n	80054b0 <_printf_common+0xa8>
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	68e5      	ldr	r5, [r4, #12]
 8005472:	f003 0306 	and.w	r3, r3, #6
 8005476:	2b04      	cmp	r3, #4
 8005478:	bf18      	it	ne
 800547a:	2500      	movne	r5, #0
 800547c:	6832      	ldr	r2, [r6, #0]
 800547e:	f04f 0600 	mov.w	r6, #0
 8005482:	68a3      	ldr	r3, [r4, #8]
 8005484:	bf08      	it	eq
 8005486:	1aad      	subeq	r5, r5, r2
 8005488:	6922      	ldr	r2, [r4, #16]
 800548a:	bf08      	it	eq
 800548c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005490:	4293      	cmp	r3, r2
 8005492:	bfc4      	itt	gt
 8005494:	1a9b      	subgt	r3, r3, r2
 8005496:	18ed      	addgt	r5, r5, r3
 8005498:	341a      	adds	r4, #26
 800549a:	42b5      	cmp	r5, r6
 800549c:	d11a      	bne.n	80054d4 <_printf_common+0xcc>
 800549e:	2000      	movs	r0, #0
 80054a0:	e008      	b.n	80054b4 <_printf_common+0xac>
 80054a2:	2301      	movs	r3, #1
 80054a4:	4652      	mov	r2, sl
 80054a6:	4649      	mov	r1, r9
 80054a8:	4638      	mov	r0, r7
 80054aa:	47c0      	blx	r8
 80054ac:	3001      	adds	r0, #1
 80054ae:	d103      	bne.n	80054b8 <_printf_common+0xb0>
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
 80054b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b8:	3501      	adds	r5, #1
 80054ba:	e7c4      	b.n	8005446 <_printf_common+0x3e>
 80054bc:	2030      	movs	r0, #48	; 0x30
 80054be:	18e1      	adds	r1, r4, r3
 80054c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054ca:	4422      	add	r2, r4
 80054cc:	3302      	adds	r3, #2
 80054ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054d2:	e7c5      	b.n	8005460 <_printf_common+0x58>
 80054d4:	2301      	movs	r3, #1
 80054d6:	4622      	mov	r2, r4
 80054d8:	4649      	mov	r1, r9
 80054da:	4638      	mov	r0, r7
 80054dc:	47c0      	blx	r8
 80054de:	3001      	adds	r0, #1
 80054e0:	d0e6      	beq.n	80054b0 <_printf_common+0xa8>
 80054e2:	3601      	adds	r6, #1
 80054e4:	e7d9      	b.n	800549a <_printf_common+0x92>
	...

080054e8 <_printf_i>:
 80054e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054ec:	460c      	mov	r4, r1
 80054ee:	7e27      	ldrb	r7, [r4, #24]
 80054f0:	4691      	mov	r9, r2
 80054f2:	2f78      	cmp	r7, #120	; 0x78
 80054f4:	4680      	mov	r8, r0
 80054f6:	469a      	mov	sl, r3
 80054f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80054fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054fe:	d807      	bhi.n	8005510 <_printf_i+0x28>
 8005500:	2f62      	cmp	r7, #98	; 0x62
 8005502:	d80a      	bhi.n	800551a <_printf_i+0x32>
 8005504:	2f00      	cmp	r7, #0
 8005506:	f000 80d9 	beq.w	80056bc <_printf_i+0x1d4>
 800550a:	2f58      	cmp	r7, #88	; 0x58
 800550c:	f000 80a4 	beq.w	8005658 <_printf_i+0x170>
 8005510:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005518:	e03a      	b.n	8005590 <_printf_i+0xa8>
 800551a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800551e:	2b15      	cmp	r3, #21
 8005520:	d8f6      	bhi.n	8005510 <_printf_i+0x28>
 8005522:	a001      	add	r0, pc, #4	; (adr r0, 8005528 <_printf_i+0x40>)
 8005524:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005528:	08005581 	.word	0x08005581
 800552c:	08005595 	.word	0x08005595
 8005530:	08005511 	.word	0x08005511
 8005534:	08005511 	.word	0x08005511
 8005538:	08005511 	.word	0x08005511
 800553c:	08005511 	.word	0x08005511
 8005540:	08005595 	.word	0x08005595
 8005544:	08005511 	.word	0x08005511
 8005548:	08005511 	.word	0x08005511
 800554c:	08005511 	.word	0x08005511
 8005550:	08005511 	.word	0x08005511
 8005554:	080056a3 	.word	0x080056a3
 8005558:	080055c5 	.word	0x080055c5
 800555c:	08005685 	.word	0x08005685
 8005560:	08005511 	.word	0x08005511
 8005564:	08005511 	.word	0x08005511
 8005568:	080056c5 	.word	0x080056c5
 800556c:	08005511 	.word	0x08005511
 8005570:	080055c5 	.word	0x080055c5
 8005574:	08005511 	.word	0x08005511
 8005578:	08005511 	.word	0x08005511
 800557c:	0800568d 	.word	0x0800568d
 8005580:	680b      	ldr	r3, [r1, #0]
 8005582:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005586:	1d1a      	adds	r2, r3, #4
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	600a      	str	r2, [r1, #0]
 800558c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005590:	2301      	movs	r3, #1
 8005592:	e0a4      	b.n	80056de <_printf_i+0x1f6>
 8005594:	6825      	ldr	r5, [r4, #0]
 8005596:	6808      	ldr	r0, [r1, #0]
 8005598:	062e      	lsls	r6, r5, #24
 800559a:	f100 0304 	add.w	r3, r0, #4
 800559e:	d50a      	bpl.n	80055b6 <_printf_i+0xce>
 80055a0:	6805      	ldr	r5, [r0, #0]
 80055a2:	600b      	str	r3, [r1, #0]
 80055a4:	2d00      	cmp	r5, #0
 80055a6:	da03      	bge.n	80055b0 <_printf_i+0xc8>
 80055a8:	232d      	movs	r3, #45	; 0x2d
 80055aa:	426d      	negs	r5, r5
 80055ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055b0:	230a      	movs	r3, #10
 80055b2:	485e      	ldr	r0, [pc, #376]	; (800572c <_printf_i+0x244>)
 80055b4:	e019      	b.n	80055ea <_printf_i+0x102>
 80055b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80055ba:	6805      	ldr	r5, [r0, #0]
 80055bc:	600b      	str	r3, [r1, #0]
 80055be:	bf18      	it	ne
 80055c0:	b22d      	sxthne	r5, r5
 80055c2:	e7ef      	b.n	80055a4 <_printf_i+0xbc>
 80055c4:	680b      	ldr	r3, [r1, #0]
 80055c6:	6825      	ldr	r5, [r4, #0]
 80055c8:	1d18      	adds	r0, r3, #4
 80055ca:	6008      	str	r0, [r1, #0]
 80055cc:	0628      	lsls	r0, r5, #24
 80055ce:	d501      	bpl.n	80055d4 <_printf_i+0xec>
 80055d0:	681d      	ldr	r5, [r3, #0]
 80055d2:	e002      	b.n	80055da <_printf_i+0xf2>
 80055d4:	0669      	lsls	r1, r5, #25
 80055d6:	d5fb      	bpl.n	80055d0 <_printf_i+0xe8>
 80055d8:	881d      	ldrh	r5, [r3, #0]
 80055da:	2f6f      	cmp	r7, #111	; 0x6f
 80055dc:	bf0c      	ite	eq
 80055de:	2308      	moveq	r3, #8
 80055e0:	230a      	movne	r3, #10
 80055e2:	4852      	ldr	r0, [pc, #328]	; (800572c <_printf_i+0x244>)
 80055e4:	2100      	movs	r1, #0
 80055e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055ea:	6866      	ldr	r6, [r4, #4]
 80055ec:	2e00      	cmp	r6, #0
 80055ee:	bfa8      	it	ge
 80055f0:	6821      	ldrge	r1, [r4, #0]
 80055f2:	60a6      	str	r6, [r4, #8]
 80055f4:	bfa4      	itt	ge
 80055f6:	f021 0104 	bicge.w	r1, r1, #4
 80055fa:	6021      	strge	r1, [r4, #0]
 80055fc:	b90d      	cbnz	r5, 8005602 <_printf_i+0x11a>
 80055fe:	2e00      	cmp	r6, #0
 8005600:	d04d      	beq.n	800569e <_printf_i+0x1b6>
 8005602:	4616      	mov	r6, r2
 8005604:	fbb5 f1f3 	udiv	r1, r5, r3
 8005608:	fb03 5711 	mls	r7, r3, r1, r5
 800560c:	5dc7      	ldrb	r7, [r0, r7]
 800560e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005612:	462f      	mov	r7, r5
 8005614:	42bb      	cmp	r3, r7
 8005616:	460d      	mov	r5, r1
 8005618:	d9f4      	bls.n	8005604 <_printf_i+0x11c>
 800561a:	2b08      	cmp	r3, #8
 800561c:	d10b      	bne.n	8005636 <_printf_i+0x14e>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	07df      	lsls	r7, r3, #31
 8005622:	d508      	bpl.n	8005636 <_printf_i+0x14e>
 8005624:	6923      	ldr	r3, [r4, #16]
 8005626:	6861      	ldr	r1, [r4, #4]
 8005628:	4299      	cmp	r1, r3
 800562a:	bfde      	ittt	le
 800562c:	2330      	movle	r3, #48	; 0x30
 800562e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005632:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005636:	1b92      	subs	r2, r2, r6
 8005638:	6122      	str	r2, [r4, #16]
 800563a:	464b      	mov	r3, r9
 800563c:	4621      	mov	r1, r4
 800563e:	4640      	mov	r0, r8
 8005640:	f8cd a000 	str.w	sl, [sp]
 8005644:	aa03      	add	r2, sp, #12
 8005646:	f7ff fedf 	bl	8005408 <_printf_common>
 800564a:	3001      	adds	r0, #1
 800564c:	d14c      	bne.n	80056e8 <_printf_i+0x200>
 800564e:	f04f 30ff 	mov.w	r0, #4294967295
 8005652:	b004      	add	sp, #16
 8005654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005658:	4834      	ldr	r0, [pc, #208]	; (800572c <_printf_i+0x244>)
 800565a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800565e:	680e      	ldr	r6, [r1, #0]
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	f856 5b04 	ldr.w	r5, [r6], #4
 8005666:	061f      	lsls	r7, r3, #24
 8005668:	600e      	str	r6, [r1, #0]
 800566a:	d514      	bpl.n	8005696 <_printf_i+0x1ae>
 800566c:	07d9      	lsls	r1, r3, #31
 800566e:	bf44      	itt	mi
 8005670:	f043 0320 	orrmi.w	r3, r3, #32
 8005674:	6023      	strmi	r3, [r4, #0]
 8005676:	b91d      	cbnz	r5, 8005680 <_printf_i+0x198>
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	f023 0320 	bic.w	r3, r3, #32
 800567e:	6023      	str	r3, [r4, #0]
 8005680:	2310      	movs	r3, #16
 8005682:	e7af      	b.n	80055e4 <_printf_i+0xfc>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	f043 0320 	orr.w	r3, r3, #32
 800568a:	6023      	str	r3, [r4, #0]
 800568c:	2378      	movs	r3, #120	; 0x78
 800568e:	4828      	ldr	r0, [pc, #160]	; (8005730 <_printf_i+0x248>)
 8005690:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005694:	e7e3      	b.n	800565e <_printf_i+0x176>
 8005696:	065e      	lsls	r6, r3, #25
 8005698:	bf48      	it	mi
 800569a:	b2ad      	uxthmi	r5, r5
 800569c:	e7e6      	b.n	800566c <_printf_i+0x184>
 800569e:	4616      	mov	r6, r2
 80056a0:	e7bb      	b.n	800561a <_printf_i+0x132>
 80056a2:	680b      	ldr	r3, [r1, #0]
 80056a4:	6826      	ldr	r6, [r4, #0]
 80056a6:	1d1d      	adds	r5, r3, #4
 80056a8:	6960      	ldr	r0, [r4, #20]
 80056aa:	600d      	str	r5, [r1, #0]
 80056ac:	0635      	lsls	r5, r6, #24
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	d501      	bpl.n	80056b6 <_printf_i+0x1ce>
 80056b2:	6018      	str	r0, [r3, #0]
 80056b4:	e002      	b.n	80056bc <_printf_i+0x1d4>
 80056b6:	0671      	lsls	r1, r6, #25
 80056b8:	d5fb      	bpl.n	80056b2 <_printf_i+0x1ca>
 80056ba:	8018      	strh	r0, [r3, #0]
 80056bc:	2300      	movs	r3, #0
 80056be:	4616      	mov	r6, r2
 80056c0:	6123      	str	r3, [r4, #16]
 80056c2:	e7ba      	b.n	800563a <_printf_i+0x152>
 80056c4:	680b      	ldr	r3, [r1, #0]
 80056c6:	1d1a      	adds	r2, r3, #4
 80056c8:	600a      	str	r2, [r1, #0]
 80056ca:	681e      	ldr	r6, [r3, #0]
 80056cc:	2100      	movs	r1, #0
 80056ce:	4630      	mov	r0, r6
 80056d0:	6862      	ldr	r2, [r4, #4]
 80056d2:	f000 f82f 	bl	8005734 <memchr>
 80056d6:	b108      	cbz	r0, 80056dc <_printf_i+0x1f4>
 80056d8:	1b80      	subs	r0, r0, r6
 80056da:	6060      	str	r0, [r4, #4]
 80056dc:	6863      	ldr	r3, [r4, #4]
 80056de:	6123      	str	r3, [r4, #16]
 80056e0:	2300      	movs	r3, #0
 80056e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e6:	e7a8      	b.n	800563a <_printf_i+0x152>
 80056e8:	4632      	mov	r2, r6
 80056ea:	4649      	mov	r1, r9
 80056ec:	4640      	mov	r0, r8
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	47d0      	blx	sl
 80056f2:	3001      	adds	r0, #1
 80056f4:	d0ab      	beq.n	800564e <_printf_i+0x166>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	079b      	lsls	r3, r3, #30
 80056fa:	d413      	bmi.n	8005724 <_printf_i+0x23c>
 80056fc:	68e0      	ldr	r0, [r4, #12]
 80056fe:	9b03      	ldr	r3, [sp, #12]
 8005700:	4298      	cmp	r0, r3
 8005702:	bfb8      	it	lt
 8005704:	4618      	movlt	r0, r3
 8005706:	e7a4      	b.n	8005652 <_printf_i+0x16a>
 8005708:	2301      	movs	r3, #1
 800570a:	4632      	mov	r2, r6
 800570c:	4649      	mov	r1, r9
 800570e:	4640      	mov	r0, r8
 8005710:	47d0      	blx	sl
 8005712:	3001      	adds	r0, #1
 8005714:	d09b      	beq.n	800564e <_printf_i+0x166>
 8005716:	3501      	adds	r5, #1
 8005718:	68e3      	ldr	r3, [r4, #12]
 800571a:	9903      	ldr	r1, [sp, #12]
 800571c:	1a5b      	subs	r3, r3, r1
 800571e:	42ab      	cmp	r3, r5
 8005720:	dcf2      	bgt.n	8005708 <_printf_i+0x220>
 8005722:	e7eb      	b.n	80056fc <_printf_i+0x214>
 8005724:	2500      	movs	r5, #0
 8005726:	f104 0619 	add.w	r6, r4, #25
 800572a:	e7f5      	b.n	8005718 <_printf_i+0x230>
 800572c:	08005ded 	.word	0x08005ded
 8005730:	08005dfe 	.word	0x08005dfe

08005734 <memchr>:
 8005734:	4603      	mov	r3, r0
 8005736:	b510      	push	{r4, lr}
 8005738:	b2c9      	uxtb	r1, r1
 800573a:	4402      	add	r2, r0
 800573c:	4293      	cmp	r3, r2
 800573e:	4618      	mov	r0, r3
 8005740:	d101      	bne.n	8005746 <memchr+0x12>
 8005742:	2000      	movs	r0, #0
 8005744:	e003      	b.n	800574e <memchr+0x1a>
 8005746:	7804      	ldrb	r4, [r0, #0]
 8005748:	3301      	adds	r3, #1
 800574a:	428c      	cmp	r4, r1
 800574c:	d1f6      	bne.n	800573c <memchr+0x8>
 800574e:	bd10      	pop	{r4, pc}

08005750 <memmove>:
 8005750:	4288      	cmp	r0, r1
 8005752:	b510      	push	{r4, lr}
 8005754:	eb01 0402 	add.w	r4, r1, r2
 8005758:	d902      	bls.n	8005760 <memmove+0x10>
 800575a:	4284      	cmp	r4, r0
 800575c:	4623      	mov	r3, r4
 800575e:	d807      	bhi.n	8005770 <memmove+0x20>
 8005760:	1e43      	subs	r3, r0, #1
 8005762:	42a1      	cmp	r1, r4
 8005764:	d008      	beq.n	8005778 <memmove+0x28>
 8005766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800576a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800576e:	e7f8      	b.n	8005762 <memmove+0x12>
 8005770:	4601      	mov	r1, r0
 8005772:	4402      	add	r2, r0
 8005774:	428a      	cmp	r2, r1
 8005776:	d100      	bne.n	800577a <memmove+0x2a>
 8005778:	bd10      	pop	{r4, pc}
 800577a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800577e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005782:	e7f7      	b.n	8005774 <memmove+0x24>

08005784 <_free_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	4605      	mov	r5, r0
 8005788:	2900      	cmp	r1, #0
 800578a:	d043      	beq.n	8005814 <_free_r+0x90>
 800578c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005790:	1f0c      	subs	r4, r1, #4
 8005792:	2b00      	cmp	r3, #0
 8005794:	bfb8      	it	lt
 8005796:	18e4      	addlt	r4, r4, r3
 8005798:	f000 f8d0 	bl	800593c <__malloc_lock>
 800579c:	4a1e      	ldr	r2, [pc, #120]	; (8005818 <_free_r+0x94>)
 800579e:	6813      	ldr	r3, [r2, #0]
 80057a0:	4610      	mov	r0, r2
 80057a2:	b933      	cbnz	r3, 80057b2 <_free_r+0x2e>
 80057a4:	6063      	str	r3, [r4, #4]
 80057a6:	6014      	str	r4, [r2, #0]
 80057a8:	4628      	mov	r0, r5
 80057aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057ae:	f000 b8cb 	b.w	8005948 <__malloc_unlock>
 80057b2:	42a3      	cmp	r3, r4
 80057b4:	d90a      	bls.n	80057cc <_free_r+0x48>
 80057b6:	6821      	ldr	r1, [r4, #0]
 80057b8:	1862      	adds	r2, r4, r1
 80057ba:	4293      	cmp	r3, r2
 80057bc:	bf01      	itttt	eq
 80057be:	681a      	ldreq	r2, [r3, #0]
 80057c0:	685b      	ldreq	r3, [r3, #4]
 80057c2:	1852      	addeq	r2, r2, r1
 80057c4:	6022      	streq	r2, [r4, #0]
 80057c6:	6063      	str	r3, [r4, #4]
 80057c8:	6004      	str	r4, [r0, #0]
 80057ca:	e7ed      	b.n	80057a8 <_free_r+0x24>
 80057cc:	461a      	mov	r2, r3
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	b10b      	cbz	r3, 80057d6 <_free_r+0x52>
 80057d2:	42a3      	cmp	r3, r4
 80057d4:	d9fa      	bls.n	80057cc <_free_r+0x48>
 80057d6:	6811      	ldr	r1, [r2, #0]
 80057d8:	1850      	adds	r0, r2, r1
 80057da:	42a0      	cmp	r0, r4
 80057dc:	d10b      	bne.n	80057f6 <_free_r+0x72>
 80057de:	6820      	ldr	r0, [r4, #0]
 80057e0:	4401      	add	r1, r0
 80057e2:	1850      	adds	r0, r2, r1
 80057e4:	4283      	cmp	r3, r0
 80057e6:	6011      	str	r1, [r2, #0]
 80057e8:	d1de      	bne.n	80057a8 <_free_r+0x24>
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4401      	add	r1, r0
 80057f0:	6011      	str	r1, [r2, #0]
 80057f2:	6053      	str	r3, [r2, #4]
 80057f4:	e7d8      	b.n	80057a8 <_free_r+0x24>
 80057f6:	d902      	bls.n	80057fe <_free_r+0x7a>
 80057f8:	230c      	movs	r3, #12
 80057fa:	602b      	str	r3, [r5, #0]
 80057fc:	e7d4      	b.n	80057a8 <_free_r+0x24>
 80057fe:	6820      	ldr	r0, [r4, #0]
 8005800:	1821      	adds	r1, r4, r0
 8005802:	428b      	cmp	r3, r1
 8005804:	bf01      	itttt	eq
 8005806:	6819      	ldreq	r1, [r3, #0]
 8005808:	685b      	ldreq	r3, [r3, #4]
 800580a:	1809      	addeq	r1, r1, r0
 800580c:	6021      	streq	r1, [r4, #0]
 800580e:	6063      	str	r3, [r4, #4]
 8005810:	6054      	str	r4, [r2, #4]
 8005812:	e7c9      	b.n	80057a8 <_free_r+0x24>
 8005814:	bd38      	pop	{r3, r4, r5, pc}
 8005816:	bf00      	nop
 8005818:	200001b4 	.word	0x200001b4

0800581c <_malloc_r>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	1ccd      	adds	r5, r1, #3
 8005820:	f025 0503 	bic.w	r5, r5, #3
 8005824:	3508      	adds	r5, #8
 8005826:	2d0c      	cmp	r5, #12
 8005828:	bf38      	it	cc
 800582a:	250c      	movcc	r5, #12
 800582c:	2d00      	cmp	r5, #0
 800582e:	4606      	mov	r6, r0
 8005830:	db01      	blt.n	8005836 <_malloc_r+0x1a>
 8005832:	42a9      	cmp	r1, r5
 8005834:	d903      	bls.n	800583e <_malloc_r+0x22>
 8005836:	230c      	movs	r3, #12
 8005838:	6033      	str	r3, [r6, #0]
 800583a:	2000      	movs	r0, #0
 800583c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800583e:	f000 f87d 	bl	800593c <__malloc_lock>
 8005842:	4921      	ldr	r1, [pc, #132]	; (80058c8 <_malloc_r+0xac>)
 8005844:	680a      	ldr	r2, [r1, #0]
 8005846:	4614      	mov	r4, r2
 8005848:	b99c      	cbnz	r4, 8005872 <_malloc_r+0x56>
 800584a:	4f20      	ldr	r7, [pc, #128]	; (80058cc <_malloc_r+0xb0>)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	b923      	cbnz	r3, 800585a <_malloc_r+0x3e>
 8005850:	4621      	mov	r1, r4
 8005852:	4630      	mov	r0, r6
 8005854:	f000 f862 	bl	800591c <_sbrk_r>
 8005858:	6038      	str	r0, [r7, #0]
 800585a:	4629      	mov	r1, r5
 800585c:	4630      	mov	r0, r6
 800585e:	f000 f85d 	bl	800591c <_sbrk_r>
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	d123      	bne.n	80058ae <_malloc_r+0x92>
 8005866:	230c      	movs	r3, #12
 8005868:	4630      	mov	r0, r6
 800586a:	6033      	str	r3, [r6, #0]
 800586c:	f000 f86c 	bl	8005948 <__malloc_unlock>
 8005870:	e7e3      	b.n	800583a <_malloc_r+0x1e>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	1b5b      	subs	r3, r3, r5
 8005876:	d417      	bmi.n	80058a8 <_malloc_r+0x8c>
 8005878:	2b0b      	cmp	r3, #11
 800587a:	d903      	bls.n	8005884 <_malloc_r+0x68>
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	441c      	add	r4, r3
 8005880:	6025      	str	r5, [r4, #0]
 8005882:	e004      	b.n	800588e <_malloc_r+0x72>
 8005884:	6863      	ldr	r3, [r4, #4]
 8005886:	42a2      	cmp	r2, r4
 8005888:	bf0c      	ite	eq
 800588a:	600b      	streq	r3, [r1, #0]
 800588c:	6053      	strne	r3, [r2, #4]
 800588e:	4630      	mov	r0, r6
 8005890:	f000 f85a 	bl	8005948 <__malloc_unlock>
 8005894:	f104 000b 	add.w	r0, r4, #11
 8005898:	1d23      	adds	r3, r4, #4
 800589a:	f020 0007 	bic.w	r0, r0, #7
 800589e:	1ac2      	subs	r2, r0, r3
 80058a0:	d0cc      	beq.n	800583c <_malloc_r+0x20>
 80058a2:	1a1b      	subs	r3, r3, r0
 80058a4:	50a3      	str	r3, [r4, r2]
 80058a6:	e7c9      	b.n	800583c <_malloc_r+0x20>
 80058a8:	4622      	mov	r2, r4
 80058aa:	6864      	ldr	r4, [r4, #4]
 80058ac:	e7cc      	b.n	8005848 <_malloc_r+0x2c>
 80058ae:	1cc4      	adds	r4, r0, #3
 80058b0:	f024 0403 	bic.w	r4, r4, #3
 80058b4:	42a0      	cmp	r0, r4
 80058b6:	d0e3      	beq.n	8005880 <_malloc_r+0x64>
 80058b8:	1a21      	subs	r1, r4, r0
 80058ba:	4630      	mov	r0, r6
 80058bc:	f000 f82e 	bl	800591c <_sbrk_r>
 80058c0:	3001      	adds	r0, #1
 80058c2:	d1dd      	bne.n	8005880 <_malloc_r+0x64>
 80058c4:	e7cf      	b.n	8005866 <_malloc_r+0x4a>
 80058c6:	bf00      	nop
 80058c8:	200001b4 	.word	0x200001b4
 80058cc:	200001b8 	.word	0x200001b8

080058d0 <_realloc_r>:
 80058d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d2:	4607      	mov	r7, r0
 80058d4:	4614      	mov	r4, r2
 80058d6:	460e      	mov	r6, r1
 80058d8:	b921      	cbnz	r1, 80058e4 <_realloc_r+0x14>
 80058da:	4611      	mov	r1, r2
 80058dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058e0:	f7ff bf9c 	b.w	800581c <_malloc_r>
 80058e4:	b922      	cbnz	r2, 80058f0 <_realloc_r+0x20>
 80058e6:	f7ff ff4d 	bl	8005784 <_free_r>
 80058ea:	4625      	mov	r5, r4
 80058ec:	4628      	mov	r0, r5
 80058ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f0:	f000 f830 	bl	8005954 <_malloc_usable_size_r>
 80058f4:	42a0      	cmp	r0, r4
 80058f6:	d20f      	bcs.n	8005918 <_realloc_r+0x48>
 80058f8:	4621      	mov	r1, r4
 80058fa:	4638      	mov	r0, r7
 80058fc:	f7ff ff8e 	bl	800581c <_malloc_r>
 8005900:	4605      	mov	r5, r0
 8005902:	2800      	cmp	r0, #0
 8005904:	d0f2      	beq.n	80058ec <_realloc_r+0x1c>
 8005906:	4631      	mov	r1, r6
 8005908:	4622      	mov	r2, r4
 800590a:	f7ff fbe3 	bl	80050d4 <memcpy>
 800590e:	4631      	mov	r1, r6
 8005910:	4638      	mov	r0, r7
 8005912:	f7ff ff37 	bl	8005784 <_free_r>
 8005916:	e7e9      	b.n	80058ec <_realloc_r+0x1c>
 8005918:	4635      	mov	r5, r6
 800591a:	e7e7      	b.n	80058ec <_realloc_r+0x1c>

0800591c <_sbrk_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	2300      	movs	r3, #0
 8005920:	4d05      	ldr	r5, [pc, #20]	; (8005938 <_sbrk_r+0x1c>)
 8005922:	4604      	mov	r4, r0
 8005924:	4608      	mov	r0, r1
 8005926:	602b      	str	r3, [r5, #0]
 8005928:	f7fb fc28 	bl	800117c <_sbrk>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d102      	bne.n	8005936 <_sbrk_r+0x1a>
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	b103      	cbz	r3, 8005936 <_sbrk_r+0x1a>
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	200002ec 	.word	0x200002ec

0800593c <__malloc_lock>:
 800593c:	4801      	ldr	r0, [pc, #4]	; (8005944 <__malloc_lock+0x8>)
 800593e:	f000 b811 	b.w	8005964 <__retarget_lock_acquire_recursive>
 8005942:	bf00      	nop
 8005944:	200002f4 	.word	0x200002f4

08005948 <__malloc_unlock>:
 8005948:	4801      	ldr	r0, [pc, #4]	; (8005950 <__malloc_unlock+0x8>)
 800594a:	f000 b80c 	b.w	8005966 <__retarget_lock_release_recursive>
 800594e:	bf00      	nop
 8005950:	200002f4 	.word	0x200002f4

08005954 <_malloc_usable_size_r>:
 8005954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005958:	1f18      	subs	r0, r3, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	bfbc      	itt	lt
 800595e:	580b      	ldrlt	r3, [r1, r0]
 8005960:	18c0      	addlt	r0, r0, r3
 8005962:	4770      	bx	lr

08005964 <__retarget_lock_acquire_recursive>:
 8005964:	4770      	bx	lr

08005966 <__retarget_lock_release_recursive>:
 8005966:	4770      	bx	lr

08005968 <_init>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr

08005974 <_fini>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr
