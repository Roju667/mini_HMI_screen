
mini_HMI_screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08003e7c  08003e7c  00013e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042b8  080042b8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080042b8  080042b8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042b8  080042b8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042b8  080042b8  000142b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080042c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000080  08004340  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08004340  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d097  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284d  00000000  00000000  0002d140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002f990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  000304d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001838f  00000000  00000000  00030ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d59e  00000000  00000000  00049287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000839cf  00000000  00000000  00056825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da1f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f34  00000000  00000000  000da248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e64 	.word	0x08003e64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003e64 	.word	0x08003e64

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <set_button_flag>:
#define BTN_ENTER BUTTON_ENTER_Pin

volatile button_flags_t flags;

void set_button_flag(uint16_t GPIO_Pin)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	2b80      	cmp	r3, #128	; 0x80
 800016a:	d01e      	beq.n	80001aa <set_button_flag+0x4e>
 800016c:	2b80      	cmp	r3, #128	; 0x80
 800016e:	dc20      	bgt.n	80001b2 <set_button_flag+0x56>
 8000170:	2b40      	cmp	r3, #64	; 0x40
 8000172:	d016      	beq.n	80001a2 <set_button_flag+0x46>
 8000174:	2b40      	cmp	r3, #64	; 0x40
 8000176:	dc1c      	bgt.n	80001b2 <set_button_flag+0x56>
 8000178:	2b20      	cmp	r3, #32
 800017a:	d00e      	beq.n	800019a <set_button_flag+0x3e>
 800017c:	2b20      	cmp	r3, #32
 800017e:	dc18      	bgt.n	80001b2 <set_button_flag+0x56>
 8000180:	2b08      	cmp	r3, #8
 8000182:	d002      	beq.n	800018a <set_button_flag+0x2e>
 8000184:	2b10      	cmp	r3, #16
 8000186:	d004      	beq.n	8000192 <set_button_flag+0x36>
    case (BTN_ENTER):
      flags.enter_flag = true;
      break;

    default:
      break;
 8000188:	e013      	b.n	80001b2 <set_button_flag+0x56>
      flags.left_flag = true;
 800018a:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <set_button_flag+0x64>)
 800018c:	2201      	movs	r2, #1
 800018e:	701a      	strb	r2, [r3, #0]
      break;
 8000190:	e010      	b.n	80001b4 <set_button_flag+0x58>
      flags.right_flag = true;
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <set_button_flag+0x64>)
 8000194:	2201      	movs	r2, #1
 8000196:	705a      	strb	r2, [r3, #1]
      break;
 8000198:	e00c      	b.n	80001b4 <set_button_flag+0x58>
      flags.down_flag = true;
 800019a:	4b09      	ldr	r3, [pc, #36]	; (80001c0 <set_button_flag+0x64>)
 800019c:	2201      	movs	r2, #1
 800019e:	709a      	strb	r2, [r3, #2]
      break;
 80001a0:	e008      	b.n	80001b4 <set_button_flag+0x58>
      flags.up_flag = true;
 80001a2:	4b07      	ldr	r3, [pc, #28]	; (80001c0 <set_button_flag+0x64>)
 80001a4:	2201      	movs	r2, #1
 80001a6:	70da      	strb	r2, [r3, #3]
      break;
 80001a8:	e004      	b.n	80001b4 <set_button_flag+0x58>
      flags.enter_flag = true;
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <set_button_flag+0x64>)
 80001ac:	2201      	movs	r2, #1
 80001ae:	711a      	strb	r2, [r3, #4]
      break;
 80001b0:	e000      	b.n	80001b4 <set_button_flag+0x58>
      break;
 80001b2:	bf00      	nop
      // different gpio
    }

  return;
 80001b4:	bf00      	nop
}
 80001b6:	370c      	adds	r7, #12
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	200000a8 	.word	0x200000a8

080001c4 <buttons_check_flag>:

buttons_state_t buttons_check_flag(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
  buttons_state_t active_button = IDLE;
 80001ca:	2300      	movs	r3, #0
 80001cc:	71fb      	strb	r3, [r7, #7]

  if (flags.left_flag)
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <buttons_check_flag+0x64>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d002      	beq.n	80001de <buttons_check_flag+0x1a>
    {
      active_button = LEFT_FLAG;
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
 80001dc:	e01e      	b.n	800021c <buttons_check_flag+0x58>
    }
  else if (flags.right_flag)
 80001de:	4b12      	ldr	r3, [pc, #72]	; (8000228 <buttons_check_flag+0x64>)
 80001e0:	785b      	ldrb	r3, [r3, #1]
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <buttons_check_flag+0x2a>
    {
      active_button = RIGHT_FLAG;
 80001e8:	2302      	movs	r3, #2
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e016      	b.n	800021c <buttons_check_flag+0x58>
    }
  else if (flags.down_flag)
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <buttons_check_flag+0x64>)
 80001f0:	789b      	ldrb	r3, [r3, #2]
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d002      	beq.n	80001fe <buttons_check_flag+0x3a>
    {
      active_button = DOWN_FLAG;
 80001f8:	2303      	movs	r3, #3
 80001fa:	71fb      	strb	r3, [r7, #7]
 80001fc:	e00e      	b.n	800021c <buttons_check_flag+0x58>
    }
  else if (flags.up_flag)
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <buttons_check_flag+0x64>)
 8000200:	78db      	ldrb	r3, [r3, #3]
 8000202:	b2db      	uxtb	r3, r3
 8000204:	2b00      	cmp	r3, #0
 8000206:	d002      	beq.n	800020e <buttons_check_flag+0x4a>
    {
      active_button = UP_FLAG;
 8000208:	2304      	movs	r3, #4
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	e006      	b.n	800021c <buttons_check_flag+0x58>
    }
  else if (flags.enter_flag)
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <buttons_check_flag+0x64>)
 8000210:	791b      	ldrb	r3, [r3, #4]
 8000212:	b2db      	uxtb	r3, r3
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <buttons_check_flag+0x58>
    {
      active_button = ENTER_FLAG;
 8000218:	2305      	movs	r3, #5
 800021a:	71fb      	strb	r3, [r7, #7]
    }

  return active_button;
 800021c:	79fb      	ldrb	r3, [r7, #7]
}
 800021e:	4618      	mov	r0, r3
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	200000a8 	.word	0x200000a8

0800022c <buttons_reset_flag>:

void buttons_reset_flag(buttons_state_t state_flag)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
  switch (state_flag)
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	3b01      	subs	r3, #1
 800023a:	2b04      	cmp	r3, #4
 800023c:	d820      	bhi.n	8000280 <buttons_reset_flag+0x54>
 800023e:	a201      	add	r2, pc, #4	; (adr r2, 8000244 <buttons_reset_flag+0x18>)
 8000240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000244:	08000259 	.word	0x08000259
 8000248:	08000261 	.word	0x08000261
 800024c:	08000269 	.word	0x08000269
 8000250:	08000271 	.word	0x08000271
 8000254:	08000279 	.word	0x08000279
    {
    case (LEFT_FLAG):
      flags.left_flag = false;
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <buttons_reset_flag+0x60>)
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]
      break;
 800025e:	e010      	b.n	8000282 <buttons_reset_flag+0x56>

    case (RIGHT_FLAG):
      flags.right_flag = false;
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <buttons_reset_flag+0x60>)
 8000262:	2200      	movs	r2, #0
 8000264:	705a      	strb	r2, [r3, #1]
      break;
 8000266:	e00c      	b.n	8000282 <buttons_reset_flag+0x56>

    case (DOWN_FLAG):
      flags.down_flag = false;
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <buttons_reset_flag+0x60>)
 800026a:	2200      	movs	r2, #0
 800026c:	709a      	strb	r2, [r3, #2]
      break;
 800026e:	e008      	b.n	8000282 <buttons_reset_flag+0x56>

    case (UP_FLAG):
      flags.up_flag = false;
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <buttons_reset_flag+0x60>)
 8000272:	2200      	movs	r2, #0
 8000274:	70da      	strb	r2, [r3, #3]
      break;
 8000276:	e004      	b.n	8000282 <buttons_reset_flag+0x56>

    case (ENTER_FLAG):
      flags.enter_flag = false;
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <buttons_reset_flag+0x60>)
 800027a:	2200      	movs	r2, #0
 800027c:	711a      	strb	r2, [r3, #4]
      break;
 800027e:	e000      	b.n	8000282 <buttons_reset_flag+0x56>

    case (IDLE):
    default:
      break;
 8000280:	bf00      	nop
    }
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	200000a8 	.word	0x200000a8

08000290 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
  set_button_flag(GPIO_Pin);
 800029a:	88fb      	ldrh	r3, [r7, #6]
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ff5d 	bl	800015c <set_button_flag>
  return;
 80002a2:	bf00      	nop
}
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	font = font_t;
 80002b4:	4a03      	ldr	r2, [pc, #12]	; (80002c4 <GFX_SetFont+0x18>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	6013      	str	r3, [r2, #0]
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	200000b0 	.word	0x200000b0

080002c8 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, ColorType color)
{
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b089      	sub	sp, #36	; 0x24
 80002cc:	af02      	add	r7, sp, #8
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	4611      	mov	r1, r2
 80002d4:	461a      	mov	r2, r3
 80002d6:	460b      	mov	r3, r1
 80002d8:	71fb      	strb	r3, [r7, #7]
 80002da:	4613      	mov	r3, r2
 80002dc:	80bb      	strh	r3, [r7, #4]
	if(chr > 0x7E) return; // chr > '~'
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	2b7e      	cmp	r3, #126	; 0x7e
 80002e2:	d867      	bhi.n	80003b4 <GFX_DrawChar+0xec>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80002e4:	2300      	movs	r3, #0
 80002e6:	75fb      	strb	r3, [r7, #23]
 80002e8:	e05c      	b.n	80003a4 <GFX_DrawChar+0xdc>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80002ea:	4b34      	ldr	r3, [pc, #208]	; (80003bc <GFX_DrawChar+0xf4>)
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	3b20      	subs	r3, #32
 80002f2:	4932      	ldr	r1, [pc, #200]	; (80003bc <GFX_DrawChar+0xf4>)
 80002f4:	6809      	ldr	r1, [r1, #0]
 80002f6:	3101      	adds	r1, #1
 80002f8:	7809      	ldrb	r1, [r1, #0]
 80002fa:	fb01 f103 	mul.w	r1, r1, r3
 80002fe:	7dfb      	ldrb	r3, [r7, #23]
 8000300:	440b      	add	r3, r1
 8000302:	3302      	adds	r3, #2
 8000304:	4413      	add	r3, r2
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800030a:	2300      	movs	r3, #0
 800030c:	757b      	strb	r3, [r7, #21]
 800030e:	e03f      	b.n	8000390 <GFX_DrawChar+0xc8>
        {
            if(line & 1) // Check last pixel in line
 8000310:	7dbb      	ldrb	r3, [r7, #22]
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	2b00      	cmp	r3, #0
 8000318:	d031      	beq.n	800037e <GFX_DrawChar+0xb6>
            {
            	if(size == 1)
 800031a:	4b29      	ldr	r3, [pc, #164]	; (80003c0 <GFX_DrawChar+0xf8>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d113      	bne.n	800034a <GFX_DrawChar+0x82>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8000322:	7dfb      	ldrb	r3, [r7, #23]
 8000324:	b29a      	uxth	r2, r3
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	b29b      	uxth	r3, r3
 800032a:	4413      	add	r3, r2
 800032c:	b29b      	uxth	r3, r3
 800032e:	b218      	sxth	r0, r3
 8000330:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000334:	b29a      	uxth	r2, r3
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	b29b      	uxth	r3, r3
 800033a:	4413      	add	r3, r2
 800033c:	b29b      	uxth	r3, r3
 800033e:	b21b      	sxth	r3, r3
 8000340:	88ba      	ldrh	r2, [r7, #4]
 8000342:	4619      	mov	r1, r3
 8000344:	f000 fbce 	bl	8000ae4 <ILI9341_WritePixel>
 8000348:	e019      	b.n	800037e <GFX_DrawChar+0xb6>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 800034a:	7dfb      	ldrb	r3, [r7, #23]
 800034c:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <GFX_DrawChar+0xf8>)
 800034e:	7812      	ldrb	r2, [r2, #0]
 8000350:	fb02 f203 	mul.w	r2, r2, r3
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	18d0      	adds	r0, r2, r3
 8000358:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800035c:	4a18      	ldr	r2, [pc, #96]	; (80003c0 <GFX_DrawChar+0xf8>)
 800035e:	7812      	ldrb	r2, [r2, #0]
 8000360:	fb02 f203 	mul.w	r2, r2, r3
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	18d1      	adds	r1, r2, r3
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <GFX_DrawChar+0xf8>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b29a      	uxth	r2, r3
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <GFX_DrawChar+0xf8>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	b29c      	uxth	r4, r3
 8000374:	88bb      	ldrh	r3, [r7, #4]
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	4623      	mov	r3, r4
 800037a:	f000 f93c 	bl	80005f6 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800037e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	3301      	adds	r3, #1
 8000386:	b2db      	uxtb	r3, r3
 8000388:	757b      	strb	r3, [r7, #21]
 800038a:	7dbb      	ldrb	r3, [r7, #22]
 800038c:	085b      	lsrs	r3, r3, #1
 800038e:	75bb      	strb	r3, [r7, #22]
 8000390:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000394:	4a09      	ldr	r2, [pc, #36]	; (80003bc <GFX_DrawChar+0xf4>)
 8000396:	6812      	ldr	r2, [r2, #0]
 8000398:	7812      	ldrb	r2, [r2, #0]
 800039a:	4293      	cmp	r3, r2
 800039c:	dbb8      	blt.n	8000310 <GFX_DrawChar+0x48>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 800039e:	7dfb      	ldrb	r3, [r7, #23]
 80003a0:	3301      	adds	r3, #1
 80003a2:	75fb      	strb	r3, [r7, #23]
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <GFX_DrawChar+0xf4>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	3301      	adds	r3, #1
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	7dfa      	ldrb	r2, [r7, #23]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d39b      	bcc.n	80002ea <GFX_DrawChar+0x22>
 80003b2:	e000      	b.n	80003b6 <GFX_DrawChar+0xee>
	if(chr > 0x7E) return; // chr > '~'
 80003b4:	bf00      	nop
            }

        }
    }
}
 80003b6:	371c      	adds	r7, #28
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd90      	pop	{r4, r7, pc}
 80003bc:	200000b0 	.word	0x200000b0
 80003c0:	20000000 	.word	0x20000000

080003c4 <GFX_DrawString>:

void GFX_DrawString(int x, int y,const char* str, ColorType color)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
 80003d0:	807b      	strh	r3, [r7, #2]
	int x_tmp = x;
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 80003dc:	e015      	b.n	800040a <GFX_DrawString+0x46>
	{
		GFX_DrawChar(x_tmp, y, znak, color); // Draw current char
 80003de:	887b      	ldrh	r3, [r7, #2]
 80003e0:	7cfa      	ldrb	r2, [r7, #19]
 80003e2:	68b9      	ldr	r1, [r7, #8]
 80003e4:	6978      	ldr	r0, [r7, #20]
 80003e6:	f7ff ff6f 	bl	80002c8 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <GFX_DrawString+0x5c>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	3301      	adds	r3, #1
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	461a      	mov	r2, r3
 80003f4:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <GFX_DrawString+0x60>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	fb03 f302 	mul.w	r3, r3, r2
 80003fc:	3301      	adds	r3, #1
 80003fe:	697a      	ldr	r2, [r7, #20]
 8000400:	4413      	add	r3, r2
 8000402:	617b      	str	r3, [r7, #20]

		znak = *str; // Next char
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	607a      	str	r2, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1e3      	bne.n	80003de <GFX_DrawString+0x1a>
	}
}
 8000416:	bf00      	nop
 8000418:	bf00      	nop
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	200000b0 	.word	0x200000b0
 8000424:	20000000 	.word	0x20000000

08000428 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b08c      	sub	sp, #48	; 0x30
 800042c:	af00      	add	r7, sp, #0
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	607a      	str	r2, [r7, #4]
 8000434:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8000436:	683a      	ldr	r2, [r7, #0]
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	1ad3      	subs	r3, r2, r3
 800043c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000440:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	1acb      	subs	r3, r1, r3
 800044a:	2b00      	cmp	r3, #0
 800044c:	bfb8      	it	lt
 800044e:	425b      	neglt	r3, r3
 8000450:	429a      	cmp	r2, r3
 8000452:	bfcc      	ite	gt
 8000454:	2301      	movgt	r3, #1
 8000456:	2300      	movle	r3, #0
 8000458:	b2db      	uxtb	r3, r3
 800045a:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 800045c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000460:	2b00      	cmp	r3, #0
 8000462:	d00b      	beq.n	800047c <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	627b      	str	r3, [r7, #36]	; 0x24
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800046e:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	623b      	str	r3, [r7, #32]
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	6a3b      	ldr	r3, [r7, #32]
 800047a:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 800047c:	68fa      	ldr	r2, [r7, #12]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	429a      	cmp	r2, r3
 8000482:	dd0b      	ble.n	800049c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	61fb      	str	r3, [r7, #28]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	69fb      	ldr	r3, [r7, #28]
 800048e:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	61bb      	str	r3, [r7, #24]
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	69bb      	ldr	r3, [r7, #24]
 800049a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	b29a      	uxth	r2, r3
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	1ad3      	subs	r3, r2, r3
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	bfb8      	it	lt
 80004b4:	425b      	neglt	r3, r3
 80004b6:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80004b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004bc:	0fda      	lsrs	r2, r3, #31
 80004be:	4413      	add	r3, r2
 80004c0:	105b      	asrs	r3, r3, #1
 80004c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80004c4:	68ba      	ldr	r2, [r7, #8]
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	da02      	bge.n	80004d2 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80004cc:	2301      	movs	r3, #1
 80004ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80004d0:	e02e      	b.n	8000530 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80004d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80004d8:	e02a      	b.n	8000530 <GFX_WriteLine+0x108>
	        if (steep) {
 80004da:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d008      	beq.n	80004f4 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	b21b      	sxth	r3, r3
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	b211      	sxth	r1, r2
 80004ea:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 faf9 	bl	8000ae4 <ILI9341_WritePixel>
 80004f2:	e007      	b.n	8000504 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	b21b      	sxth	r3, r3
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	b211      	sxth	r1, r2
 80004fc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 faf0 	bl	8000ae4 <ILI9341_WritePixel>
	        }
	        err -= dy;
 8000504:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000506:	8abb      	ldrh	r3, [r7, #20]
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	b29b      	uxth	r3, r3
 800050c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800050e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000512:	2b00      	cmp	r3, #0
 8000514:	da09      	bge.n	800052a <GFX_WriteLine+0x102>
	            y_start += ystep;
 8000516:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800051a:	68ba      	ldr	r2, [r7, #8]
 800051c:	4413      	add	r3, r2
 800051e:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8000520:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000522:	8afb      	ldrh	r3, [r7, #22]
 8000524:	4413      	add	r3, r2
 8000526:	b29b      	uxth	r3, r3
 8000528:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	3301      	adds	r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	ddd0      	ble.n	80004da <GFX_WriteLine+0xb2>
	        }
	    }
}
 8000538:	bf00      	nop
 800053a:	bf00      	nop
 800053c:	3730      	adds	r7, #48	; 0x30
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af02      	add	r7, sp, #8
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
 800054e:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000550:	68ba      	ldr	r2, [r7, #8]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	887b      	ldrh	r3, [r7, #2]
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	4613      	mov	r3, r2
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	68b9      	ldr	r1, [r7, #8]
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	f7ff ff60 	bl	8000428 <GFX_WriteLine>
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4413      	add	r3, r2
 8000584:	1e5a      	subs	r2, r3, #1
 8000586:	887b      	ldrh	r3, [r7, #2]
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	68f8      	ldr	r0, [r7, #12]
 8000590:	f7ff ff4a 	bl	8000428 <GFX_WriteLine>
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	460b      	mov	r3, r1
 80005ac:	80fb      	strh	r3, [r7, #6]
 80005ae:	4613      	mov	r3, r2
 80005b0:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 80005b2:	88fa      	ldrh	r2, [r7, #6]
 80005b4:	8b3b      	ldrh	r3, [r7, #24]
 80005b6:	68b9      	ldr	r1, [r7, #8]
 80005b8:	68f8      	ldr	r0, [r7, #12]
 80005ba:	f7ff ffd9 	bl	8000570 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 80005be:	88ba      	ldrh	r2, [r7, #4]
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	4413      	add	r3, r2
 80005c4:	1e59      	subs	r1, r3, #1
 80005c6:	88fa      	ldrh	r2, [r7, #6]
 80005c8:	8b3b      	ldrh	r3, [r7, #24]
 80005ca:	68f8      	ldr	r0, [r7, #12]
 80005cc:	f7ff ffd0 	bl	8000570 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 80005d0:	88ba      	ldrh	r2, [r7, #4]
 80005d2:	8b3b      	ldrh	r3, [r7, #24]
 80005d4:	68b9      	ldr	r1, [r7, #8]
 80005d6:	68f8      	ldr	r0, [r7, #12]
 80005d8:	f7ff ffb3 	bl	8000542 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 80005dc:	88fa      	ldrh	r2, [r7, #6]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	4413      	add	r3, r2
 80005e2:	1e58      	subs	r0, r3, #1
 80005e4:	88ba      	ldrh	r2, [r7, #4]
 80005e6:	8b3b      	ldrh	r3, [r7, #24]
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	f7ff ffaa 	bl	8000542 <GFX_DrawFastVLine>

}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b086      	sub	sp, #24
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	60f8      	str	r0, [r7, #12]
 80005fe:	60b9      	str	r1, [r7, #8]
 8000600:	4611      	mov	r1, r2
 8000602:	461a      	mov	r2, r3
 8000604:	460b      	mov	r3, r1
 8000606:	80fb      	strh	r3, [r7, #6]
 8000608:	4613      	mov	r3, r2
 800060a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	e008      	b.n	8000624 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8000612:	88ba      	ldrh	r2, [r7, #4]
 8000614:	8c3b      	ldrh	r3, [r7, #32]
 8000616:	68b9      	ldr	r1, [r7, #8]
 8000618:	6978      	ldr	r0, [r7, #20]
 800061a:	f7ff ff92 	bl	8000542 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	3301      	adds	r3, #1
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	4413      	add	r3, r2
 800062a:	697a      	ldr	r2, [r7, #20]
 800062c:	429a      	cmp	r2, r3
 800062e:	dbf0      	blt.n	8000612 <GFX_DrawFillRectangle+0x1c>
    }

}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <GFX_DrawFillTriangle>:
    GFX_DrawLine(x2, y2, x0, y0, color);
}
#endif
#if USING_FILL_TRIANGLE == 1
void GFX_DrawFillTriangle(int x0, int y0, int x1, int y1, int x2, int y2, ColorType color)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b094      	sub	sp, #80	; 0x50
 800063e:	af00      	add	r7, sp, #0
 8000640:	60f8      	str	r0, [r7, #12]
 8000642:	60b9      	str	r1, [r7, #8]
 8000644:	607a      	str	r2, [r7, #4]
 8000646:	603b      	str	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8000648:	68ba      	ldr	r2, [r7, #8]
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	dd0b      	ble.n	8000668 <GFX_DrawFillTriangle+0x2e>
    	_swap_int(y0, y1); _swap_int(x0, x1);
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000666:	607b      	str	r3, [r7, #4]
    }
    if (y1 > y2) {
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800066c:	429a      	cmp	r2, r3
 800066e:	dd0b      	ble.n	8000688 <GFX_DrawFillTriangle+0x4e>
    	_swap_int(y2, y1); _swap_int(x2, x1);
 8000670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	65bb      	str	r3, [r7, #88]	; 0x58
 8000684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000686:	607b      	str	r3, [r7, #4]
    }
    if (y0 > y1) {
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	dd0b      	ble.n	80006a8 <GFX_DrawFillTriangle+0x6e>
    	_swap_int(y0, y1); _swap_int(x0, x1);
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a6:	607b      	str	r3, [r7, #4]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d136      	bne.n	800071e <GFX_DrawFillTriangle+0xe4>
        a = b = x0;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80006b6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80006ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        if(x1 < a)      a = x1;
 80006be:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	da03      	bge.n	80006d0 <GFX_DrawFillTriangle+0x96>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80006ce:	e007      	b.n	80006e0 <GFX_DrawFillTriangle+0xa6>
        else if(x1 > b) b = x1;
 80006d0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	dd02      	ble.n	80006e0 <GFX_DrawFillTriangle+0xa6>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        if(x2 < a)      a = x2;
 80006e0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80006e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80006e6:	429a      	cmp	r2, r3
 80006e8:	da03      	bge.n	80006f2 <GFX_DrawFillTriangle+0xb8>
 80006ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80006f0:	e007      	b.n	8000702 <GFX_DrawFillTriangle+0xc8>
        else if(x2 > b) b = x2;
 80006f2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80006f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80006f8:	429a      	cmp	r2, r3
 80006fa:	dd02      	ble.n	8000702 <GFX_DrawFillTriangle+0xc8>
 80006fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        GFX_DrawFastHLine(a, y0, b-a+1, color);
 8000702:	f9b7 004e 	ldrsh.w	r0, [r7, #78]	; 0x4e
 8000706:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 800070a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	1c5a      	adds	r2, r3, #1
 8000712:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000716:	68b9      	ldr	r1, [r7, #8]
 8000718:	f7ff ff2a 	bl	8000570 <GFX_DrawFastHLine>
        return;
 800071c:	e0eb      	b.n	80008f6 <GFX_DrawFillTriangle+0x2bc>
    }

    int16_t
    dx01 = x1 - x0,
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	b29a      	uxth	r2, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	b29b      	uxth	r3, r3
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	b29b      	uxth	r3, r3
 800072a:	84fb      	strh	r3, [r7, #38]	; 0x26
    dy01 = y1 - y0,
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	b29a      	uxth	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	b29b      	uxth	r3, r3
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	b29b      	uxth	r3, r3
 8000738:	84bb      	strh	r3, [r7, #36]	; 0x24
    dx02 = x2 - x0,
 800073a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800073c:	b29a      	uxth	r2, r3
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	b29b      	uxth	r3, r3
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	b29b      	uxth	r3, r3
 8000746:	847b      	strh	r3, [r7, #34]	; 0x22
    dy02 = y2 - y0,
 8000748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800074a:	b29a      	uxth	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	b29b      	uxth	r3, r3
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	b29b      	uxth	r3, r3
 8000754:	843b      	strh	r3, [r7, #32]
    dx12 = x2 - x1,
 8000756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000758:	b29a      	uxth	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	b29b      	uxth	r3, r3
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	b29b      	uxth	r3, r3
 8000762:	83fb      	strh	r3, [r7, #30]
    dy12 = y2 - y1;
 8000764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000766:	b29a      	uxth	r2, r3
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	b29b      	uxth	r3, r3
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	b29b      	uxth	r3, r3
 8000770:	83bb      	strh	r3, [r7, #28]
    int32_t
    sa   = 0,
 8000772:	2300      	movs	r3, #0
 8000774:	647b      	str	r3, [r7, #68]	; 0x44
    sb   = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	643b      	str	r3, [r7, #64]	; 0x40
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800077e:	429a      	cmp	r2, r3
 8000780:	d103      	bne.n	800078a <GFX_DrawFillTriangle+0x150>
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8000788:	e005      	b.n	8000796 <GFX_DrawFillTriangle+0x15c>
    else         last = y1-1; // Skip it
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b29b      	uxth	r3, r3
 800078e:	3b01      	subs	r3, #1
 8000790:	b29b      	uxth	r3, r3
 8000792:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    for(y=y0; y<=last; y++) {
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800079c:	e046      	b.n	800082c <GFX_DrawFillTriangle+0x1f2>
        a   = x0 + sa / dy01;
 800079e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80007a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	4413      	add	r3, r2
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        b   = x0 + sb / dy02;
 80007b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80007ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80007bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	4413      	add	r3, r2
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        sa += dx01;
 80007ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80007d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007d4:	4413      	add	r3, r2
 80007d6:	647b      	str	r3, [r7, #68]	; 0x44
        sb += dx02;
 80007d8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80007dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80007de:	4413      	add	r3, r2
 80007e0:	643b      	str	r3, [r7, #64]	; 0x40
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int(a,b);
 80007e2:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80007e6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80007ea:	429a      	cmp	r2, r3
 80007ec:	dd09      	ble.n	8000802 <GFX_DrawFillTriangle+0x1c8>
 80007ee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80007f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        GFX_DrawFastHLine(a, y, b-a+1, color);
 8000802:	f9b7 004e 	ldrsh.w	r0, [r7, #78]	; 0x4e
 8000806:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 800080a:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 800080e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800081a:	f7ff fea9 	bl	8000570 <GFX_DrawFastHLine>
    for(y=y0; y<=last; y++) {
 800081e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000822:	b29b      	uxth	r3, r3
 8000824:	3301      	adds	r3, #1
 8000826:	b29b      	uxth	r3, r3
 8000828:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800082c:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8000830:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8000834:	429a      	cmp	r2, r3
 8000836:	ddb2      	ble.n	800079e <GFX_DrawFillTriangle+0x164>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = dx12 * (y - y1);
 8000838:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800083c:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 8000840:	683a      	ldr	r2, [r7, #0]
 8000842:	1a8a      	subs	r2, r1, r2
 8000844:	fb02 f303 	mul.w	r3, r2, r3
 8000848:	647b      	str	r3, [r7, #68]	; 0x44
    sb = dx02 * (y - y0);
 800084a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800084e:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	1a8a      	subs	r2, r1, r2
 8000856:	fb02 f303 	mul.w	r3, r2, r3
 800085a:	643b      	str	r3, [r7, #64]	; 0x40
    for(; y<=y2; y++) {
 800085c:	e046      	b.n	80008ec <GFX_DrawFillTriangle+0x2b2>
        a   = x1 + sa / dy12;
 800085e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000862:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000864:	fb92 f3f3 	sdiv	r3, r2, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	b29b      	uxth	r3, r3
 800086e:	4413      	add	r3, r2
 8000870:	b29b      	uxth	r3, r3
 8000872:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        b   = x0 + sb / dy02;
 8000876:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800087a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800087c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000880:	b29a      	uxth	r2, r3
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	b29b      	uxth	r3, r3
 8000886:	4413      	add	r3, r2
 8000888:	b29b      	uxth	r3, r3
 800088a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        sa += dx12;
 800088e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000894:	4413      	add	r3, r2
 8000896:	647b      	str	r3, [r7, #68]	; 0x44
        sb += dx02;
 8000898:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800089c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800089e:	4413      	add	r3, r2
 80008a0:	643b      	str	r3, [r7, #64]	; 0x40
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int(a,b);
 80008a2:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80008a6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80008aa:	429a      	cmp	r2, r3
 80008ac:	dd09      	ble.n	80008c2 <GFX_DrawFillTriangle+0x288>
 80008ae:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80008b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        GFX_DrawFastHLine(a, y, b-a+1, color);
 80008c2:	f9b7 004e 	ldrsh.w	r0, [r7, #78]	; 0x4e
 80008c6:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 80008ca:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 80008ce:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80008da:	f7ff fe49 	bl	8000570 <GFX_DrawFastHLine>
    for(; y<=y2; y++) {
 80008de:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	3301      	adds	r3, #1
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80008ec:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80008f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80008f2:	429a      	cmp	r2, r3
 80008f4:	dab3      	bge.n	800085e <GFX_DrawFillTriangle+0x224>
    }
}
 80008f6:	3750      	adds	r7, #80	; 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <ILI9341_Delay>:
#include "main.h"

SPI_HandleTypeDef *Tft_hspi;

// Delay for the functions
static void ILI9341_Delay(uint32_t ms) { HAL_Delay(ms); }
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f001 f8c5 	bl	8001a94 <HAL_Delay>
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <ILI9341_SendTFT>:

// Transmit data to ILI controller
static void ILI9341_SendTFT(uint8_t *Data, uint8_t Lenght)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	70fb      	strb	r3, [r7, #3]
#if (ILI9341_HAL_OPTIMIZE == 1)
  // !! USE ONLY TFT FOR THIS SPI !!
  // optimizing like this doesnt LOCK SPI for other IT/DMA transfers

  // if there is something to send
  while (Lenght > 0U)
 8000920:	e014      	b.n	800094c <ILI9341_SendTFT+0x38>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <ILI9341_SendTFT+0x5c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	2b02      	cmp	r3, #2
 8000930:	d10c      	bne.n	800094c <ILI9341_SendTFT+0x38>
        {
          // put value from Data pointer to register DR
          *((__IO uint8_t *)&Tft_hspi->Instance->DR) = *Data;
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <ILI9341_SendTFT+0x5c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	330c      	adds	r3, #12
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	7812      	ldrb	r2, [r2, #0]
 800093e:	701a      	strb	r2, [r3, #0]
          // increment pointer
          Data++;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3301      	adds	r3, #1
 8000944:	607b      	str	r3, [r7, #4]
          // decrement lenght
          Lenght--;
 8000946:	78fb      	ldrb	r3, [r7, #3]
 8000948:	3b01      	subs	r3, #1
 800094a:	70fb      	strb	r3, [r7, #3]
  while (Lenght > 0U)
 800094c:	78fb      	ldrb	r3, [r7, #3]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1e7      	bne.n	8000922 <ILI9341_SendTFT+0xe>
        }
    }
  // blocking function for SPI , wait before sending next info
  // it is required beacuse when flag ENABLE is ready
  // it doesnt mean that transfer is ready
  while (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8000952:	bf00      	nop
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <ILI9341_SendTFT+0x5c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000960:	2b80      	cmp	r3, #128	; 0x80
 8000962:	d0f7      	beq.n	8000954 <ILI9341_SendTFT+0x40>
    // Without HAL optimizng
#else
  HAL_SPI_Transmit(Tft_hspi, Data, Lenght, ILI9341_SPI_TIMEOUT);
}
#endif
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	200000b4 	.word	0x200000b4

08000974 <ILI9341_SendCommand>:
// Send single command
static void ILI9341_SendCommand(uint8_t Command)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC LOW
  ILI9341_DC_LOW;
 800097e:	2200      	movs	r2, #0
 8000980:	2102      	movs	r1, #2
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <ILI9341_SendCommand+0x28>)
 8000984:	f001 fd42 	bl	800240c <HAL_GPIO_WritePin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	2101      	movs	r1, #1
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ffc1 	bl	8000914 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40010c00 	.word	0x40010c00

080009a0 <ILI9341_SendCommandAndData>:
#endif

// Send command then data
static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data,
                                       uint16_t Lenght)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	4613      	mov	r3, r2
 80009ae:	80bb      	strh	r3, [r7, #4]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC LOW
  ILI9341_DC_LOW;
 80009b0:	2200      	movs	r2, #0
 80009b2:	2102      	movs	r1, #2
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <ILI9341_SendCommandAndData+0x44>)
 80009b6:	f001 fd29 	bl	800240c <HAL_GPIO_WritePin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	2101      	movs	r1, #1
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ffa8 	bl	8000914 <ILI9341_SendTFT>

  // DC HIGH
  ILI9341_DC_HIGH;
 80009c4:	2201      	movs	r2, #1
 80009c6:	2102      	movs	r1, #2
 80009c8:	4806      	ldr	r0, [pc, #24]	; (80009e4 <ILI9341_SendCommandAndData+0x44>)
 80009ca:	f001 fd1f 	bl	800240c <HAL_GPIO_WritePin>

  // SEND DATA
  ILI9341_SendTFT(Data, Lenght);
 80009ce:	88bb      	ldrh	r3, [r7, #4]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	4619      	mov	r1, r3
 80009d4:	6838      	ldr	r0, [r7, #0]
 80009d6:	f7ff ff9d 	bl	8000914 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40010c00 	.word	0x40010c00

080009e8 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t Rotation)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  if (Rotation > 3)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b03      	cmp	r3, #3
 80009f6:	d820      	bhi.n	8000a3a <ILI9341_SetRotation+0x52>
    return;

  switch (Rotation)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d816      	bhi.n	8000a2c <ILI9341_SetRotation+0x44>
 80009fe:	a201      	add	r2, pc, #4	; (adr r2, 8000a04 <ILI9341_SetRotation+0x1c>)
 8000a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a04:	08000a15 	.word	0x08000a15
 8000a08:	08000a1b 	.word	0x08000a1b
 8000a0c:	08000a21 	.word	0x08000a21
 8000a10:	08000a27 	.word	0x08000a27
    {
    case 0:
      Rotation = (MADCTL_MX | MADCTL_BGR);
 8000a14:	2348      	movs	r3, #72	; 0x48
 8000a16:	71fb      	strb	r3, [r7, #7]
      break;
 8000a18:	e008      	b.n	8000a2c <ILI9341_SetRotation+0x44>
    case 1:
      Rotation = (MADCTL_MV | MADCTL_BGR);
 8000a1a:	2328      	movs	r3, #40	; 0x28
 8000a1c:	71fb      	strb	r3, [r7, #7]
      break;
 8000a1e:	e005      	b.n	8000a2c <ILI9341_SetRotation+0x44>
    case 2:
      Rotation = (MADCTL_MY | MADCTL_BGR);
 8000a20:	2388      	movs	r3, #136	; 0x88
 8000a22:	71fb      	strb	r3, [r7, #7]
      break;
 8000a24:	e002      	b.n	8000a2c <ILI9341_SetRotation+0x44>
    case 3:
      Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000a26:	23e8      	movs	r3, #232	; 0xe8
 8000a28:	71fb      	strb	r3, [r7, #7]
      break;
 8000a2a:	bf00      	nop
    }

  ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4619      	mov	r1, r3
 8000a32:	2036      	movs	r0, #54	; 0x36
 8000a34:	f7ff ffb4 	bl	80009a0 <ILI9341_SendCommandAndData>
 8000a38:	e000      	b.n	8000a3c <ILI9341_SetRotation+0x54>
    return;
 8000a3a:	bf00      	nop
}
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop

08000a44 <ILI9341_SetAddrWindow>:

// Set adress range window
static void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w,
                                  uint16_t h)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	4608      	mov	r0, r1
 8000a4e:	4611      	mov	r1, r2
 8000a50:	461a      	mov	r2, r3
 8000a52:	4623      	mov	r3, r4
 8000a54:	80fb      	strh	r3, [r7, #6]
 8000a56:	4603      	mov	r3, r0
 8000a58:	80bb      	strh	r3, [r7, #4]
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	807b      	strh	r3, [r7, #2]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	803b      	strh	r3, [r7, #0]
  // prepare buffer for data
  uint8_t DataToTransfer[4];

  // calculate ranges
  uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8000a62:	88fa      	ldrh	r2, [r7, #6]
 8000a64:	887b      	ldrh	r3, [r7, #2]
 8000a66:	4413      	add	r3, r2
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	81fb      	strh	r3, [r7, #14]
 8000a6e:	88ba      	ldrh	r2, [r7, #4]
 8000a70:	883b      	ldrh	r3, [r7, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	3b01      	subs	r3, #1
 8000a78:	81bb      	strh	r3, [r7, #12]

  //	put data into buffer
  DataToTransfer[0] = (x1 >> 8);
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = x1 & 0xFF;
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (x2 >> 8);
 8000a8a:	89fb      	ldrh	r3, [r7, #14]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = x2 & 0xFF;
 8000a94:	89fb      	ldrh	r3, [r7, #14]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	72fb      	strb	r3, [r7, #11]

  // send command and data about x
  ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4);
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	202a      	movs	r0, #42	; 0x2a
 8000aa4:	f7ff ff7c 	bl	80009a0 <ILI9341_SendCommandAndData>

  //	put data into buffer
  DataToTransfer[0] = (y1 >> 8);
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	0a1b      	lsrs	r3, r3, #8
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = y1 & 0xFF;
 8000ab2:	88bb      	ldrh	r3, [r7, #4]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (y2 >> 8);
 8000ab8:	89bb      	ldrh	r3, [r7, #12]
 8000aba:	0a1b      	lsrs	r3, r3, #8
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = y2 & 0xFF;
 8000ac2:	89bb      	ldrh	r3, [r7, #12]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	72fb      	strb	r3, [r7, #11]

  // send command and data about y
  ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4);
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	2204      	movs	r2, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	202b      	movs	r0, #43	; 0x2b
 8000ad2:	f7ff ff65 	bl	80009a0 <ILI9341_SendCommandAndData>

  ILI9341_SendCommand(ILI9341_RAMWR); // Write to RAM
 8000ad6:	202c      	movs	r0, #44	; 0x2c
 8000ad8:	f7ff ff4c 	bl	8000974 <ILI9341_SendCommand>
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd90      	pop	{r4, r7, pc}

08000ae4 <ILI9341_WritePixel>:

// Write single pixel
void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	460b      	mov	r3, r1
 8000af0:	80bb      	strh	r3, [r7, #4]
 8000af2:	4613      	mov	r3, r2
 8000af4:	807b      	strh	r3, [r7, #2]
  // prepare buffer for data
  uint8_t DataToTransfer[2];

  // check TFT range to not overwrite something else
  if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT))
 8000af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db21      	blt.n	8000b42 <ILI9341_WritePixel+0x5e>
 8000afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b02:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b06:	da1c      	bge.n	8000b42 <ILI9341_WritePixel+0x5e>
 8000b08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db18      	blt.n	8000b42 <ILI9341_WritePixel+0x5e>
 8000b10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b14:	2bef      	cmp	r3, #239	; 0xef
 8000b16:	dc14      	bgt.n	8000b42 <ILI9341_WritePixel+0x5e>
    {
      //	put data into buffer
      DataToTransfer[0] = (color >> 8);
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	733b      	strb	r3, [r7, #12]
      DataToTransfer[1] = color & 0xFF;
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	737b      	strb	r3, [r7, #13]

      // Set window range the single pixel in tft
      // x,y positions 1,1 ranges
      ILI9341_SetAddrWindow(x, y, 1, 1);
 8000b28:	88f8      	ldrh	r0, [r7, #6]
 8000b2a:	88b9      	ldrh	r1, [r7, #4]
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f7ff ff88 	bl	8000a44 <ILI9341_SetAddrWindow>

      // send command that we are writing to RAM, and also color data
      ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2202      	movs	r2, #2
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	202c      	movs	r0, #44	; 0x2c
 8000b3e:	f7ff ff2f 	bl	80009a0 <ILI9341_SendCommandAndData>
      // Send 16 bit color to that range
    }
}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <ILI9341_ClearDisplay>:
    }
}

// Clear whole dipslay with a color
void ILI9341_ClearDisplay(uint16_t color)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
  uint32_t Lenght = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8000b56:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000b5a:	60fb      	str	r3, [r7, #12]

  // set window for whole screen
  ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8000b5c:	23f0      	movs	r3, #240	; 0xf0
 8000b5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b62:	2100      	movs	r1, #0
 8000b64:	2000      	movs	r0, #0
 8000b66:	f7ff ff6d 	bl	8000a44 <ILI9341_SetAddrWindow>

  // send command that we are writing to RAM
  ILI9341_SendCommand(ILI9341_RAMWR);
 8000b6a:	202c      	movs	r0, #44	; 0x2c
 8000b6c:	f7ff ff02 	bl	8000974 <ILI9341_SendCommand>
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC HIGH
  ILI9341_DC_HIGH;
 8000b70:	2201      	movs	r2, #1
 8000b72:	2102      	movs	r1, #2
 8000b74:	481c      	ldr	r0, [pc, #112]	; (8000be8 <ILI9341_ClearDisplay+0x9c>)
 8000b76:	f001 fc49 	bl	800240c <HAL_GPIO_WritePin>

  while (Lenght > 0U)
 8000b7a:	e023      	b.n	8000bc4 <ILI9341_ClearDisplay+0x78>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <ILI9341_ClearDisplay+0xa0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d11b      	bne.n	8000bc4 <ILI9341_ClearDisplay+0x78>
        {
          // put value from Data pointer to register DR
          *((__IO uint8_t *)&Tft_hspi->Instance->DR) = color >> 8;
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	0a1b      	lsrs	r3, r3, #8
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <ILI9341_ClearDisplay+0xa0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	330c      	adds	r3, #12
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	701a      	strb	r2, [r3, #0]

          // wait for the flag to be reset before sending next byte
          while (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8000b9e:	bf00      	nop
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <ILI9341_ClearDisplay+0xa0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d1f7      	bne.n	8000ba0 <ILI9341_ClearDisplay+0x54>
            {
            }

          // put second byte in
          *((__IO uint8_t *)&Tft_hspi->Instance->DR) = color & 0xFF;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <ILI9341_ClearDisplay+0xa0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	330c      	adds	r3, #12
 8000bb8:	88fa      	ldrh	r2, [r7, #6]
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	701a      	strb	r2, [r3, #0]

          // decrement lenght
          Lenght--;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
  while (Lenght > 0U)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1d8      	bne.n	8000b7c <ILI9341_ClearDisplay+0x30>
    }

  // blocking function for SPI , wait before sending next info
  // it is required beacuse when flag ENABLE is ready
  // it doesnt mean that transfer is ready
  while (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8000bca:	bf00      	nop
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <ILI9341_ClearDisplay+0xa0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd8:	2b80      	cmp	r3, #128	; 0x80
 8000bda:	d0f7      	beq.n	8000bcc <ILI9341_ClearDisplay+0x80>
  for (uint32_t i = 0; i < Lenght; i++)
    {
      ILI9341_SendData16(color);
    }
#endif
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40010c00 	.word	0x40010c00
 8000bec:	200000b4 	.word	0x200000b4

08000bf0 <ILI9341_Init>:
    0x80, // Display on
    0x00  // End of list
};

void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  // assign correct spi
  Tft_hspi = hspi;
 8000bf8:	4a24      	ldr	r2, [pc, #144]	; (8000c8c <ILI9341_Init+0x9c>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]

  // prepare data

  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <ILI9341_Init+0xa0>)
 8000c00:	60fb      	str	r3, [r7, #12]

#if (ILI9341_HAL_OPTIMIZE == 1)
  __HAL_SPI_ENABLE(hspi);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c10:	601a      	str	r2, [r3, #0]
#endif

// if hardware reset is defined
#if (ILI9341_USE_HW_RESET == 1)
  ILI9341_RST_LOW;
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c18:	481e      	ldr	r0, [pc, #120]	; (8000c94 <ILI9341_Init+0xa4>)
 8000c1a:	f001 fbf7 	bl	800240c <HAL_GPIO_WritePin>
  ILI9341_Delay(10);
 8000c1e:	200a      	movs	r0, #10
 8000c20:	f7ff fe6c 	bl	80008fc <ILI9341_Delay>
  ILI9341_RST_HIGH;
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c2a:	481a      	ldr	r0, [pc, #104]	; (8000c94 <ILI9341_Init+0xa4>)
 8000c2c:	f001 fbee 	bl	800240c <HAL_GPIO_WritePin>
  ILI9341_Delay(10);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f7ff fe63 	bl	80008fc <ILI9341_Delay>
  ILI9341_SendCommand(ILI9341_SWRESET); // Engage software reset
  ILI9341_Delay(150);
#endif

  // As long as value under address is not 0 loop
  while ((cmd = *(addr++)) > 0)
 8000c36:	e01a      	b.n	8000c6e <ILI9341_Init+0x7e>
    {
      // assign value form address to x (second value that is number of data to
      // be send)
      x = *(addr++);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	60fa      	str	r2, [r7, #12]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	72bb      	strb	r3, [r7, #10]

      // mask this value to maximum of 127
      // 0x7F	0111 1111
      // so if we send 0x80 as second argument then we just send command ->
      // without data
      numArgs = x & 0x7F;
 8000c42:	7abb      	ldrb	r3, [r7, #10]
 8000c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c48:	727b      	strb	r3, [r7, #9]

      // send command then array of data
      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs);
 8000c4a:	7a7b      	ldrb	r3, [r7, #9]
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	7afb      	ldrb	r3, [r7, #11]
 8000c50:	68f9      	ldr	r1, [r7, #12]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fea4 	bl	80009a0 <ILI9341_SendCommandAndData>

      // move adress to next command
      addr += numArgs;
 8000c58:	7a7b      	ldrb	r3, [r7, #9]
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]

      // if only command is sent then make a delay
      if (x & 0x80)
 8000c60:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	da02      	bge.n	8000c6e <ILI9341_Init+0x7e>
        {
          ILI9341_Delay(150);
 8000c68:	2096      	movs	r0, #150	; 0x96
 8000c6a:	f7ff fe47 	bl	80008fc <ILI9341_Delay>
  while ((cmd = *(addr++)) > 0)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	60fa      	str	r2, [r7, #12]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	72fb      	strb	r3, [r7, #11]
 8000c78:	7afb      	ldrb	r3, [r7, #11]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1dc      	bne.n	8000c38 <ILI9341_Init+0x48>
        }
    }

  ILI9341_SetRotation(ILI9341_ROTATION);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f7ff feb2 	bl	80009e8 <ILI9341_SetRotation>
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200000b4 	.word	0x200000b4
 8000c90:	08003f84 	.word	0x08003f84
 8000c94:	40010c00 	.word	0x40010c00

08000c98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_DMA_Init+0x38>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <MX_DMA_Init+0x38>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_DMA_Init+0x38>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	200d      	movs	r0, #13
 8000cbc:	f000 ffe5 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000cc0:	200d      	movs	r0, #13
 8000cc2:	f000 fffe 	bl	8001cc2 <HAL_NVIC_EnableIRQ>

}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <MX_GPIO_Init+0x90>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a1d      	ldr	r2, [pc, #116]	; (8000d64 <MX_GPIO_Init+0x90>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <MX_GPIO_Init+0x90>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_GPIO_Init+0x90>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <MX_GPIO_Init+0x90>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_GPIO_Init+0x90>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f240 4102 	movw	r1, #1026	; 0x402
 8000d1e:	4812      	ldr	r0, [pc, #72]	; (8000d68 <MX_GPIO_Init+0x94>)
 8000d20:	f001 fb74 	bl	800240c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_RST_Pin;
 8000d24:	f240 4302 	movw	r3, #1026	; 0x402
 8000d28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2302      	movs	r3, #2
 8000d34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480a      	ldr	r0, [pc, #40]	; (8000d68 <MX_GPIO_Init+0x94>)
 8000d3e:	f001 f9eb 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BUTTON_LEFT_Pin|BUTTON_RIGHT_Pin|BUTTON_DOWN_Pin|BUTTON_UP_Pin
 8000d42:	23f8      	movs	r3, #248	; 0xf8
 8000d44:	60bb      	str	r3, [r7, #8]
                          |BUTTON_ENTER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_GPIO_Init+0x98>)
 8000d48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	4619      	mov	r1, r3
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <MX_GPIO_Init+0x94>)
 8000d56:	f001 f9df 	bl	8002118 <HAL_GPIO_Init>

}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010c00 	.word	0x40010c00
 8000d6c:	10210000 	.word	0x10210000

08000d70 <change_active_tile_number>:
// edit menu functions
static void open_edit_menu(void);
static void edit_tile(void);

static void change_active_tile_number(buttons_state_t pending_flag)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if (pending_flag == LEFT_FLAG)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d111      	bne.n	8000da4 <change_active_tile_number+0x34>
    {
      screen.active_button = (screen.active_button + 5) % 10;
 8000d80:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <change_active_tile_number+0xec>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	1d5a      	adds	r2, r3, #5
 8000d86:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <change_active_tile_number+0xf0>)
 8000d88:	fb83 1302 	smull	r1, r3, r3, r2
 8000d8c:	1099      	asrs	r1, r3, #2
 8000d8e:	17d3      	asrs	r3, r2, #31
 8000d90:	1ac9      	subs	r1, r1, r3
 8000d92:	460b      	mov	r3, r1
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	440b      	add	r3, r1
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	1ad1      	subs	r1, r2, r3
 8000d9c:	b2ca      	uxtb	r2, r1
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <change_active_tile_number+0xec>)
 8000da0:	701a      	strb	r2, [r3, #0]
    {
      screen.active_button =
          (screen.active_button + 1) % 5 + (5 * (screen.active_button / 5));
    }

  return;
 8000da2:	e056      	b.n	8000e52 <change_active_tile_number+0xe2>
  else if (pending_flag == RIGHT_FLAG)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d111      	bne.n	8000dce <change_active_tile_number+0x5e>
      screen.active_button = (screen.active_button + 5) % 10;
 8000daa:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <change_active_tile_number+0xec>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	1d5a      	adds	r2, r3, #5
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <change_active_tile_number+0xf0>)
 8000db2:	fb83 1302 	smull	r1, r3, r3, r2
 8000db6:	1099      	asrs	r1, r3, #2
 8000db8:	17d3      	asrs	r3, r2, #31
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	1ad1      	subs	r1, r2, r3
 8000dc6:	b2ca      	uxtb	r2, r1
 8000dc8:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <change_active_tile_number+0xec>)
 8000dca:	701a      	strb	r2, [r3, #0]
  return;
 8000dcc:	e041      	b.n	8000e52 <change_active_tile_number+0xe2>
  else if (pending_flag == UP_FLAG)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d11d      	bne.n	8000e10 <change_active_tile_number+0xa0>
          (screen.active_button + 4) % 5 + (5 * (screen.active_button / 5));
 8000dd4:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <change_active_tile_number+0xec>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	1d1a      	adds	r2, r3, #4
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <change_active_tile_number+0xf0>)
 8000ddc:	fb83 1302 	smull	r1, r3, r3, r2
 8000de0:	1059      	asrs	r1, r3, #1
 8000de2:	17d3      	asrs	r3, r2, #31
 8000de4:	1ac9      	subs	r1, r1, r3
 8000de6:	460b      	mov	r3, r1
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	440b      	add	r3, r1
 8000dec:	1ad1      	subs	r1, r2, r3
 8000dee:	b2ca      	uxtb	r2, r1
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <change_active_tile_number+0xec>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	491b      	ldr	r1, [pc, #108]	; (8000e64 <change_active_tile_number+0xf4>)
 8000df6:	fba1 1303 	umull	r1, r3, r1, r3
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	4619      	mov	r1, r3
 8000e00:	0089      	lsls	r1, r1, #2
 8000e02:	440b      	add	r3, r1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4413      	add	r3, r2
 8000e08:	b2da      	uxtb	r2, r3
      screen.active_button =
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <change_active_tile_number+0xec>)
 8000e0c:	701a      	strb	r2, [r3, #0]
  return;
 8000e0e:	e020      	b.n	8000e52 <change_active_tile_number+0xe2>
  else if (pending_flag == DOWN_FLAG)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d11d      	bne.n	8000e52 <change_active_tile_number+0xe2>
          (screen.active_button + 1) % 5 + (5 * (screen.active_button / 5));
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <change_active_tile_number+0xec>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <change_active_tile_number+0xf0>)
 8000e1e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e22:	1059      	asrs	r1, r3, #1
 8000e24:	17d3      	asrs	r3, r2, #31
 8000e26:	1ac9      	subs	r1, r1, r3
 8000e28:	460b      	mov	r3, r1
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	1ad1      	subs	r1, r2, r3
 8000e30:	b2ca      	uxtb	r2, r1
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <change_active_tile_number+0xec>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	490b      	ldr	r1, [pc, #44]	; (8000e64 <change_active_tile_number+0xf4>)
 8000e38:	fba1 1303 	umull	r1, r3, r1, r3
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	4619      	mov	r1, r3
 8000e42:	0089      	lsls	r1, r1, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4413      	add	r3, r2
 8000e4a:	b2da      	uxtb	r2, r3
      screen.active_button =
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <change_active_tile_number+0xec>)
 8000e4e:	701a      	strb	r2, [r3, #0]
  return;
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
}
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	200001b8 	.word	0x200001b8
 8000e60:	66666667 	.word	0x66666667
 8000e64:	cccccccd 	.word	0xcccccccd

08000e68 <change_cursor_position_main>:

static void change_cursor_position_main(buttons_state_t pending_flag)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  // erase active tile
  draw_cursor(HMI_BACKGROUND_COLOR);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f93a 	bl	80010ec <draw_cursor>
  change_active_tile_number(pending_flag);
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff78 	bl	8000d70 <change_active_tile_number>
  // draw new active tile
  draw_cursor(HMI_CURSOR_COLOR);
 8000e80:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8000e84:	f000 f932 	bl	80010ec <draw_cursor>
  buttons_reset_flag(pending_flag);
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff f9ce 	bl	800022c <buttons_reset_flag>

  return;
 8000e90:	bf00      	nop
}
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <check_pending_flags_main>:

static void check_pending_flags_main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
  buttons_state_t pending_flag = buttons_check_flag();
 8000e9e:	f7ff f991 	bl	80001c4 <buttons_check_flag>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]

  if (IDLE != pending_flag)
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d010      	beq.n	8000ece <check_pending_flags_main+0x36>
    {
      switch (pending_flag)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	dc02      	bgt.n	8000eb8 <check_pending_flags_main+0x20>
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	dc03      	bgt.n	8000ebe <check_pending_flags_main+0x26>
        case (ENTER_FLAG):
          open_edit_menu();
          break;
        case (IDLE):
        default:
          break;
 8000eb6:	e00b      	b.n	8000ed0 <check_pending_flags_main+0x38>
      switch (pending_flag)
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	d005      	beq.n	8000ec8 <check_pending_flags_main+0x30>
          break;
 8000ebc:	e008      	b.n	8000ed0 <check_pending_flags_main+0x38>
          change_cursor_position_main(pending_flag);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ffd1 	bl	8000e68 <change_cursor_position_main>
          break;
 8000ec6:	e003      	b.n	8000ed0 <check_pending_flags_main+0x38>
          open_edit_menu();
 8000ec8:	f000 faa6 	bl	8001418 <open_edit_menu>
          break;
 8000ecc:	e000      	b.n	8000ed0 <check_pending_flags_main+0x38>
        }
    }
 8000ece:	bf00      	nop

  return;
 8000ed0:	bf00      	nop
}
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <change_tile_cursor_edit>:

static void change_tile_cursor_edit(buttons_state_t pending_flag,
                                    uint8_t current_pos)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	460a      	mov	r2, r1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	71bb      	strb	r3, [r7, #6]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr

08000ef2 <change_switch_cursor_edit>:

static void change_switch_cursor_edit(buttons_state_t pending_flag,
                                      hmi_edit_cursors_t *p_cursors)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	6039      	str	r1, [r7, #0]
 8000efc:	71fb      	strb	r3, [r7, #7]
  if (p_cursors->pos_tile < 4)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d802      	bhi.n	8000f0c <change_switch_cursor_edit+0x1a>
    {
      draw_std_switch_txt(p_cursors);
 8000f06:	6838      	ldr	r0, [r7, #0]
 8000f08:	f000 fa44 	bl	8001394 <draw_std_switch_txt>
    }
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <check_pending_flags_edit>:

static void check_pending_flags_edit(hmi_edit_cursors_t *p_cursors)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  buttons_state_t pending_flag = buttons_check_flag();
 8000f1c:	f7ff f952 	bl	80001c4 <buttons_check_flag>
 8000f20:	4603      	mov	r3, r0
 8000f22:	73fb      	strb	r3, [r7, #15]

  if (IDLE != pending_flag)
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d01e      	beq.n	8000f68 <check_pending_flags_edit+0x54>
    {
      switch (pending_flag)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	2b05      	cmp	r3, #5
 8000f2e:	d01d      	beq.n	8000f6c <check_pending_flags_edit+0x58>
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	dc1d      	bgt.n	8000f70 <check_pending_flags_edit+0x5c>
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	dc02      	bgt.n	8000f3e <check_pending_flags_edit+0x2a>
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dc04      	bgt.n	8000f46 <check_pending_flags_edit+0x32>

        case (ENTER_FLAG):
          break;
        case (IDLE):
        default:
          break;
 8000f3c:	e018      	b.n	8000f70 <check_pending_flags_edit+0x5c>
 8000f3e:	3b03      	subs	r3, #3
      switch (pending_flag)
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d815      	bhi.n	8000f70 <check_pending_flags_edit+0x5c>
 8000f44:	e008      	b.n	8000f58 <check_pending_flags_edit+0x44>
          change_switch_cursor_edit(pending_flag, p_cursors);
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ffd1 	bl	8000ef2 <change_switch_cursor_edit>
        draw_std_switch_txt(p_cursors);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 fa1f 	bl	8001394 <draw_std_switch_txt>
          break;
 8000f56:	e00c      	b.n	8000f72 <check_pending_flags_edit+0x5e>
          change_tile_cursor_edit(pending_flag, p_cursors->pos_tile);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ffb9 	bl	8000ed8 <change_tile_cursor_edit>
          break;
 8000f66:	e004      	b.n	8000f72 <check_pending_flags_edit+0x5e>
        }
    }
 8000f68:	bf00      	nop
 8000f6a:	e002      	b.n	8000f72 <check_pending_flags_edit+0x5e>
          break;
 8000f6c:	bf00      	nop
 8000f6e:	e000      	b.n	8000f72 <check_pending_flags_edit+0x5e>
          break;
 8000f70:	bf00      	nop

  return;
 8000f72:	bf00      	nop
}
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <hmi_read_eeprom>:

static void hmi_read_eeprom(void) { state = INIT_TFT; }
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <hmi_read_eeprom+0x14>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000284 	.word	0x20000284

08000f94 <hmi_init_tft>:

// init tft and draw main screen
static void hmi_init_tft(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  ILI9341_Init(&hspi1);
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <hmi_init_tft+0x24>)
 8000f9a:	f7ff fe29 	bl	8000bf0 <ILI9341_Init>
  GFX_SetFont(font_8x5);
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <hmi_init_tft+0x28>)
 8000fa0:	f7ff f984 	bl	80002ac <GFX_SetFont>
  screen.active_button = 0;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <hmi_init_tft+0x2c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
  draw_main_screen();
 8000faa:	f000 f905 	bl	80011b8 <draw_main_screen>
  state = ACTIVE_SCREEN;
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <hmi_init_tft+0x30>)
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	701a      	strb	r2, [r3, #0]
  return;
 8000fb4:	bf00      	nop
}
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000288 	.word	0x20000288
 8000fbc:	08003ff4 	.word	0x08003ff4
 8000fc0:	200001b8 	.word	0x200001b8
 8000fc4:	20000284 	.word	0x20000284

08000fc8 <hmi_active_screen>:

static void hmi_active_screen(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  while (1)
    {
      // do every tile callback
      for (uint8_t i = 0; i < 10; i++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	e023      	b.n	800101c <hmi_active_screen+0x54>
        {
          if (NULL != screen.buttons[i].callback)
 8000fd4:	79fa      	ldrb	r2, [r7, #7]
 8000fd6:	4913      	ldr	r1, [pc, #76]	; (8001024 <hmi_active_screen+0x5c>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3314      	adds	r3, #20
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d013      	beq.n	8001012 <hmi_active_screen+0x4a>
            {
              screen.buttons[i].callback(&screen.buttons[i].data);
 8000fea:	79fa      	ldrb	r2, [r7, #7]
 8000fec:	490d      	ldr	r1, [pc, #52]	; (8001024 <hmi_active_screen+0x5c>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3314      	adds	r3, #20
 8000ffa:	6819      	ldr	r1, [r3, #0]
 8000ffc:	79fa      	ldrb	r2, [r7, #7]
 8000ffe:	4613      	mov	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	3308      	adds	r3, #8
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <hmi_active_screen+0x5c>)
 800100a:	4413      	add	r3, r2
 800100c:	3304      	adds	r3, #4
 800100e:	4618      	mov	r0, r3
 8001010:	4788      	blx	r1
            }

          // check if button was pressed
          check_pending_flags_main();
 8001012:	f7ff ff41 	bl	8000e98 <check_pending_flags_main>
      for (uint8_t i = 0; i < 10; i++)
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	3301      	adds	r3, #1
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b09      	cmp	r3, #9
 8001020:	d9d8      	bls.n	8000fd4 <hmi_active_screen+0xc>
 8001022:	e7d4      	b.n	8000fce <hmi_active_screen+0x6>
 8001024:	200001b8 	.word	0x200001b8

08001028 <hmi_main>:

  return;
}

void hmi_main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  state = READ_EEPROM;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <hmi_main+0x38>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
  while (1)
    {
      switch (state)
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <hmi_main+0x38>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d00c      	beq.n	8001056 <hmi_main+0x2e>
 800103c:	2b02      	cmp	r3, #2
 800103e:	dcf8      	bgt.n	8001032 <hmi_main+0xa>
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <hmi_main+0x22>
 8001044:	2b01      	cmp	r3, #1
 8001046:	d003      	beq.n	8001050 <hmi_main+0x28>
 8001048:	e7f3      	b.n	8001032 <hmi_main+0xa>
        {
        case (READ_EEPROM):
          {
            hmi_read_eeprom();
 800104a:	f7ff ff97 	bl	8000f7c <hmi_read_eeprom>
            break;
 800104e:	e005      	b.n	800105c <hmi_main+0x34>
          }

        case (INIT_TFT):
          {
            hmi_init_tft();
 8001050:	f7ff ffa0 	bl	8000f94 <hmi_init_tft>
            break;
 8001054:	e002      	b.n	800105c <hmi_main+0x34>
          }

        case (ACTIVE_SCREEN):
          {
            hmi_active_screen();
 8001056:	f7ff ffb7 	bl	8000fc8 <hmi_active_screen>
            break;
 800105a:	bf00      	nop
      switch (state)
 800105c:	e7e9      	b.n	8001032 <hmi_main+0xa>
 800105e:	bf00      	nop
 8001060:	20000284 	.word	0x20000284

08001064 <HAL_UARTEx_RxEventCallback>:
        }
    }
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
  frame_returned = true;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_UARTEx_RxEventCallback+0x1c>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	20000285 	.word	0x20000285

08001084 <draw_tile>:

// draw new tile with string value
static void draw_tile(const uint8_t tile_number)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af02      	add	r7, sp, #8
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  uint8_t column = tile_number / 5;
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4a15      	ldr	r2, [pc, #84]	; (80010e8 <draw_tile+0x64>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	75fb      	strb	r3, [r7, #23]
  uint8_t row = tile_number % 5;
 800109a:	79fa      	ldrb	r2, [r7, #7]
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <draw_tile+0x64>)
 800109e:	fba3 1302 	umull	r1, r3, r3, r2
 80010a2:	0899      	lsrs	r1, r3, #2
 80010a4:	460b      	mov	r3, r1
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	440b      	add	r3, r1
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	75bb      	strb	r3, [r7, #22]

  uint32_t x_pos = (column * OFFSET_X_SECOND_COLUMN) + OFFSET_X_LEFT_BORDER;
 80010ae:	7dfa      	ldrb	r2, [r7, #23]
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	015b      	lsls	r3, r3, #5
 80010b8:	1a9b      	subs	r3, r3, r2
 80010ba:	3303      	adds	r3, #3
 80010bc:	613b      	str	r3, [r7, #16]
  uint32_t y_pos = (row * DISTANCE_Y_BETWEEN_TILES) + OFFSET_Y_FIRST_TILE;
 80010be:	7dba      	ldrb	r2, [r7, #22]
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4413      	add	r3, r2
 80010ca:	331d      	adds	r3, #29
 80010cc:	60fb      	str	r3, [r7, #12]

  GFX_DrawRectangle(x_pos, y_pos, TILE_WIDTH, TILE_HEIGHT, HMI_TILE_COLOR);
 80010ce:	6938      	ldr	r0, [r7, #16]
 80010d0:	68f9      	ldr	r1, [r7, #12]
 80010d2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2328      	movs	r3, #40	; 0x28
 80010da:	229b      	movs	r2, #155	; 0x9b
 80010dc:	f7ff fa5e 	bl	800059c <GFX_DrawRectangle>
  return;
 80010e0:	bf00      	nop
}
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	cccccccd 	.word	0xcccccccd

080010ec <draw_cursor>:

// draw active tile where the cursor is
static void draw_cursor(ColorType color)
{
 80010ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ee:	b08f      	sub	sp, #60	; 0x3c
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
  uint8_t column = screen.active_button / 5;
 80010f6:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <draw_cursor+0xc4>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	4a2e      	ldr	r2, [pc, #184]	; (80011b4 <draw_cursor+0xc8>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t row = screen.active_button % 5;
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <draw_cursor+0xc4>)
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <draw_cursor+0xc8>)
 800110c:	fba3 1302 	umull	r1, r3, r3, r2
 8001110:	0899      	lsrs	r1, r3, #2
 8001112:	460b      	mov	r3, r1
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  // to draw cursor not on the tile but in the tile i add LINE_SIZE to the
  // offset
  uint32_t x0_pos =
      (column * OFFSET_X_SECOND_COLUMN) + LINE_SIZE + OFFSET_X_LEFT_BORDER;
 800111e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	015b      	lsls	r3, r3, #5
 800112a:	1a9b      	subs	r3, r3, r2
  uint32_t x0_pos =
 800112c:	3304      	adds	r3, #4
 800112e:	623b      	str	r3, [r7, #32]

  uint32_t y0_pos =
      (row * DISTANCE_Y_BETWEEN_TILES) + OFFSET_Y_FIRST_TILE + LINE_SIZE;
 8001130:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4413      	add	r3, r2
  uint32_t y0_pos =
 800113e:	331e      	adds	r3, #30
 8001140:	61fb      	str	r3, [r7, #28]

  uint32_t x1_pos =
      (column * OFFSET_X_SECOND_COLUMN) + LINE_SIZE + OFFSET_X_LEFT_BORDER;
 8001142:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	015b      	lsls	r3, r3, #5
 800114e:	1a9b      	subs	r3, r3, r2
  uint32_t x1_pos =
 8001150:	3304      	adds	r3, #4
 8001152:	61bb      	str	r3, [r7, #24]
  uint32_t y1_pos = (row * DISTANCE_Y_BETWEEN_TILES) + OFFSET_Y_FIRST_TILE +
 8001154:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	3344      	adds	r3, #68	; 0x44
 8001164:	617b      	str	r3, [r7, #20]
                    TILE_HEIGHT - LINE_SIZE;

  uint32_t x2_pos = (column * OFFSET_X_SECOND_COLUMN) + OFFSET_X_LEFT_BORDER +
 8001166:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	015b      	lsls	r3, r3, #5
 8001172:	1a9b      	subs	r3, r3, r2
 8001174:	3317      	adds	r3, #23
 8001176:	613b      	str	r3, [r7, #16]
                    OFFSET_X_CURSOR_POINTER;

  uint32_t y2_pos = (row * DISTANCE_Y_BETWEEN_TILES) + OFFSET_Y_FIRST_TILE +
 8001178:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4413      	add	r3, r2
 8001186:	3331      	adds	r3, #49	; 0x31
 8001188:	60fb      	str	r3, [r7, #12]
                    (TILE_HEIGHT / 2);

  GFX_DrawFillTriangle(x0_pos, y0_pos, x1_pos, y1_pos, x2_pos, y2_pos, color);
 800118a:	6a38      	ldr	r0, [r7, #32]
 800118c:	69fc      	ldr	r4, [r7, #28]
 800118e:	69bd      	ldr	r5, [r7, #24]
 8001190:	697e      	ldr	r6, [r7, #20]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	88f9      	ldrh	r1, [r7, #6]
 8001198:	9102      	str	r1, [sp, #8]
 800119a:	9201      	str	r2, [sp, #4]
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	4633      	mov	r3, r6
 80011a0:	462a      	mov	r2, r5
 80011a2:	4621      	mov	r1, r4
 80011a4:	f7ff fa49 	bl	800063a <GFX_DrawFillTriangle>

  return;
 80011a8:	bf00      	nop
}
 80011aa:	372c      	adds	r7, #44	; 0x2c
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b0:	200001b8 	.word	0x200001b8
 80011b4:	cccccccd 	.word	0xcccccccd

080011b8 <draw_main_screen>:

static void draw_main_screen(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
  ILI9341_ClearDisplay(HMI_BACKGROUND_COLOR);
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff fcc4 	bl	8000b4c <ILI9341_ClearDisplay>
  draw_wide_tile("XGB PLC COMMUNICATION", 0, true);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2100      	movs	r1, #0
 80011c8:	480b      	ldr	r0, [pc, #44]	; (80011f8 <draw_main_screen+0x40>)
 80011ca:	f000 f8ad 	bl	8001328 <draw_wide_tile>
  for (uint8_t i = 0; i < 10; i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	e006      	b.n	80011e2 <draw_main_screen+0x2a>
    {
      draw_tile(i);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff54 	bl	8001084 <draw_tile>
  for (uint8_t i = 0; i < 10; i++)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	3301      	adds	r3, #1
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2b09      	cmp	r3, #9
 80011e6:	d9f5      	bls.n	80011d4 <draw_main_screen+0x1c>
    }

  draw_cursor(ILI9341_DARKCYAN);
 80011e8:	f240 30ef 	movw	r0, #1007	; 0x3ef
 80011ec:	f7ff ff7e 	bl	80010ec <draw_cursor>
  return;
 80011f0:	bf00      	nop
}
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	08003f38 	.word	0x08003f38

080011fc <find_x_to_center_text>:

static uint32_t find_x_to_center_text(const char *text, uint32_t left_border,
                                      uint32_t right_border)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t string_lenght = strlen(text) * (FONT_WIDTH + FONT_SPACE);
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7fe ff9f 	bl	800014c <strlen>
 800120e:	4602      	mov	r2, r0
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	61fb      	str	r3, [r7, #28]
  uint32_t tile_width = right_border - left_border;
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	61bb      	str	r3, [r7, #24]
  uint32_t start_text_pos = ((tile_width - string_lenght) / 2) + left_border;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	085b      	lsrs	r3, r3, #1
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	4413      	add	r3, r2
 800122e:	617b      	str	r3, [r7, #20]
  return start_text_pos;
 8001230:	697b      	ldr	r3, [r7, #20]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <get_switch_cursor>:

// this function return value of the cursor of current tile
static uint32_t get_switch_cursor(hmi_edit_cursors_t *p_cursors)
{
 800123a:	b480      	push	{r7}
 800123c:	b085      	sub	sp, #20
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  uint32_t position = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  switch (p_cursors->pos_tile)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d00e      	beq.n	800126c <get_switch_cursor+0x32>
 800124e:	2b03      	cmp	r3, #3
 8001250:	dc10      	bgt.n	8001274 <get_switch_cursor+0x3a>
 8001252:	2b01      	cmp	r3, #1
 8001254:	d002      	beq.n	800125c <get_switch_cursor+0x22>
 8001256:	2b02      	cmp	r3, #2
 8001258:	d004      	beq.n	8001264 <get_switch_cursor+0x2a>
 800125a:	e00b      	b.n	8001274 <get_switch_cursor+0x3a>
    {
    case (1):
      position = p_cursors->pos_fun;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	785b      	ldrb	r3, [r3, #1]
 8001260:	60fb      	str	r3, [r7, #12]
      break;
 8001262:	e007      	b.n	8001274 <get_switch_cursor+0x3a>
    case (2):
      position = p_cursors->pos_dev;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	789b      	ldrb	r3, [r3, #2]
 8001268:	60fb      	str	r3, [r7, #12]
      break;
 800126a:	e003      	b.n	8001274 <get_switch_cursor+0x3a>
    case (3):
      position = p_cursors->pos_size;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	78db      	ldrb	r3, [r3, #3]
 8001270:	60fb      	str	r3, [r7, #12]
      break;
 8001272:	bf00      	nop
    }

  return position;
 8001274:	68fb      	ldr	r3, [r7, #12]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <draw_edit_menu>:

// draw edit menu
static void draw_edit_menu(void)
{
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b08e      	sub	sp, #56	; 0x38
 8001284:	af00      	add	r7, sp, #0
  const char *tile_text[] = {"Tile function:", "Device Type:", "Device Size:",
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <draw_edit_menu+0x9c>)
 8001288:	f107 0420 	add.w	r4, r7, #32
 800128c:	461d      	mov	r5, r3
 800128e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001292:	682b      	ldr	r3, [r5, #0]
 8001294:	6023      	str	r3, [r4, #0]
                             "Device Address:", "Confirm - Discard"};

  ILI9341_ClearDisplay(HMI_EDIT_MENU_COLOR);
 8001296:	f240 30ef 	movw	r0, #1007	; 0x3ef
 800129a:	f7ff fc57 	bl	8000b4c <ILI9341_ClearDisplay>

  char message[32] = {0};
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
 80012b0:	615a      	str	r2, [r3, #20]
 80012b2:	619a      	str	r2, [r3, #24]
  sprintf(message, "TILE NUMBER %d", screen.active_button);
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <draw_edit_menu+0xa0>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	463b      	mov	r3, r7
 80012bc:	4919      	ldr	r1, [pc, #100]	; (8001324 <draw_edit_menu+0xa4>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 f9a4 	bl	800360c <siprintf>
  draw_wide_tile(message, 0, true);
 80012c4:	463b      	mov	r3, r7
 80012c6:	2201      	movs	r2, #1
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f82c 	bl	8001328 <draw_wide_tile>

  for (uint8_t i = 1; i < 5; i++)
 80012d0:	2301      	movs	r3, #1
 80012d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012d6:	e013      	b.n	8001300 <draw_edit_menu+0x80>
    {
      draw_wide_tile(tile_text[i - 1], i, false);
 80012d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012dc:	3b01      	subs	r3, #1
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80012e4:	4413      	add	r3, r2
 80012e6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80012ea:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80012ee:	2200      	movs	r2, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 f819 	bl	8001328 <draw_wide_tile>
  for (uint8_t i = 1; i < 5; i++)
 80012f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012fa:	3301      	adds	r3, #1
 80012fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001300:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001304:	2b04      	cmp	r3, #4
 8001306:	d9e7      	bls.n	80012d8 <draw_edit_menu+0x58>
    }
  draw_wide_tile(tile_text[4], 5, true);
 8001308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130a:	2201      	movs	r2, #1
 800130c:	2105      	movs	r1, #5
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f80a 	bl	8001328 <draw_wide_tile>

  return;
 8001314:	bf00      	nop
}
 8001316:	3738      	adds	r7, #56	; 0x38
 8001318:	46bd      	mov	sp, r7
 800131a:	bdb0      	pop	{r4, r5, r7, pc}
 800131c:	08003f60 	.word	0x08003f60
 8001320:	200001b8 	.word	0x200001b8
 8001324:	08003f50 	.word	0x08003f50

08001328 <draw_wide_tile>:

static void draw_wide_tile(const char *text, uint8_t tile_number,
                           bool center_text)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af02      	add	r7, sp, #8
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
 8001334:	4613      	mov	r3, r2
 8001336:	70bb      	strb	r3, [r7, #2]
  GFX_DrawRectangle(OFFSET_X_LEFT_BORDER,
                    (GAP_Y_BETWEEN_TILES + TITLE_TILE_HEIGHT) * tile_number,
 8001338:	78fa      	ldrb	r2, [r7, #3]
 800133a:	4613      	mov	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	1a9b      	subs	r3, r3, r2
 8001340:	009b      	lsls	r3, r3, #2
  GFX_DrawRectangle(OFFSET_X_LEFT_BORDER,
 8001342:	4619      	mov	r1, r3
 8001344:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	231b      	movs	r3, #27
 800134c:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8001350:	2003      	movs	r0, #3
 8001352:	f7ff f923 	bl	800059c <GFX_DrawRectangle>
                    TITLE_TILE_WIDTH, TITLE_TILE_HEIGHT, HMI_TILE_COLOR);

  uint32_t x_pos = TEXT_X_OFFSET;
 8001356:	230a      	movs	r3, #10
 8001358:	60fb      	str	r3, [r7, #12]
  uint32_t y_pos =
      ((GAP_Y_BETWEEN_TILES + TITLE_TILE_HEIGHT) * tile_number) + TEXT_Y_OFFSET;
 800135a:	78fa      	ldrb	r2, [r7, #3]
 800135c:	4613      	mov	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	1a9b      	subs	r3, r3, r2
 8001362:	009b      	lsls	r3, r3, #2
  uint32_t y_pos =
 8001364:	330a      	adds	r3, #10
 8001366:	60bb      	str	r3, [r7, #8]

  if (center_text == true)
 8001368:	78bb      	ldrb	r3, [r7, #2]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d006      	beq.n	800137c <draw_wide_tile+0x54>
    {
      x_pos = find_x_to_center_text(text, OFFSET_X_LEFT_BORDER,
 800136e:	f240 123d 	movw	r2, #317	; 0x13d
 8001372:	2103      	movs	r1, #3
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff41 	bl	80011fc <find_x_to_center_text>
 800137a:	60f8      	str	r0, [r7, #12]
                                    (ILI9341_TFTWIDTH - OFFSET_X_LEFT_BORDER));
    }

  GFX_DrawString(x_pos, y_pos, text, HMI_TEXT_COLOR);
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	68b9      	ldr	r1, [r7, #8]
 8001380:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	f7ff f81d 	bl	80003c4 <GFX_DrawString>

  return;
 800138a:	bf00      	nop
}
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <draw_std_switch_txt>:

static void draw_std_switch_txt(hmi_edit_cursors_t *p_cursors)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af02      	add	r7, sp, #8
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t x_pos = find_x_to_center_text(
      std_switch[(p_cursors->pos_tile) - 1][p_cursors->pos_dev].display_text,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <draw_std_switch_txt+0x80>)
 80013a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	789b      	ldrb	r3, [r3, #2]
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4413      	add	r3, r2
 80013b0:	681b      	ldr	r3, [r3, #0]
  uint32_t x_pos = find_x_to_center_text(
 80013b2:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80013b6:	2196      	movs	r1, #150	; 0x96
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff1f 	bl	80011fc <find_x_to_center_text>
 80013be:	6178      	str	r0, [r7, #20]
      150, 314);
  ;
  uint32_t y_pos =
      ((GAP_Y_BETWEEN_TILES + TITLE_TILE_HEIGHT) * p_cursors->pos_tile) +
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
  uint32_t y_pos =
 80013ce:	330a      	adds	r3, #10
 80013d0:	613b      	str	r3, [r7, #16]
      TEXT_Y_OFFSET;

  // select switch cursor depending on tile cursor
  uint32_t switch_cursor = get_switch_cursor(p_cursors);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff31 	bl	800123a <get_switch_cursor>
 80013d8:	60f8      	str	r0, [r7, #12]
  // clear text
  GFX_DrawFillRectangle(x_pos, y_pos, 100, 8, HMI_EDIT_MENU_COLOR);
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	6939      	ldr	r1, [r7, #16]
 80013de:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2308      	movs	r3, #8
 80013e6:	2264      	movs	r2, #100	; 0x64
 80013e8:	f7ff f905 	bl	80005f6 <GFX_DrawFillRectangle>

  GFX_DrawString(
 80013ec:	6978      	ldr	r0, [r7, #20]
 80013ee:	6939      	ldr	r1, [r7, #16]
      x_pos, y_pos,
      std_switch[(p_cursors->pos_tile) - 1][switch_cursor].display_text,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	4a07      	ldr	r2, [pc, #28]	; (8001414 <draw_std_switch_txt+0x80>)
 80013f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4413      	add	r3, r2
 8001402:	681a      	ldr	r2, [r3, #0]
  GFX_DrawString(
 8001404:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001408:	f7fe ffdc 	bl	80003c4 <GFX_DrawString>
      HMI_TEXT_COLOR);
}
 800140c:	bf00      	nop
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000004 	.word	0x20000004

08001418 <open_edit_menu>:

// open edit menu to save read/write function to tile
static void open_edit_menu(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  draw_edit_menu();
 800141c:	f7ff ff30 	bl	8001280 <draw_edit_menu>
  edit_tile();
 8001420:	f000 f802 	bl	8001428 <edit_tile>
  return;
 8001424:	bf00      	nop
}
 8001426:	bd80      	pop	{r7, pc}

08001428 <edit_tile>:

static void edit_tile(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  hmi_edit_cursors_t edit_cursors = {.pos_tile = 1};
 800142e:	463b      	mov	r3, r7
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	809a      	strh	r2, [r3, #4]
 8001436:	2301      	movs	r3, #1
 8001438:	703b      	strb	r3, [r7, #0]
  // do not need second struct part, but to keep switch options all the same
  // i use this struct

  while (1)
    {
      check_pending_flags_edit(&edit_cursors);
 800143a:	463b      	mov	r3, r7
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fd69 	bl	8000f14 <check_pending_flags_edit>
 8001442:	e7fa      	b.n	800143a <edit_tile+0x12>

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001448:	f000 fac2 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144c:	f000 f80d 	bl	800146a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001450:	f7ff fc40 	bl	8000cd4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001454:	f000 f87c 	bl	8001550 <MX_SPI1_Init>
  MX_DMA_Init();
 8001458:	f7ff fc1e 	bl	8000c98 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800145c:	f000 f9f2 	bl	8001844 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001460:	f000 f844 	bl	80014ec <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */



  hmi_main();
 8001464:	f7ff fde0 	bl	8001028 <hmi_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001468:	e7fe      	b.n	8001468 <main+0x24>

0800146a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b090      	sub	sp, #64	; 0x40
 800146e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001470:	f107 0318 	add.w	r3, r7, #24
 8001474:	2228      	movs	r2, #40	; 0x28
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f002 f8bf 	bl	80035fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800148c:	2302      	movs	r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001490:	2301      	movs	r3, #1
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001494:	2310      	movs	r3, #16
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001498:	2302      	movs	r3, #2
 800149a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800149c:	2300      	movs	r3, #0
 800149e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80014a0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80014a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a6:	f107 0318 	add.w	r3, r7, #24
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 ffde 	bl	800246c <HAL_RCC_OscConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0x50>
  {
    Error_Handler();
 80014b6:	f000 f845 	bl	8001544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ba:	230f      	movs	r3, #15
 80014bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014be:	2302      	movs	r3, #2
 80014c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2102      	movs	r1, #2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 fa49 	bl	800296c <HAL_RCC_ClockConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80014e0:	f000 f830 	bl	8001544 <Error_Handler>
  }
}
 80014e4:	bf00      	nop
 80014e6:	3740      	adds	r7, #64	; 0x40
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2100      	movs	r1, #0
 80014f4:	200f      	movs	r0, #15
 80014f6:	f000 fbc8 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80014fa:	200f      	movs	r0, #15
 80014fc:	f000 fbe1 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2025      	movs	r0, #37	; 0x25
 8001506:	f000 fbc0 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800150a:	2025      	movs	r0, #37	; 0x25
 800150c:	f000 fbd9 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2017      	movs	r0, #23
 8001516:	f000 fbb8 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800151a:	2017      	movs	r0, #23
 800151c:	f000 fbd1 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	200a      	movs	r0, #10
 8001526:	f000 fbb0 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800152a:	200a      	movs	r0, #10
 800152c:	f000 fbc9 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2100      	movs	r1, #0
 8001534:	2009      	movs	r0, #9
 8001536:	f000 fba8 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800153a:	2009      	movs	r0, #9
 800153c:	f000 fbc1 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
}
 800154a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800154c:	e7fe      	b.n	800154c <Error_Handler+0x8>
	...

08001550 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001556:	4a18      	ldr	r2, [pc, #96]	; (80015b8 <MX_SPI1_Init+0x68>)
 8001558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_SPI1_Init+0x64>)
 800155c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_SPI1_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_SPI1_Init+0x64>)
 800157c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001580:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001584:	2210      	movs	r2, #16
 8001586:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <MX_SPI1_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_SPI1_Init+0x64>)
 800159c:	220a      	movs	r2, #10
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MX_SPI1_Init+0x64>)
 80015a2:	f001 fb7d 	bl	8002ca0 <HAL_SPI_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015ac:	f7ff ffca 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000288 	.word	0x20000288
 80015b8:	40013000 	.word	0x40013000

080015bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a2e      	ldr	r2, [pc, #184]	; (8001690 <HAL_SPI_MspInit+0xd4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d155      	bne.n	8001688 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015dc:	4b2d      	ldr	r3, [pc, #180]	; (8001694 <HAL_SPI_MspInit+0xd8>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a2c      	ldr	r2, [pc, #176]	; (8001694 <HAL_SPI_MspInit+0xd8>)
 80015e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <HAL_SPI_MspInit+0xd8>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	4b27      	ldr	r3, [pc, #156]	; (8001694 <HAL_SPI_MspInit+0xd8>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a26      	ldr	r2, [pc, #152]	; (8001694 <HAL_SPI_MspInit+0xd8>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_SPI_MspInit+0xd8>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800160c:	23a0      	movs	r3, #160	; 0xa0
 800160e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	4619      	mov	r1, r3
 800161e:	481e      	ldr	r0, [pc, #120]	; (8001698 <HAL_SPI_MspInit+0xdc>)
 8001620:	f000 fd7a 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001624:	2340      	movs	r3, #64	; 0x40
 8001626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	4619      	mov	r1, r3
 8001636:	4818      	ldr	r0, [pc, #96]	; (8001698 <HAL_SPI_MspInit+0xdc>)
 8001638:	f000 fd6e 	bl	8002118 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_SPI_MspInit+0xe0>)
 800163e:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <HAL_SPI_MspInit+0xe4>)
 8001640:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_SPI_MspInit+0xe0>)
 8001644:	2210      	movs	r2, #16
 8001646:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_SPI_MspInit+0xe0>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_SPI_MspInit+0xe0>)
 8001650:	2280      	movs	r2, #128	; 0x80
 8001652:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_SPI_MspInit+0xe0>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_SPI_MspInit+0xe0>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_SPI_MspInit+0xe0>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_SPI_MspInit+0xe0>)
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800166c:	480b      	ldr	r0, [pc, #44]	; (800169c <HAL_SPI_MspInit+0xe0>)
 800166e:	f000 fb43 	bl	8001cf8 <HAL_DMA_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8001678:	f7ff ff64 	bl	8001544 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_SPI_MspInit+0xe0>)
 8001680:	649a      	str	r2, [r3, #72]	; 0x48
 8001682:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_SPI_MspInit+0xe0>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001688:	bf00      	nop
 800168a:	3720      	adds	r7, #32
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40013000 	.word	0x40013000
 8001694:	40021000 	.word	0x40021000
 8001698:	40010800 	.word	0x40010800
 800169c:	200002e0 	.word	0x200002e0
 80016a0:	40020030 	.word	0x40020030

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_MspInit+0x5c>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <HAL_MspInit+0x5c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6193      	str	r3, [r2, #24]
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_MspInit+0x5c>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_MspInit+0x5c>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_MspInit+0x5c>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_MspInit+0x5c>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_MspInit+0x60>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_MspInit+0x60>)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000
 8001704:	40010000 	.word	0x40010000

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800170c:	e7fe      	b.n	800170c <NMI_Handler+0x4>

0800170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <MemManage_Handler+0x4>

0800171a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <UsageFault_Handler+0x4>

08001726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174e:	f000 f985 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}

08001756 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800175a:	2008      	movs	r0, #8
 800175c:	f000 fe6e 	bl	800243c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001768:	2010      	movs	r0, #16
 800176a:	f000 fe67 	bl	800243c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <DMA1_Channel3_IRQHandler+0x10>)
 800177a:	f000 fbc7 	bl	8001f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200002e0 	.word	0x200002e0

08001788 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <DMA1_Channel5_IRQHandler+0x10>)
 800178e:	f000 fbbd 	bl	8001f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000324 	.word	0x20000324

0800179c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80017a0:	2020      	movs	r0, #32
 80017a2:	f000 fe4b 	bl	800243c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80017a6:	2040      	movs	r0, #64	; 0x40
 80017a8:	f000 fe48 	bl	800243c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80017ac:	2080      	movs	r0, #128	; 0x80
 80017ae:	f000 fe45 	bl	800243c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <USART1_IRQHandler+0x10>)
 80017be:	f001 fb41 	bl	8002e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000368 	.word	0x20000368

080017cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <_sbrk+0x5c>)
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <_sbrk+0x60>)
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <_sbrk+0x64>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <_sbrk+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d207      	bcs.n	800180c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017fc:	f001 fec6 	bl	800358c <__errno>
 8001800:	4603      	mov	r3, r0
 8001802:	220c      	movs	r2, #12
 8001804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	e009      	b.n	8001820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <_sbrk+0x64>)
 800181c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20002800 	.word	0x20002800
 800182c:	00000400 	.word	0x00000400
 8001830:	2000009c 	.word	0x2000009c
 8001834:	200003c0 	.word	0x200003c0

08001838 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <MX_USART1_UART_Init+0x50>)
 800184c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800186a:	220c      	movs	r2, #12
 800186c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_USART1_UART_Init+0x4c>)
 800187c:	f001 fa94 	bl	8002da8 <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001886:	f7ff fe5d 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000368 	.word	0x20000368
 8001894:	40013800 	.word	0x40013800

08001898 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a2f      	ldr	r2, [pc, #188]	; (8001970 <HAL_UART_MspInit+0xd8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d157      	bne.n	8001968 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018b8:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <HAL_UART_MspInit+0xdc>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a2d      	ldr	r2, [pc, #180]	; (8001974 <HAL_UART_MspInit+0xdc>)
 80018be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_UART_MspInit+0xdc>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <HAL_UART_MspInit+0xdc>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a27      	ldr	r2, [pc, #156]	; (8001974 <HAL_UART_MspInit+0xdc>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b25      	ldr	r3, [pc, #148]	; (8001974 <HAL_UART_MspInit+0xdc>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0310 	add.w	r3, r7, #16
 80018fa:	4619      	mov	r1, r3
 80018fc:	481e      	ldr	r0, [pc, #120]	; (8001978 <HAL_UART_MspInit+0xe0>)
 80018fe:	f000 fc0b 	bl	8002118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	4619      	mov	r1, r3
 8001916:	4818      	ldr	r0, [pc, #96]	; (8001978 <HAL_UART_MspInit+0xe0>)
 8001918:	f000 fbfe 	bl	8002118 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_UART_MspInit+0xe4>)
 800191e:	4a18      	ldr	r2, [pc, #96]	; (8001980 <HAL_UART_MspInit+0xe8>)
 8001920:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <HAL_UART_MspInit+0xe4>)
 8001924:	2200      	movs	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <HAL_UART_MspInit+0xe4>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_UART_MspInit+0xe4>)
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_UART_MspInit+0xe4>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_UART_MspInit+0xe4>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_UART_MspInit+0xe4>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_UART_MspInit+0xe4>)
 8001948:	2200      	movs	r2, #0
 800194a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800194c:	480b      	ldr	r0, [pc, #44]	; (800197c <HAL_UART_MspInit+0xe4>)
 800194e:	f000 f9d3 	bl	8001cf8 <HAL_DMA_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001958:	f7ff fdf4 	bl	8001544 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_UART_MspInit+0xe4>)
 8001960:	639a      	str	r2, [r3, #56]	; 0x38
 8001962:	4a06      	ldr	r2, [pc, #24]	; (800197c <HAL_UART_MspInit+0xe4>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001968:	bf00      	nop
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40013800 	.word	0x40013800
 8001974:	40021000 	.word	0x40021000
 8001978:	40010800 	.word	0x40010800
 800197c:	20000324 	.word	0x20000324
 8001980:	40020058 	.word	0x40020058

08001984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001986:	490d      	ldr	r1, [pc, #52]	; (80019bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800199c:	4c0a      	ldr	r4, [pc, #40]	; (80019c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019aa:	f7ff ff45 	bl	8001838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f001 fdf3 	bl	8003598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019b2:	f7ff fd47 	bl	8001444 <main>
  bx lr
 80019b6:	4770      	bx	lr
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80019c0:	080042c0 	.word	0x080042c0
  ldr r2, =_sbss
 80019c4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80019c8:	200003c0 	.word	0x200003c0

080019cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC1_2_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_Init+0x28>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_Init+0x28>)
 80019da:	f043 0310 	orr.w	r3, r3, #16
 80019de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 f947 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	200f      	movs	r0, #15
 80019e8:	f000 f808 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fe5a 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40022000 	.word	0x40022000

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f95f 	bl	8001cde <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f927 	bl	8001c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000010 	.word	0x20000010
 8001a54:	20000018 	.word	0x20000018
 8001a58:	20000014 	.word	0x20000014

08001a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_IncTick+0x1c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_IncTick+0x20>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a03      	ldr	r2, [pc, #12]	; (8001a7c <HAL_IncTick+0x20>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	20000018 	.word	0x20000018
 8001a7c:	200003ac 	.word	0x200003ac

08001a80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <HAL_GetTick+0x10>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	200003ac 	.word	0x200003ac

08001a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff fff0 	bl	8001a80 <HAL_GetTick>
 8001aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d005      	beq.n	8001aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_Delay+0x44>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aba:	bf00      	nop
 8001abc:	f7ff ffe0 	bl	8001a80 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d8f7      	bhi.n	8001abc <HAL_Delay+0x28>
  {
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000018 	.word	0x20000018

08001adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af8:	4013      	ands	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0e:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	60d3      	str	r3, [r2, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <__NVIC_GetPriorityGrouping+0x18>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 0307 	and.w	r3, r3, #7
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	db0b      	blt.n	8001b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	f003 021f 	and.w	r2, r3, #31
 8001b58:	4906      	ldr	r1, [pc, #24]	; (8001b74 <__NVIC_EnableIRQ+0x34>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	095b      	lsrs	r3, r3, #5
 8001b60:	2001      	movs	r0, #1
 8001b62:	fa00 f202 	lsl.w	r2, r0, r2
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	e000e100 	.word	0xe000e100

08001b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db0a      	blt.n	8001ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	490c      	ldr	r1, [pc, #48]	; (8001bc4 <__NVIC_SetPriority+0x4c>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba0:	e00a      	b.n	8001bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4908      	ldr	r1, [pc, #32]	; (8001bc8 <__NVIC_SetPriority+0x50>)
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	3b04      	subs	r3, #4
 8001bb0:	0112      	lsls	r2, r2, #4
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	761a      	strb	r2, [r3, #24]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f1c3 0307 	rsb	r3, r3, #7
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	bf28      	it	cs
 8001bea:	2304      	movcs	r3, #4
 8001bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d902      	bls.n	8001bfc <NVIC_EncodePriority+0x30>
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3b03      	subs	r3, #3
 8001bfa:	e000      	b.n	8001bfe <NVIC_EncodePriority+0x32>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	401a      	ands	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43d9      	mvns	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	4313      	orrs	r3, r2
         );
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c40:	d301      	bcc.n	8001c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00f      	b.n	8001c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <SysTick_Config+0x40>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4e:	210f      	movs	r1, #15
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f7ff ff90 	bl	8001b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <SysTick_Config+0x40>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <SysTick_Config+0x40>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff2d 	bl	8001adc <__NVIC_SetPriorityGrouping>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9c:	f7ff ff42 	bl	8001b24 <__NVIC_GetPriorityGrouping>
 8001ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	6978      	ldr	r0, [r7, #20]
 8001ca8:	f7ff ff90 	bl	8001bcc <NVIC_EncodePriority>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff5f 	bl	8001b78 <__NVIC_SetPriority>
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff35 	bl	8001b40 <__NVIC_EnableIRQ>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ffa2 	bl	8001c30 <SysTick_Config>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e043      	b.n	8001d96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <HAL_DMA_Init+0xa8>)
 8001d16:	4413      	add	r3, r2
 8001d18:	4a22      	ldr	r2, [pc, #136]	; (8001da4 <HAL_DMA_Init+0xac>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	009a      	lsls	r2, r3, #2
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a1f      	ldr	r2, [pc, #124]	; (8001da8 <HAL_DMA_Init+0xb0>)
 8001d2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	bffdfff8 	.word	0xbffdfff8
 8001da4:	cccccccd 	.word	0xcccccccd
 8001da8:	40020000 	.word	0x40020000

08001dac <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d008      	beq.n	8001dd4 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e020      	b.n	8001e16 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 020e 	bic.w	r2, r2, #14
 8001de2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001e02:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d005      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	e051      	b.n	8001ee6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 020e 	bic.w	r2, r2, #14
 8001e50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0201 	bic.w	r2, r2, #1
 8001e60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a22      	ldr	r2, [pc, #136]	; (8001ef0 <HAL_DMA_Abort_IT+0xd0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d029      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0xa0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a20      	ldr	r2, [pc, #128]	; (8001ef4 <HAL_DMA_Abort_IT+0xd4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d022      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x9c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <HAL_DMA_Abort_IT+0xd8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d01a      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x96>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_DMA_Abort_IT+0xdc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d012      	beq.n	8001eb0 <HAL_DMA_Abort_IT+0x90>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_DMA_Abort_IT+0xe0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d00a      	beq.n	8001eaa <HAL_DMA_Abort_IT+0x8a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <HAL_DMA_Abort_IT+0xe4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d102      	bne.n	8001ea4 <HAL_DMA_Abort_IT+0x84>
 8001e9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ea2:	e00e      	b.n	8001ec2 <HAL_DMA_Abort_IT+0xa2>
 8001ea4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ea8:	e00b      	b.n	8001ec2 <HAL_DMA_Abort_IT+0xa2>
 8001eaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eae:	e008      	b.n	8001ec2 <HAL_DMA_Abort_IT+0xa2>
 8001eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb4:	e005      	b.n	8001ec2 <HAL_DMA_Abort_IT+0xa2>
 8001eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eba:	e002      	b.n	8001ec2 <HAL_DMA_Abort_IT+0xa2>
 8001ebc:	2310      	movs	r3, #16
 8001ebe:	e000      	b.n	8001ec2 <HAL_DMA_Abort_IT+0xa2>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	4a11      	ldr	r2, [pc, #68]	; (8001f08 <HAL_DMA_Abort_IT+0xe8>)
 8001ec4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	4798      	blx	r3
    } 
  }
  return status;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40020008 	.word	0x40020008
 8001ef4:	4002001c 	.word	0x4002001c
 8001ef8:	40020030 	.word	0x40020030
 8001efc:	40020044 	.word	0x40020044
 8001f00:	40020058 	.word	0x40020058
 8001f04:	4002006c 	.word	0x4002006c
 8001f08:	40020000 	.word	0x40020000

08001f0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	2204      	movs	r2, #4
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d04f      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0xc8>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d04a      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d107      	bne.n	8001f5c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0204 	bic.w	r2, r2, #4
 8001f5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a66      	ldr	r2, [pc, #408]	; (80020fc <HAL_DMA_IRQHandler+0x1f0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d029      	beq.n	8001fba <HAL_DMA_IRQHandler+0xae>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a65      	ldr	r2, [pc, #404]	; (8002100 <HAL_DMA_IRQHandler+0x1f4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d022      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xaa>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a63      	ldr	r2, [pc, #396]	; (8002104 <HAL_DMA_IRQHandler+0x1f8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01a      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xa4>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a62      	ldr	r2, [pc, #392]	; (8002108 <HAL_DMA_IRQHandler+0x1fc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d012      	beq.n	8001faa <HAL_DMA_IRQHandler+0x9e>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a60      	ldr	r2, [pc, #384]	; (800210c <HAL_DMA_IRQHandler+0x200>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x98>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a5f      	ldr	r2, [pc, #380]	; (8002110 <HAL_DMA_IRQHandler+0x204>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d102      	bne.n	8001f9e <HAL_DMA_IRQHandler+0x92>
 8001f98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f9c:	e00e      	b.n	8001fbc <HAL_DMA_IRQHandler+0xb0>
 8001f9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fa2:	e00b      	b.n	8001fbc <HAL_DMA_IRQHandler+0xb0>
 8001fa4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fa8:	e008      	b.n	8001fbc <HAL_DMA_IRQHandler+0xb0>
 8001faa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fae:	e005      	b.n	8001fbc <HAL_DMA_IRQHandler+0xb0>
 8001fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb4:	e002      	b.n	8001fbc <HAL_DMA_IRQHandler+0xb0>
 8001fb6:	2340      	movs	r3, #64	; 0x40
 8001fb8:	e000      	b.n	8001fbc <HAL_DMA_IRQHandler+0xb0>
 8001fba:	2304      	movs	r3, #4
 8001fbc:	4a55      	ldr	r2, [pc, #340]	; (8002114 <HAL_DMA_IRQHandler+0x208>)
 8001fbe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8094 	beq.w	80020f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fd2:	e08e      	b.n	80020f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	2202      	movs	r2, #2
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d056      	beq.n	8002092 <HAL_DMA_IRQHandler+0x186>
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d051      	beq.n	8002092 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10b      	bne.n	8002014 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 020a 	bic.w	r2, r2, #10
 800200a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a38      	ldr	r2, [pc, #224]	; (80020fc <HAL_DMA_IRQHandler+0x1f0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d029      	beq.n	8002072 <HAL_DMA_IRQHandler+0x166>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a37      	ldr	r2, [pc, #220]	; (8002100 <HAL_DMA_IRQHandler+0x1f4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d022      	beq.n	800206e <HAL_DMA_IRQHandler+0x162>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a35      	ldr	r2, [pc, #212]	; (8002104 <HAL_DMA_IRQHandler+0x1f8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01a      	beq.n	8002068 <HAL_DMA_IRQHandler+0x15c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a34      	ldr	r2, [pc, #208]	; (8002108 <HAL_DMA_IRQHandler+0x1fc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d012      	beq.n	8002062 <HAL_DMA_IRQHandler+0x156>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a32      	ldr	r2, [pc, #200]	; (800210c <HAL_DMA_IRQHandler+0x200>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00a      	beq.n	800205c <HAL_DMA_IRQHandler+0x150>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a31      	ldr	r2, [pc, #196]	; (8002110 <HAL_DMA_IRQHandler+0x204>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d102      	bne.n	8002056 <HAL_DMA_IRQHandler+0x14a>
 8002050:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002054:	e00e      	b.n	8002074 <HAL_DMA_IRQHandler+0x168>
 8002056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800205a:	e00b      	b.n	8002074 <HAL_DMA_IRQHandler+0x168>
 800205c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002060:	e008      	b.n	8002074 <HAL_DMA_IRQHandler+0x168>
 8002062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002066:	e005      	b.n	8002074 <HAL_DMA_IRQHandler+0x168>
 8002068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800206c:	e002      	b.n	8002074 <HAL_DMA_IRQHandler+0x168>
 800206e:	2320      	movs	r3, #32
 8002070:	e000      	b.n	8002074 <HAL_DMA_IRQHandler+0x168>
 8002072:	2302      	movs	r3, #2
 8002074:	4a27      	ldr	r2, [pc, #156]	; (8002114 <HAL_DMA_IRQHandler+0x208>)
 8002076:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	2b00      	cmp	r3, #0
 8002086:	d034      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002090:	e02f      	b.n	80020f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2208      	movs	r2, #8
 8002098:	409a      	lsls	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d028      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x1e8>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d023      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 020e 	bic.w	r2, r2, #14
 80020ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	2101      	movs	r1, #1
 80020c6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d004      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	4798      	blx	r3
    }
  }
  return;
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
}
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40020008 	.word	0x40020008
 8002100:	4002001c 	.word	0x4002001c
 8002104:	40020030 	.word	0x40020030
 8002108:	40020044 	.word	0x40020044
 800210c:	40020058 	.word	0x40020058
 8002110:	4002006c 	.word	0x4002006c
 8002114:	40020000 	.word	0x40020000

08002118 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002118:	b480      	push	{r7}
 800211a:	b08b      	sub	sp, #44	; 0x2c
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212a:	e148      	b.n	80023be <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800212c:	2201      	movs	r2, #1
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	429a      	cmp	r2, r3
 8002146:	f040 8137 	bne.w	80023b8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4aa3      	ldr	r2, [pc, #652]	; (80023dc <HAL_GPIO_Init+0x2c4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d05e      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
 8002154:	4aa1      	ldr	r2, [pc, #644]	; (80023dc <HAL_GPIO_Init+0x2c4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d875      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 800215a:	4aa1      	ldr	r2, [pc, #644]	; (80023e0 <HAL_GPIO_Init+0x2c8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d058      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
 8002160:	4a9f      	ldr	r2, [pc, #636]	; (80023e0 <HAL_GPIO_Init+0x2c8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d86f      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 8002166:	4a9f      	ldr	r2, [pc, #636]	; (80023e4 <HAL_GPIO_Init+0x2cc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d052      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
 800216c:	4a9d      	ldr	r2, [pc, #628]	; (80023e4 <HAL_GPIO_Init+0x2cc>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d869      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 8002172:	4a9d      	ldr	r2, [pc, #628]	; (80023e8 <HAL_GPIO_Init+0x2d0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d04c      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
 8002178:	4a9b      	ldr	r2, [pc, #620]	; (80023e8 <HAL_GPIO_Init+0x2d0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d863      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 800217e:	4a9b      	ldr	r2, [pc, #620]	; (80023ec <HAL_GPIO_Init+0x2d4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d046      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
 8002184:	4a99      	ldr	r2, [pc, #612]	; (80023ec <HAL_GPIO_Init+0x2d4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d85d      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 800218a:	2b12      	cmp	r3, #18
 800218c:	d82a      	bhi.n	80021e4 <HAL_GPIO_Init+0xcc>
 800218e:	2b12      	cmp	r3, #18
 8002190:	d859      	bhi.n	8002246 <HAL_GPIO_Init+0x12e>
 8002192:	a201      	add	r2, pc, #4	; (adr r2, 8002198 <HAL_GPIO_Init+0x80>)
 8002194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002198:	08002213 	.word	0x08002213
 800219c:	080021ed 	.word	0x080021ed
 80021a0:	080021ff 	.word	0x080021ff
 80021a4:	08002241 	.word	0x08002241
 80021a8:	08002247 	.word	0x08002247
 80021ac:	08002247 	.word	0x08002247
 80021b0:	08002247 	.word	0x08002247
 80021b4:	08002247 	.word	0x08002247
 80021b8:	08002247 	.word	0x08002247
 80021bc:	08002247 	.word	0x08002247
 80021c0:	08002247 	.word	0x08002247
 80021c4:	08002247 	.word	0x08002247
 80021c8:	08002247 	.word	0x08002247
 80021cc:	08002247 	.word	0x08002247
 80021d0:	08002247 	.word	0x08002247
 80021d4:	08002247 	.word	0x08002247
 80021d8:	08002247 	.word	0x08002247
 80021dc:	080021f5 	.word	0x080021f5
 80021e0:	08002209 	.word	0x08002209
 80021e4:	4a82      	ldr	r2, [pc, #520]	; (80023f0 <HAL_GPIO_Init+0x2d8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021ea:	e02c      	b.n	8002246 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	623b      	str	r3, [r7, #32]
          break;
 80021f2:	e029      	b.n	8002248 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	3304      	adds	r3, #4
 80021fa:	623b      	str	r3, [r7, #32]
          break;
 80021fc:	e024      	b.n	8002248 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	3308      	adds	r3, #8
 8002204:	623b      	str	r3, [r7, #32]
          break;
 8002206:	e01f      	b.n	8002248 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	330c      	adds	r3, #12
 800220e:	623b      	str	r3, [r7, #32]
          break;
 8002210:	e01a      	b.n	8002248 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800221a:	2304      	movs	r3, #4
 800221c:	623b      	str	r3, [r7, #32]
          break;
 800221e:	e013      	b.n	8002248 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002228:	2308      	movs	r3, #8
 800222a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	611a      	str	r2, [r3, #16]
          break;
 8002232:	e009      	b.n	8002248 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002234:	2308      	movs	r3, #8
 8002236:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	615a      	str	r2, [r3, #20]
          break;
 800223e:	e003      	b.n	8002248 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
          break;
 8002244:	e000      	b.n	8002248 <HAL_GPIO_Init+0x130>
          break;
 8002246:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2bff      	cmp	r3, #255	; 0xff
 800224c:	d801      	bhi.n	8002252 <HAL_GPIO_Init+0x13a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	e001      	b.n	8002256 <HAL_GPIO_Init+0x13e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2bff      	cmp	r3, #255	; 0xff
 800225c:	d802      	bhi.n	8002264 <HAL_GPIO_Init+0x14c>
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	e002      	b.n	800226a <HAL_GPIO_Init+0x152>
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	3b08      	subs	r3, #8
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	210f      	movs	r1, #15
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	401a      	ands	r2, r3
 800227c:	6a39      	ldr	r1, [r7, #32]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	431a      	orrs	r2, r3
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8090 	beq.w	80023b8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002298:	4b56      	ldr	r3, [pc, #344]	; (80023f4 <HAL_GPIO_Init+0x2dc>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4a55      	ldr	r2, [pc, #340]	; (80023f4 <HAL_GPIO_Init+0x2dc>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6193      	str	r3, [r2, #24]
 80022a4:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_GPIO_Init+0x2dc>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022b0:	4a51      	ldr	r2, [pc, #324]	; (80023f8 <HAL_GPIO_Init+0x2e0>)
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	3302      	adds	r3, #2
 80022b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4013      	ands	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a49      	ldr	r2, [pc, #292]	; (80023fc <HAL_GPIO_Init+0x2e4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d00d      	beq.n	80022f8 <HAL_GPIO_Init+0x1e0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a48      	ldr	r2, [pc, #288]	; (8002400 <HAL_GPIO_Init+0x2e8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d007      	beq.n	80022f4 <HAL_GPIO_Init+0x1dc>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a47      	ldr	r2, [pc, #284]	; (8002404 <HAL_GPIO_Init+0x2ec>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d101      	bne.n	80022f0 <HAL_GPIO_Init+0x1d8>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e004      	b.n	80022fa <HAL_GPIO_Init+0x1e2>
 80022f0:	2303      	movs	r3, #3
 80022f2:	e002      	b.n	80022fa <HAL_GPIO_Init+0x1e2>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <HAL_GPIO_Init+0x1e2>
 80022f8:	2300      	movs	r3, #0
 80022fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fc:	f002 0203 	and.w	r2, r2, #3
 8002300:	0092      	lsls	r2, r2, #2
 8002302:	4093      	lsls	r3, r2
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800230a:	493b      	ldr	r1, [pc, #236]	; (80023f8 <HAL_GPIO_Init+0x2e0>)
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3302      	adds	r3, #2
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d006      	beq.n	8002332 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002324:	4b38      	ldr	r3, [pc, #224]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4937      	ldr	r1, [pc, #220]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]
 8002330:	e006      	b.n	8002340 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002332:	4b35      	ldr	r3, [pc, #212]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	43db      	mvns	r3, r3
 800233a:	4933      	ldr	r1, [pc, #204]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 800233c:	4013      	ands	r3, r2
 800233e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d006      	beq.n	800235a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800234c:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	492d      	ldr	r1, [pc, #180]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800235a:	4b2b      	ldr	r3, [pc, #172]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	43db      	mvns	r3, r3
 8002362:	4929      	ldr	r1, [pc, #164]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 8002364:	4013      	ands	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d006      	beq.n	8002382 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002374:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	4923      	ldr	r1, [pc, #140]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]
 8002380:	e006      	b.n	8002390 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002382:	4b21      	ldr	r3, [pc, #132]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	43db      	mvns	r3, r3
 800238a:	491f      	ldr	r1, [pc, #124]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 800238c:	4013      	ands	r3, r2
 800238e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d006      	beq.n	80023aa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	4919      	ldr	r1, [pc, #100]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60cb      	str	r3, [r1, #12]
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	4915      	ldr	r1, [pc, #84]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	3301      	adds	r3, #1
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f47f aeaf 	bne.w	800212c <HAL_GPIO_Init+0x14>
  }
}
 80023ce:	bf00      	nop
 80023d0:	bf00      	nop
 80023d2:	372c      	adds	r7, #44	; 0x2c
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	10320000 	.word	0x10320000
 80023e0:	10310000 	.word	0x10310000
 80023e4:	10220000 	.word	0x10220000
 80023e8:	10210000 	.word	0x10210000
 80023ec:	10120000 	.word	0x10120000
 80023f0:	10110000 	.word	0x10110000
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40010000 	.word	0x40010000
 80023fc:	40010800 	.word	0x40010800
 8002400:	40010c00 	.word	0x40010c00
 8002404:	40011000 	.word	0x40011000
 8002408:	40010400 	.word	0x40010400

0800240c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
 8002418:	4613      	mov	r3, r2
 800241a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800241c:	787b      	ldrb	r3, [r7, #1]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002428:	e003      	b.n	8002432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800242a:	887b      	ldrh	r3, [r7, #2]
 800242c:	041a      	lsls	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	611a      	str	r2, [r3, #16]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fd ff18 	bl	8000290 <HAL_GPIO_EXTI_Callback>
  }
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40010400 	.word	0x40010400

0800246c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e26c      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8087 	beq.w	800259a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800248c:	4b92      	ldr	r3, [pc, #584]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b04      	cmp	r3, #4
 8002496:	d00c      	beq.n	80024b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002498:	4b8f      	ldr	r3, [pc, #572]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d112      	bne.n	80024ca <HAL_RCC_OscConfig+0x5e>
 80024a4:	4b8c      	ldr	r3, [pc, #560]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b0:	d10b      	bne.n	80024ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b2:	4b89      	ldr	r3, [pc, #548]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d06c      	beq.n	8002598 <HAL_RCC_OscConfig+0x12c>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d168      	bne.n	8002598 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e246      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x76>
 80024d4:	4b80      	ldr	r3, [pc, #512]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a7f      	ldr	r2, [pc, #508]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 80024da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	e02e      	b.n	8002540 <HAL_RCC_OscConfig+0xd4>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x98>
 80024ea:	4b7b      	ldr	r3, [pc, #492]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7a      	ldr	r2, [pc, #488]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b78      	ldr	r3, [pc, #480]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a77      	ldr	r2, [pc, #476]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e01d      	b.n	8002540 <HAL_RCC_OscConfig+0xd4>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0xbc>
 800250e:	4b72      	ldr	r3, [pc, #456]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a71      	ldr	r2, [pc, #452]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 8002514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a6e      	ldr	r2, [pc, #440]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0xd4>
 8002528:	4b6b      	ldr	r3, [pc, #428]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a6a      	ldr	r2, [pc, #424]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 800252e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b68      	ldr	r3, [pc, #416]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a67      	ldr	r2, [pc, #412]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 800253a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7ff fa9a 	bl	8001a80 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002550:	f7ff fa96 	bl	8001a80 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	; 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e1fa      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b5d      	ldr	r3, [pc, #372]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0xe4>
 800256e:	e014      	b.n	800259a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7ff fa86 	bl	8001a80 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002578:	f7ff fa82 	bl	8001a80 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e1e6      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	4b53      	ldr	r3, [pc, #332]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x10c>
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d063      	beq.n	800266e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025a6:	4b4c      	ldr	r3, [pc, #304]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025b2:	4b49      	ldr	r3, [pc, #292]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d11c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x18c>
 80025be:	4b46      	ldr	r3, [pc, #280]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d116      	bne.n	80025f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	4b43      	ldr	r3, [pc, #268]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_RCC_OscConfig+0x176>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e1ba      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e2:	4b3d      	ldr	r3, [pc, #244]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4939      	ldr	r1, [pc, #228]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	e03a      	b.n	800266e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002600:	4b36      	ldr	r3, [pc, #216]	; (80026dc <HAL_RCC_OscConfig+0x270>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7ff fa3b 	bl	8001a80 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800260e:	f7ff fa37 	bl	8001a80 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e19b      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4927      	ldr	r1, [pc, #156]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]
 8002640:	e015      	b.n	800266e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002642:	4b26      	ldr	r3, [pc, #152]	; (80026dc <HAL_RCC_OscConfig+0x270>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff fa1a 	bl	8001a80 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002650:	f7ff fa16 	bl	8001a80 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e17a      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d03a      	beq.n	80026f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d019      	beq.n	80026b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002682:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002688:	f7ff f9fa 	bl	8001a80 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002690:	f7ff f9f6 	bl	8001a80 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e15a      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a2:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026ae:	2001      	movs	r0, #1
 80026b0:	f000 fad8 	bl	8002c64 <RCC_Delay>
 80026b4:	e01c      	b.n	80026f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <HAL_RCC_OscConfig+0x274>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026bc:	f7ff f9e0 	bl	8001a80 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c2:	e00f      	b.n	80026e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c4:	f7ff f9dc 	bl	8001a80 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d908      	bls.n	80026e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e140      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
 80026dc:	42420000 	.word	0x42420000
 80026e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e4:	4b9e      	ldr	r3, [pc, #632]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1e9      	bne.n	80026c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80a6 	beq.w	800284a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002702:	4b97      	ldr	r3, [pc, #604]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10d      	bne.n	800272a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	4b94      	ldr	r3, [pc, #592]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a93      	ldr	r2, [pc, #588]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	61d3      	str	r3, [r2, #28]
 800271a:	4b91      	ldr	r3, [pc, #580]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272a:	4b8e      	ldr	r3, [pc, #568]	; (8002964 <HAL_RCC_OscConfig+0x4f8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d118      	bne.n	8002768 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002736:	4b8b      	ldr	r3, [pc, #556]	; (8002964 <HAL_RCC_OscConfig+0x4f8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a8a      	ldr	r2, [pc, #552]	; (8002964 <HAL_RCC_OscConfig+0x4f8>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002742:	f7ff f99d 	bl	8001a80 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274a:	f7ff f999 	bl	8001a80 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b64      	cmp	r3, #100	; 0x64
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e0fd      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	4b81      	ldr	r3, [pc, #516]	; (8002964 <HAL_RCC_OscConfig+0x4f8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x312>
 8002770:	4b7b      	ldr	r3, [pc, #492]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4a7a      	ldr	r2, [pc, #488]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6213      	str	r3, [r2, #32]
 800277c:	e02d      	b.n	80027da <HAL_RCC_OscConfig+0x36e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x334>
 8002786:	4b76      	ldr	r3, [pc, #472]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4a75      	ldr	r2, [pc, #468]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	6213      	str	r3, [r2, #32]
 8002792:	4b73      	ldr	r3, [pc, #460]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4a72      	ldr	r2, [pc, #456]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	f023 0304 	bic.w	r3, r3, #4
 800279c:	6213      	str	r3, [r2, #32]
 800279e:	e01c      	b.n	80027da <HAL_RCC_OscConfig+0x36e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	2b05      	cmp	r3, #5
 80027a6:	d10c      	bne.n	80027c2 <HAL_RCC_OscConfig+0x356>
 80027a8:	4b6d      	ldr	r3, [pc, #436]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4a6c      	ldr	r2, [pc, #432]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	f043 0304 	orr.w	r3, r3, #4
 80027b2:	6213      	str	r3, [r2, #32]
 80027b4:	4b6a      	ldr	r3, [pc, #424]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	4a69      	ldr	r2, [pc, #420]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6213      	str	r3, [r2, #32]
 80027c0:	e00b      	b.n	80027da <HAL_RCC_OscConfig+0x36e>
 80027c2:	4b67      	ldr	r3, [pc, #412]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4a66      	ldr	r2, [pc, #408]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6213      	str	r3, [r2, #32]
 80027ce:	4b64      	ldr	r3, [pc, #400]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	4a63      	ldr	r2, [pc, #396]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	f023 0304 	bic.w	r3, r3, #4
 80027d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d015      	beq.n	800280e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e2:	f7ff f94d 	bl	8001a80 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7ff f949 	bl	8001a80 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e0ab      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	4b57      	ldr	r3, [pc, #348]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0ee      	beq.n	80027ea <HAL_RCC_OscConfig+0x37e>
 800280c:	e014      	b.n	8002838 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7ff f937 	bl	8001a80 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7ff f933 	bl	8001a80 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e095      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282c:	4b4c      	ldr	r3, [pc, #304]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1ee      	bne.n	8002816 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002838:	7dfb      	ldrb	r3, [r7, #23]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d105      	bne.n	800284a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283e:	4b48      	ldr	r3, [pc, #288]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4a47      	ldr	r2, [pc, #284]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 8002844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002848:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8081 	beq.w	8002956 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002854:	4b42      	ldr	r3, [pc, #264]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d061      	beq.n	8002924 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d146      	bne.n	80028f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002868:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <HAL_RCC_OscConfig+0x4fc>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7ff f907 	bl	8001a80 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002876:	f7ff f903 	bl	8001a80 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e067      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002888:	4b35      	ldr	r3, [pc, #212]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f0      	bne.n	8002876 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289c:	d108      	bne.n	80028b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800289e:	4b30      	ldr	r3, [pc, #192]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	492d      	ldr	r1, [pc, #180]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b0:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a19      	ldr	r1, [r3, #32]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	430b      	orrs	r3, r1
 80028c2:	4927      	ldr	r1, [pc, #156]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c8:	4b27      	ldr	r3, [pc, #156]	; (8002968 <HAL_RCC_OscConfig+0x4fc>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ce:	f7ff f8d7 	bl	8001a80 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d6:	f7ff f8d3 	bl	8001a80 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e037      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x46a>
 80028f4:	e02f      	b.n	8002956 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <HAL_RCC_OscConfig+0x4fc>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7ff f8c0 	bl	8001a80 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002904:	f7ff f8bc 	bl	8001a80 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e020      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x498>
 8002922:	e018      	b.n	8002956 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e013      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_RCC_OscConfig+0x4f4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	429a      	cmp	r2, r3
 8002942:	d106      	bne.n	8002952 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d001      	beq.n	8002956 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	40007000 	.word	0x40007000
 8002968:	42420060 	.word	0x42420060

0800296c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0d0      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002980:	4b6a      	ldr	r3, [pc, #424]	; (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d910      	bls.n	80029b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b67      	ldr	r3, [pc, #412]	; (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 0207 	bic.w	r2, r3, #7
 8002996:	4965      	ldr	r1, [pc, #404]	; (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b63      	ldr	r3, [pc, #396]	; (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0b8      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c8:	4b59      	ldr	r3, [pc, #356]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4a58      	ldr	r2, [pc, #352]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e0:	4b53      	ldr	r3, [pc, #332]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a52      	ldr	r2, [pc, #328]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ec:	4b50      	ldr	r3, [pc, #320]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	494d      	ldr	r1, [pc, #308]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d040      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d115      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e07f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2a:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e073      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3a:	4b3d      	ldr	r3, [pc, #244]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e06b      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4a:	4b39      	ldr	r3, [pc, #228]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f023 0203 	bic.w	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4936      	ldr	r1, [pc, #216]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a5c:	f7ff f810 	bl	8001a80 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a64:	f7ff f80c 	bl	8001a80 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e053      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 020c 	and.w	r2, r3, #12
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d1eb      	bne.n	8002a64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a8c:	4b27      	ldr	r3, [pc, #156]	; (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d210      	bcs.n	8002abc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9a:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 0207 	bic.w	r2, r3, #7
 8002aa2:	4922      	ldr	r1, [pc, #136]	; (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e032      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4916      	ldr	r1, [pc, #88]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ae6:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	490e      	ldr	r1, [pc, #56]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002afa:	f000 f821 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	490a      	ldr	r1, [pc, #40]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0c:	5ccb      	ldrb	r3, [r1, r3]
 8002b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b12:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <HAL_RCC_ClockConfig+0x1cc>)
 8002b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_RCC_ClockConfig+0x1d0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe ff6e 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40022000 	.word	0x40022000
 8002b30:	40021000 	.word	0x40021000
 8002b34:	0800426c 	.word	0x0800426c
 8002b38:	20000010 	.word	0x20000010
 8002b3c:	20000014 	.word	0x20000014

08002b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	b490      	push	{r4, r7}
 8002b42:	b08a      	sub	sp, #40	; 0x28
 8002b44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b46:	4b2a      	ldr	r3, [pc, #168]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b48:	1d3c      	adds	r4, r7, #4
 8002b4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b50:	f240 2301 	movw	r3, #513	; 0x201
 8002b54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b6a:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d002      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x40>
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0x46>
 8002b7e:	e02d      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b82:	623b      	str	r3, [r7, #32]
      break;
 8002b84:	e02d      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	0c9b      	lsrs	r3, r3, #18
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b92:	4413      	add	r3, r2
 8002b94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b98:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d013      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	0c5b      	lsrs	r3, r3, #17
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bb8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	4a0e      	ldr	r2, [pc, #56]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bbe:	fb02 f203 	mul.w	r2, r2, r3
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	e004      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	4a0b      	ldr	r2, [pc, #44]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bd0:	fb02 f303 	mul.w	r3, r2, r3
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	623b      	str	r3, [r7, #32]
      break;
 8002bda:	e002      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bde:	623b      	str	r3, [r7, #32]
      break;
 8002be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be2:	6a3b      	ldr	r3, [r7, #32]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3728      	adds	r7, #40	; 0x28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc90      	pop	{r4, r7}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	08003f74 	.word	0x08003f74
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	007a1200 	.word	0x007a1200
 8002bfc:	003d0900 	.word	0x003d0900

08002c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c04:	4b02      	ldr	r3, [pc, #8]	; (8002c10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	20000010 	.word	0x20000010

08002c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c18:	f7ff fff2 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4903      	ldr	r1, [pc, #12]	; (8002c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	0800427c 	.word	0x0800427c

08002c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c40:	f7ff ffde 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	0adb      	lsrs	r3, r3, #11
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4903      	ldr	r1, [pc, #12]	; (8002c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	0800427c 	.word	0x0800427c

08002c64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <RCC_Delay+0x34>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <RCC_Delay+0x38>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0a5b      	lsrs	r3, r3, #9
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c80:	bf00      	nop
  }
  while (Delay --);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1e5a      	subs	r2, r3, #1
 8002c86:	60fa      	str	r2, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f9      	bne.n	8002c80 <RCC_Delay+0x1c>
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	20000010 	.word	0x20000010
 8002c9c:	10624dd3 	.word	0x10624dd3

08002ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e076      	b.n	8002da0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d108      	bne.n	8002ccc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc2:	d009      	beq.n	8002cd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]
 8002cca:	e005      	b.n	8002cd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fc62 	bl	80015bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5c:	ea42 0103 	orr.w	r1, r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	0c1a      	lsrs	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f002 0204 	and.w	r2, r2, #4
 8002d7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e03f      	b.n	8002e3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fe fd62 	bl	8001898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2224      	movs	r2, #36	; 0x24
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fb3f 	bl	8003470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	; 0x28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10d      	bne.n	8002e96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_UART_IRQHandler+0x52>
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fa44 	bl	800331c <UART_Receive_IT>
      return;
 8002e94:	e17b      	b.n	800318e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80b1 	beq.w	8003000 <HAL_UART_IRQHandler+0x1bc>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d105      	bne.n	8002eb4 <HAL_UART_IRQHandler+0x70>
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 80a6 	beq.w	8003000 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_UART_IRQHandler+0x90>
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f043 0201 	orr.w	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_UART_IRQHandler+0xb0>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f043 0202 	orr.w	r2, r3, #2
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_UART_IRQHandler+0xd0>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f043 0204 	orr.w	r2, r3, #4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00f      	beq.n	8002f3e <HAL_UART_IRQHandler+0xfa>
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d104      	bne.n	8002f32 <HAL_UART_IRQHandler+0xee>
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f043 0208 	orr.w	r2, r3, #8
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 811e 	beq.w	8003184 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_UART_IRQHandler+0x11e>
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f9dd 	bl	800331c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf14      	ite	ne
 8002f70:	2301      	movne	r3, #1
 8002f72:	2300      	moveq	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d102      	bne.n	8002f8a <HAL_UART_IRQHandler+0x146>
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d031      	beq.n	8002fee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f91f 	bl	80031ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d023      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d013      	beq.n	8002fde <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	4a76      	ldr	r2, [pc, #472]	; (8003194 <HAL_UART_IRQHandler+0x350>)
 8002fbc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe ff2c 	bl	8001e20 <HAL_DMA_Abort_IT>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d016      	beq.n	8002ffc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fdc:	e00e      	b.n	8002ffc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f8ec 	bl	80031bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe4:	e00a      	b.n	8002ffc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f8e8 	bl	80031bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fec:	e006      	b.n	8002ffc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f8e4 	bl	80031bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002ffa:	e0c3      	b.n	8003184 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffc:	bf00      	nop
    return;
 8002ffe:	e0c1      	b.n	8003184 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	2b01      	cmp	r3, #1
 8003006:	f040 80a1 	bne.w	800314c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 809b 	beq.w	800314c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8095 	beq.w	800314c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d04e      	beq.n	80030e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003050:	8a3b      	ldrh	r3, [r7, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 8098 	beq.w	8003188 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800305c:	8a3a      	ldrh	r2, [r7, #16]
 800305e:	429a      	cmp	r2, r3
 8003060:	f080 8092 	bcs.w	8003188 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	8a3a      	ldrh	r2, [r7, #16]
 8003068:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b20      	cmp	r3, #32
 8003072:	d02b      	beq.n	80030cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003082:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0210 	bic.w	r2, r2, #16
 80030c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe fe70 	bl	8001dac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	b29b      	uxth	r3, r3
 80030da:	4619      	mov	r1, r3
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7fd ffc1 	bl	8001064 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80030e2:	e051      	b.n	8003188 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d047      	beq.n	800318c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80030fc:	8a7b      	ldrh	r3, [r7, #18]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d044      	beq.n	800318c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003110:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0210 	bic.w	r2, r2, #16
 800313e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003140:	8a7b      	ldrh	r3, [r7, #18]
 8003142:	4619      	mov	r1, r3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7fd ff8d 	bl	8001064 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800314a:	e01f      	b.n	800318c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_UART_IRQHandler+0x324>
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f874 	bl	800324e <UART_Transmit_IT>
    return;
 8003166:	e012      	b.n	800318e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00d      	beq.n	800318e <HAL_UART_IRQHandler+0x34a>
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f8b5 	bl	80032ec <UART_EndTransmit_IT>
    return;
 8003182:	e004      	b.n	800318e <HAL_UART_IRQHandler+0x34a>
    return;
 8003184:	bf00      	nop
 8003186:	e002      	b.n	800318e <HAL_UART_IRQHandler+0x34a>
      return;
 8003188:	bf00      	nop
 800318a:	e000      	b.n	800318e <HAL_UART_IRQHandler+0x34a>
      return;
 800318c:	bf00      	nop
  }
}
 800318e:	3728      	adds	r7, #40	; 0x28
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	08003227 	.word	0x08003227

08003198 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d107      	bne.n	800320e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0210 	bic.w	r2, r2, #16
 800320c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr

08003226 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7ff ffbb 	bl	80031bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800324e:	b480      	push	{r7}
 8003250:	b085      	sub	sp, #20
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b21      	cmp	r3, #33	; 0x21
 8003260:	d13e      	bne.n	80032e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326a:	d114      	bne.n	8003296 <UART_Transmit_IT+0x48>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d110      	bne.n	8003296 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003288:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	1c9a      	adds	r2, r3, #2
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	621a      	str	r2, [r3, #32]
 8003294:	e008      	b.n	80032a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	1c59      	adds	r1, r3, #1
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6211      	str	r1, [r2, #32]
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4619      	mov	r1, r3
 80032b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10f      	bne.n	80032dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003302:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ff43 	bl	8003198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b22      	cmp	r3, #34	; 0x22
 800332e:	f040 8099 	bne.w	8003464 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333a:	d117      	bne.n	800336c <UART_Receive_IT+0x50>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d113      	bne.n	800336c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	b29b      	uxth	r3, r3
 8003356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335a:	b29a      	uxth	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	1c9a      	adds	r2, r3, #2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
 800336a:	e026      	b.n	80033ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337e:	d007      	beq.n	8003390 <UART_Receive_IT+0x74>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <UART_Receive_IT+0x82>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d106      	bne.n	800339e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	b2da      	uxtb	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	e008      	b.n	80033b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	4619      	mov	r1, r3
 80033c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d148      	bne.n	8003460 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0220 	bic.w	r2, r2, #32
 80033dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	2b01      	cmp	r3, #1
 800340c:	d123      	bne.n	8003456 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0210 	bic.w	r2, r2, #16
 8003422:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b10      	cmp	r3, #16
 8003430:	d10a      	bne.n	8003448 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800344c:	4619      	mov	r1, r3
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fd fe08 	bl	8001064 <HAL_UARTEx_RxEventCallback>
 8003454:	e002      	b.n	800345c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff fea7 	bl	80031aa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e002      	b.n	8003466 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	e000      	b.n	8003466 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003464:	2302      	movs	r3, #2
  }
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034aa:	f023 030c 	bic.w	r3, r3, #12
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	430b      	orrs	r3, r1
 80034b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2c      	ldr	r2, [pc, #176]	; (8003584 <UART_SetConfig+0x114>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d103      	bne.n	80034e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034d8:	f7ff fbb0 	bl	8002c3c <HAL_RCC_GetPCLK2Freq>
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	e002      	b.n	80034e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034e0:	f7ff fb98 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 80034e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	009a      	lsls	r2, r3, #2
 80034f0:	441a      	add	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	4a22      	ldr	r2, [pc, #136]	; (8003588 <UART_SetConfig+0x118>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	0119      	lsls	r1, r3, #4
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	009a      	lsls	r2, r3, #2
 8003510:	441a      	add	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	fbb2 f2f3 	udiv	r2, r2, r3
 800351c:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <UART_SetConfig+0x118>)
 800351e:	fba3 0302 	umull	r0, r3, r3, r2
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	2064      	movs	r0, #100	; 0x64
 8003526:	fb00 f303 	mul.w	r3, r0, r3
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	3332      	adds	r3, #50	; 0x32
 8003530:	4a15      	ldr	r2, [pc, #84]	; (8003588 <UART_SetConfig+0x118>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800353c:	4419      	add	r1, r3
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009a      	lsls	r2, r3, #2
 8003548:	441a      	add	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	fbb2 f2f3 	udiv	r2, r2, r3
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <UART_SetConfig+0x118>)
 8003556:	fba3 0302 	umull	r0, r3, r3, r2
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2064      	movs	r0, #100	; 0x64
 800355e:	fb00 f303 	mul.w	r3, r0, r3
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	3332      	adds	r3, #50	; 0x32
 8003568:	4a07      	ldr	r2, [pc, #28]	; (8003588 <UART_SetConfig+0x118>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	f003 020f 	and.w	r2, r3, #15
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	440a      	add	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40013800 	.word	0x40013800
 8003588:	51eb851f 	.word	0x51eb851f

0800358c <__errno>:
 800358c:	4b01      	ldr	r3, [pc, #4]	; (8003594 <__errno+0x8>)
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	2000001c 	.word	0x2000001c

08003598 <__libc_init_array>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	2600      	movs	r6, #0
 800359c:	4d0c      	ldr	r5, [pc, #48]	; (80035d0 <__libc_init_array+0x38>)
 800359e:	4c0d      	ldr	r4, [pc, #52]	; (80035d4 <__libc_init_array+0x3c>)
 80035a0:	1b64      	subs	r4, r4, r5
 80035a2:	10a4      	asrs	r4, r4, #2
 80035a4:	42a6      	cmp	r6, r4
 80035a6:	d109      	bne.n	80035bc <__libc_init_array+0x24>
 80035a8:	f000 fc5c 	bl	8003e64 <_init>
 80035ac:	2600      	movs	r6, #0
 80035ae:	4d0a      	ldr	r5, [pc, #40]	; (80035d8 <__libc_init_array+0x40>)
 80035b0:	4c0a      	ldr	r4, [pc, #40]	; (80035dc <__libc_init_array+0x44>)
 80035b2:	1b64      	subs	r4, r4, r5
 80035b4:	10a4      	asrs	r4, r4, #2
 80035b6:	42a6      	cmp	r6, r4
 80035b8:	d105      	bne.n	80035c6 <__libc_init_array+0x2e>
 80035ba:	bd70      	pop	{r4, r5, r6, pc}
 80035bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c0:	4798      	blx	r3
 80035c2:	3601      	adds	r6, #1
 80035c4:	e7ee      	b.n	80035a4 <__libc_init_array+0xc>
 80035c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ca:	4798      	blx	r3
 80035cc:	3601      	adds	r6, #1
 80035ce:	e7f2      	b.n	80035b6 <__libc_init_array+0x1e>
 80035d0:	080042b8 	.word	0x080042b8
 80035d4:	080042b8 	.word	0x080042b8
 80035d8:	080042b8 	.word	0x080042b8
 80035dc:	080042bc 	.word	0x080042bc

080035e0 <memcpy>:
 80035e0:	440a      	add	r2, r1
 80035e2:	4291      	cmp	r1, r2
 80035e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80035e8:	d100      	bne.n	80035ec <memcpy+0xc>
 80035ea:	4770      	bx	lr
 80035ec:	b510      	push	{r4, lr}
 80035ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035f2:	4291      	cmp	r1, r2
 80035f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035f8:	d1f9      	bne.n	80035ee <memcpy+0xe>
 80035fa:	bd10      	pop	{r4, pc}

080035fc <memset>:
 80035fc:	4603      	mov	r3, r0
 80035fe:	4402      	add	r2, r0
 8003600:	4293      	cmp	r3, r2
 8003602:	d100      	bne.n	8003606 <memset+0xa>
 8003604:	4770      	bx	lr
 8003606:	f803 1b01 	strb.w	r1, [r3], #1
 800360a:	e7f9      	b.n	8003600 <memset+0x4>

0800360c <siprintf>:
 800360c:	b40e      	push	{r1, r2, r3}
 800360e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003612:	b500      	push	{lr}
 8003614:	b09c      	sub	sp, #112	; 0x70
 8003616:	ab1d      	add	r3, sp, #116	; 0x74
 8003618:	9002      	str	r0, [sp, #8]
 800361a:	9006      	str	r0, [sp, #24]
 800361c:	9107      	str	r1, [sp, #28]
 800361e:	9104      	str	r1, [sp, #16]
 8003620:	4808      	ldr	r0, [pc, #32]	; (8003644 <siprintf+0x38>)
 8003622:	4909      	ldr	r1, [pc, #36]	; (8003648 <siprintf+0x3c>)
 8003624:	f853 2b04 	ldr.w	r2, [r3], #4
 8003628:	9105      	str	r1, [sp, #20]
 800362a:	6800      	ldr	r0, [r0, #0]
 800362c:	a902      	add	r1, sp, #8
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	f000 f868 	bl	8003704 <_svfiprintf_r>
 8003634:	2200      	movs	r2, #0
 8003636:	9b02      	ldr	r3, [sp, #8]
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	b01c      	add	sp, #112	; 0x70
 800363c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003640:	b003      	add	sp, #12
 8003642:	4770      	bx	lr
 8003644:	2000001c 	.word	0x2000001c
 8003648:	ffff0208 	.word	0xffff0208

0800364c <__ssputs_r>:
 800364c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003650:	688e      	ldr	r6, [r1, #8]
 8003652:	4682      	mov	sl, r0
 8003654:	429e      	cmp	r6, r3
 8003656:	460c      	mov	r4, r1
 8003658:	4690      	mov	r8, r2
 800365a:	461f      	mov	r7, r3
 800365c:	d838      	bhi.n	80036d0 <__ssputs_r+0x84>
 800365e:	898a      	ldrh	r2, [r1, #12]
 8003660:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003664:	d032      	beq.n	80036cc <__ssputs_r+0x80>
 8003666:	6825      	ldr	r5, [r4, #0]
 8003668:	6909      	ldr	r1, [r1, #16]
 800366a:	3301      	adds	r3, #1
 800366c:	eba5 0901 	sub.w	r9, r5, r1
 8003670:	6965      	ldr	r5, [r4, #20]
 8003672:	444b      	add	r3, r9
 8003674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003678:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800367c:	106d      	asrs	r5, r5, #1
 800367e:	429d      	cmp	r5, r3
 8003680:	bf38      	it	cc
 8003682:	461d      	movcc	r5, r3
 8003684:	0553      	lsls	r3, r2, #21
 8003686:	d531      	bpl.n	80036ec <__ssputs_r+0xa0>
 8003688:	4629      	mov	r1, r5
 800368a:	f000 fb45 	bl	8003d18 <_malloc_r>
 800368e:	4606      	mov	r6, r0
 8003690:	b950      	cbnz	r0, 80036a8 <__ssputs_r+0x5c>
 8003692:	230c      	movs	r3, #12
 8003694:	f04f 30ff 	mov.w	r0, #4294967295
 8003698:	f8ca 3000 	str.w	r3, [sl]
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a2:	81a3      	strh	r3, [r4, #12]
 80036a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a8:	464a      	mov	r2, r9
 80036aa:	6921      	ldr	r1, [r4, #16]
 80036ac:	f7ff ff98 	bl	80035e0 <memcpy>
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ba:	81a3      	strh	r3, [r4, #12]
 80036bc:	6126      	str	r6, [r4, #16]
 80036be:	444e      	add	r6, r9
 80036c0:	6026      	str	r6, [r4, #0]
 80036c2:	463e      	mov	r6, r7
 80036c4:	6165      	str	r5, [r4, #20]
 80036c6:	eba5 0509 	sub.w	r5, r5, r9
 80036ca:	60a5      	str	r5, [r4, #8]
 80036cc:	42be      	cmp	r6, r7
 80036ce:	d900      	bls.n	80036d2 <__ssputs_r+0x86>
 80036d0:	463e      	mov	r6, r7
 80036d2:	4632      	mov	r2, r6
 80036d4:	4641      	mov	r1, r8
 80036d6:	6820      	ldr	r0, [r4, #0]
 80036d8:	f000 fab8 	bl	8003c4c <memmove>
 80036dc:	68a3      	ldr	r3, [r4, #8]
 80036de:	6822      	ldr	r2, [r4, #0]
 80036e0:	1b9b      	subs	r3, r3, r6
 80036e2:	4432      	add	r2, r6
 80036e4:	2000      	movs	r0, #0
 80036e6:	60a3      	str	r3, [r4, #8]
 80036e8:	6022      	str	r2, [r4, #0]
 80036ea:	e7db      	b.n	80036a4 <__ssputs_r+0x58>
 80036ec:	462a      	mov	r2, r5
 80036ee:	f000 fb6d 	bl	8003dcc <_realloc_r>
 80036f2:	4606      	mov	r6, r0
 80036f4:	2800      	cmp	r0, #0
 80036f6:	d1e1      	bne.n	80036bc <__ssputs_r+0x70>
 80036f8:	4650      	mov	r0, sl
 80036fa:	6921      	ldr	r1, [r4, #16]
 80036fc:	f000 fac0 	bl	8003c80 <_free_r>
 8003700:	e7c7      	b.n	8003692 <__ssputs_r+0x46>
	...

08003704 <_svfiprintf_r>:
 8003704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003708:	4698      	mov	r8, r3
 800370a:	898b      	ldrh	r3, [r1, #12]
 800370c:	4607      	mov	r7, r0
 800370e:	061b      	lsls	r3, r3, #24
 8003710:	460d      	mov	r5, r1
 8003712:	4614      	mov	r4, r2
 8003714:	b09d      	sub	sp, #116	; 0x74
 8003716:	d50e      	bpl.n	8003736 <_svfiprintf_r+0x32>
 8003718:	690b      	ldr	r3, [r1, #16]
 800371a:	b963      	cbnz	r3, 8003736 <_svfiprintf_r+0x32>
 800371c:	2140      	movs	r1, #64	; 0x40
 800371e:	f000 fafb 	bl	8003d18 <_malloc_r>
 8003722:	6028      	str	r0, [r5, #0]
 8003724:	6128      	str	r0, [r5, #16]
 8003726:	b920      	cbnz	r0, 8003732 <_svfiprintf_r+0x2e>
 8003728:	230c      	movs	r3, #12
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	f04f 30ff 	mov.w	r0, #4294967295
 8003730:	e0d1      	b.n	80038d6 <_svfiprintf_r+0x1d2>
 8003732:	2340      	movs	r3, #64	; 0x40
 8003734:	616b      	str	r3, [r5, #20]
 8003736:	2300      	movs	r3, #0
 8003738:	9309      	str	r3, [sp, #36]	; 0x24
 800373a:	2320      	movs	r3, #32
 800373c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003740:	2330      	movs	r3, #48	; 0x30
 8003742:	f04f 0901 	mov.w	r9, #1
 8003746:	f8cd 800c 	str.w	r8, [sp, #12]
 800374a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80038f0 <_svfiprintf_r+0x1ec>
 800374e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003752:	4623      	mov	r3, r4
 8003754:	469a      	mov	sl, r3
 8003756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800375a:	b10a      	cbz	r2, 8003760 <_svfiprintf_r+0x5c>
 800375c:	2a25      	cmp	r2, #37	; 0x25
 800375e:	d1f9      	bne.n	8003754 <_svfiprintf_r+0x50>
 8003760:	ebba 0b04 	subs.w	fp, sl, r4
 8003764:	d00b      	beq.n	800377e <_svfiprintf_r+0x7a>
 8003766:	465b      	mov	r3, fp
 8003768:	4622      	mov	r2, r4
 800376a:	4629      	mov	r1, r5
 800376c:	4638      	mov	r0, r7
 800376e:	f7ff ff6d 	bl	800364c <__ssputs_r>
 8003772:	3001      	adds	r0, #1
 8003774:	f000 80aa 	beq.w	80038cc <_svfiprintf_r+0x1c8>
 8003778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800377a:	445a      	add	r2, fp
 800377c:	9209      	str	r2, [sp, #36]	; 0x24
 800377e:	f89a 3000 	ldrb.w	r3, [sl]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80a2 	beq.w	80038cc <_svfiprintf_r+0x1c8>
 8003788:	2300      	movs	r3, #0
 800378a:	f04f 32ff 	mov.w	r2, #4294967295
 800378e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003792:	f10a 0a01 	add.w	sl, sl, #1
 8003796:	9304      	str	r3, [sp, #16]
 8003798:	9307      	str	r3, [sp, #28]
 800379a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800379e:	931a      	str	r3, [sp, #104]	; 0x68
 80037a0:	4654      	mov	r4, sl
 80037a2:	2205      	movs	r2, #5
 80037a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a8:	4851      	ldr	r0, [pc, #324]	; (80038f0 <_svfiprintf_r+0x1ec>)
 80037aa:	f000 fa41 	bl	8003c30 <memchr>
 80037ae:	9a04      	ldr	r2, [sp, #16]
 80037b0:	b9d8      	cbnz	r0, 80037ea <_svfiprintf_r+0xe6>
 80037b2:	06d0      	lsls	r0, r2, #27
 80037b4:	bf44      	itt	mi
 80037b6:	2320      	movmi	r3, #32
 80037b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037bc:	0711      	lsls	r1, r2, #28
 80037be:	bf44      	itt	mi
 80037c0:	232b      	movmi	r3, #43	; 0x2b
 80037c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037c6:	f89a 3000 	ldrb.w	r3, [sl]
 80037ca:	2b2a      	cmp	r3, #42	; 0x2a
 80037cc:	d015      	beq.n	80037fa <_svfiprintf_r+0xf6>
 80037ce:	4654      	mov	r4, sl
 80037d0:	2000      	movs	r0, #0
 80037d2:	f04f 0c0a 	mov.w	ip, #10
 80037d6:	9a07      	ldr	r2, [sp, #28]
 80037d8:	4621      	mov	r1, r4
 80037da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037de:	3b30      	subs	r3, #48	; 0x30
 80037e0:	2b09      	cmp	r3, #9
 80037e2:	d94e      	bls.n	8003882 <_svfiprintf_r+0x17e>
 80037e4:	b1b0      	cbz	r0, 8003814 <_svfiprintf_r+0x110>
 80037e6:	9207      	str	r2, [sp, #28]
 80037e8:	e014      	b.n	8003814 <_svfiprintf_r+0x110>
 80037ea:	eba0 0308 	sub.w	r3, r0, r8
 80037ee:	fa09 f303 	lsl.w	r3, r9, r3
 80037f2:	4313      	orrs	r3, r2
 80037f4:	46a2      	mov	sl, r4
 80037f6:	9304      	str	r3, [sp, #16]
 80037f8:	e7d2      	b.n	80037a0 <_svfiprintf_r+0x9c>
 80037fa:	9b03      	ldr	r3, [sp, #12]
 80037fc:	1d19      	adds	r1, r3, #4
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	9103      	str	r1, [sp, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	bfbb      	ittet	lt
 8003806:	425b      	neglt	r3, r3
 8003808:	f042 0202 	orrlt.w	r2, r2, #2
 800380c:	9307      	strge	r3, [sp, #28]
 800380e:	9307      	strlt	r3, [sp, #28]
 8003810:	bfb8      	it	lt
 8003812:	9204      	strlt	r2, [sp, #16]
 8003814:	7823      	ldrb	r3, [r4, #0]
 8003816:	2b2e      	cmp	r3, #46	; 0x2e
 8003818:	d10c      	bne.n	8003834 <_svfiprintf_r+0x130>
 800381a:	7863      	ldrb	r3, [r4, #1]
 800381c:	2b2a      	cmp	r3, #42	; 0x2a
 800381e:	d135      	bne.n	800388c <_svfiprintf_r+0x188>
 8003820:	9b03      	ldr	r3, [sp, #12]
 8003822:	3402      	adds	r4, #2
 8003824:	1d1a      	adds	r2, r3, #4
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	9203      	str	r2, [sp, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	bfb8      	it	lt
 800382e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003832:	9305      	str	r3, [sp, #20]
 8003834:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003900 <_svfiprintf_r+0x1fc>
 8003838:	2203      	movs	r2, #3
 800383a:	4650      	mov	r0, sl
 800383c:	7821      	ldrb	r1, [r4, #0]
 800383e:	f000 f9f7 	bl	8003c30 <memchr>
 8003842:	b140      	cbz	r0, 8003856 <_svfiprintf_r+0x152>
 8003844:	2340      	movs	r3, #64	; 0x40
 8003846:	eba0 000a 	sub.w	r0, r0, sl
 800384a:	fa03 f000 	lsl.w	r0, r3, r0
 800384e:	9b04      	ldr	r3, [sp, #16]
 8003850:	3401      	adds	r4, #1
 8003852:	4303      	orrs	r3, r0
 8003854:	9304      	str	r3, [sp, #16]
 8003856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800385a:	2206      	movs	r2, #6
 800385c:	4825      	ldr	r0, [pc, #148]	; (80038f4 <_svfiprintf_r+0x1f0>)
 800385e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003862:	f000 f9e5 	bl	8003c30 <memchr>
 8003866:	2800      	cmp	r0, #0
 8003868:	d038      	beq.n	80038dc <_svfiprintf_r+0x1d8>
 800386a:	4b23      	ldr	r3, [pc, #140]	; (80038f8 <_svfiprintf_r+0x1f4>)
 800386c:	bb1b      	cbnz	r3, 80038b6 <_svfiprintf_r+0x1b2>
 800386e:	9b03      	ldr	r3, [sp, #12]
 8003870:	3307      	adds	r3, #7
 8003872:	f023 0307 	bic.w	r3, r3, #7
 8003876:	3308      	adds	r3, #8
 8003878:	9303      	str	r3, [sp, #12]
 800387a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800387c:	4433      	add	r3, r6
 800387e:	9309      	str	r3, [sp, #36]	; 0x24
 8003880:	e767      	b.n	8003752 <_svfiprintf_r+0x4e>
 8003882:	460c      	mov	r4, r1
 8003884:	2001      	movs	r0, #1
 8003886:	fb0c 3202 	mla	r2, ip, r2, r3
 800388a:	e7a5      	b.n	80037d8 <_svfiprintf_r+0xd4>
 800388c:	2300      	movs	r3, #0
 800388e:	f04f 0c0a 	mov.w	ip, #10
 8003892:	4619      	mov	r1, r3
 8003894:	3401      	adds	r4, #1
 8003896:	9305      	str	r3, [sp, #20]
 8003898:	4620      	mov	r0, r4
 800389a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800389e:	3a30      	subs	r2, #48	; 0x30
 80038a0:	2a09      	cmp	r2, #9
 80038a2:	d903      	bls.n	80038ac <_svfiprintf_r+0x1a8>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0c5      	beq.n	8003834 <_svfiprintf_r+0x130>
 80038a8:	9105      	str	r1, [sp, #20]
 80038aa:	e7c3      	b.n	8003834 <_svfiprintf_r+0x130>
 80038ac:	4604      	mov	r4, r0
 80038ae:	2301      	movs	r3, #1
 80038b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80038b4:	e7f0      	b.n	8003898 <_svfiprintf_r+0x194>
 80038b6:	ab03      	add	r3, sp, #12
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	462a      	mov	r2, r5
 80038bc:	4638      	mov	r0, r7
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <_svfiprintf_r+0x1f8>)
 80038c0:	a904      	add	r1, sp, #16
 80038c2:	f3af 8000 	nop.w
 80038c6:	1c42      	adds	r2, r0, #1
 80038c8:	4606      	mov	r6, r0
 80038ca:	d1d6      	bne.n	800387a <_svfiprintf_r+0x176>
 80038cc:	89ab      	ldrh	r3, [r5, #12]
 80038ce:	065b      	lsls	r3, r3, #25
 80038d0:	f53f af2c 	bmi.w	800372c <_svfiprintf_r+0x28>
 80038d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038d6:	b01d      	add	sp, #116	; 0x74
 80038d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038dc:	ab03      	add	r3, sp, #12
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	462a      	mov	r2, r5
 80038e2:	4638      	mov	r0, r7
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <_svfiprintf_r+0x1f8>)
 80038e6:	a904      	add	r1, sp, #16
 80038e8:	f000 f87c 	bl	80039e4 <_printf_i>
 80038ec:	e7eb      	b.n	80038c6 <_svfiprintf_r+0x1c2>
 80038ee:	bf00      	nop
 80038f0:	08004284 	.word	0x08004284
 80038f4:	0800428e 	.word	0x0800428e
 80038f8:	00000000 	.word	0x00000000
 80038fc:	0800364d 	.word	0x0800364d
 8003900:	0800428a 	.word	0x0800428a

08003904 <_printf_common>:
 8003904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003908:	4616      	mov	r6, r2
 800390a:	4699      	mov	r9, r3
 800390c:	688a      	ldr	r2, [r1, #8]
 800390e:	690b      	ldr	r3, [r1, #16]
 8003910:	4607      	mov	r7, r0
 8003912:	4293      	cmp	r3, r2
 8003914:	bfb8      	it	lt
 8003916:	4613      	movlt	r3, r2
 8003918:	6033      	str	r3, [r6, #0]
 800391a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800391e:	460c      	mov	r4, r1
 8003920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003924:	b10a      	cbz	r2, 800392a <_printf_common+0x26>
 8003926:	3301      	adds	r3, #1
 8003928:	6033      	str	r3, [r6, #0]
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	0699      	lsls	r1, r3, #26
 800392e:	bf42      	ittt	mi
 8003930:	6833      	ldrmi	r3, [r6, #0]
 8003932:	3302      	addmi	r3, #2
 8003934:	6033      	strmi	r3, [r6, #0]
 8003936:	6825      	ldr	r5, [r4, #0]
 8003938:	f015 0506 	ands.w	r5, r5, #6
 800393c:	d106      	bne.n	800394c <_printf_common+0x48>
 800393e:	f104 0a19 	add.w	sl, r4, #25
 8003942:	68e3      	ldr	r3, [r4, #12]
 8003944:	6832      	ldr	r2, [r6, #0]
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	42ab      	cmp	r3, r5
 800394a:	dc28      	bgt.n	800399e <_printf_common+0x9a>
 800394c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003950:	1e13      	subs	r3, r2, #0
 8003952:	6822      	ldr	r2, [r4, #0]
 8003954:	bf18      	it	ne
 8003956:	2301      	movne	r3, #1
 8003958:	0692      	lsls	r2, r2, #26
 800395a:	d42d      	bmi.n	80039b8 <_printf_common+0xb4>
 800395c:	4649      	mov	r1, r9
 800395e:	4638      	mov	r0, r7
 8003960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003964:	47c0      	blx	r8
 8003966:	3001      	adds	r0, #1
 8003968:	d020      	beq.n	80039ac <_printf_common+0xa8>
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	68e5      	ldr	r5, [r4, #12]
 800396e:	f003 0306 	and.w	r3, r3, #6
 8003972:	2b04      	cmp	r3, #4
 8003974:	bf18      	it	ne
 8003976:	2500      	movne	r5, #0
 8003978:	6832      	ldr	r2, [r6, #0]
 800397a:	f04f 0600 	mov.w	r6, #0
 800397e:	68a3      	ldr	r3, [r4, #8]
 8003980:	bf08      	it	eq
 8003982:	1aad      	subeq	r5, r5, r2
 8003984:	6922      	ldr	r2, [r4, #16]
 8003986:	bf08      	it	eq
 8003988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800398c:	4293      	cmp	r3, r2
 800398e:	bfc4      	itt	gt
 8003990:	1a9b      	subgt	r3, r3, r2
 8003992:	18ed      	addgt	r5, r5, r3
 8003994:	341a      	adds	r4, #26
 8003996:	42b5      	cmp	r5, r6
 8003998:	d11a      	bne.n	80039d0 <_printf_common+0xcc>
 800399a:	2000      	movs	r0, #0
 800399c:	e008      	b.n	80039b0 <_printf_common+0xac>
 800399e:	2301      	movs	r3, #1
 80039a0:	4652      	mov	r2, sl
 80039a2:	4649      	mov	r1, r9
 80039a4:	4638      	mov	r0, r7
 80039a6:	47c0      	blx	r8
 80039a8:	3001      	adds	r0, #1
 80039aa:	d103      	bne.n	80039b4 <_printf_common+0xb0>
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295
 80039b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039b4:	3501      	adds	r5, #1
 80039b6:	e7c4      	b.n	8003942 <_printf_common+0x3e>
 80039b8:	2030      	movs	r0, #48	; 0x30
 80039ba:	18e1      	adds	r1, r4, r3
 80039bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039c6:	4422      	add	r2, r4
 80039c8:	3302      	adds	r3, #2
 80039ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039ce:	e7c5      	b.n	800395c <_printf_common+0x58>
 80039d0:	2301      	movs	r3, #1
 80039d2:	4622      	mov	r2, r4
 80039d4:	4649      	mov	r1, r9
 80039d6:	4638      	mov	r0, r7
 80039d8:	47c0      	blx	r8
 80039da:	3001      	adds	r0, #1
 80039dc:	d0e6      	beq.n	80039ac <_printf_common+0xa8>
 80039de:	3601      	adds	r6, #1
 80039e0:	e7d9      	b.n	8003996 <_printf_common+0x92>
	...

080039e4 <_printf_i>:
 80039e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039e8:	460c      	mov	r4, r1
 80039ea:	7e27      	ldrb	r7, [r4, #24]
 80039ec:	4691      	mov	r9, r2
 80039ee:	2f78      	cmp	r7, #120	; 0x78
 80039f0:	4680      	mov	r8, r0
 80039f2:	469a      	mov	sl, r3
 80039f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039fa:	d807      	bhi.n	8003a0c <_printf_i+0x28>
 80039fc:	2f62      	cmp	r7, #98	; 0x62
 80039fe:	d80a      	bhi.n	8003a16 <_printf_i+0x32>
 8003a00:	2f00      	cmp	r7, #0
 8003a02:	f000 80d9 	beq.w	8003bb8 <_printf_i+0x1d4>
 8003a06:	2f58      	cmp	r7, #88	; 0x58
 8003a08:	f000 80a4 	beq.w	8003b54 <_printf_i+0x170>
 8003a0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a14:	e03a      	b.n	8003a8c <_printf_i+0xa8>
 8003a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a1a:	2b15      	cmp	r3, #21
 8003a1c:	d8f6      	bhi.n	8003a0c <_printf_i+0x28>
 8003a1e:	a001      	add	r0, pc, #4	; (adr r0, 8003a24 <_printf_i+0x40>)
 8003a20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a24:	08003a7d 	.word	0x08003a7d
 8003a28:	08003a91 	.word	0x08003a91
 8003a2c:	08003a0d 	.word	0x08003a0d
 8003a30:	08003a0d 	.word	0x08003a0d
 8003a34:	08003a0d 	.word	0x08003a0d
 8003a38:	08003a0d 	.word	0x08003a0d
 8003a3c:	08003a91 	.word	0x08003a91
 8003a40:	08003a0d 	.word	0x08003a0d
 8003a44:	08003a0d 	.word	0x08003a0d
 8003a48:	08003a0d 	.word	0x08003a0d
 8003a4c:	08003a0d 	.word	0x08003a0d
 8003a50:	08003b9f 	.word	0x08003b9f
 8003a54:	08003ac1 	.word	0x08003ac1
 8003a58:	08003b81 	.word	0x08003b81
 8003a5c:	08003a0d 	.word	0x08003a0d
 8003a60:	08003a0d 	.word	0x08003a0d
 8003a64:	08003bc1 	.word	0x08003bc1
 8003a68:	08003a0d 	.word	0x08003a0d
 8003a6c:	08003ac1 	.word	0x08003ac1
 8003a70:	08003a0d 	.word	0x08003a0d
 8003a74:	08003a0d 	.word	0x08003a0d
 8003a78:	08003b89 	.word	0x08003b89
 8003a7c:	680b      	ldr	r3, [r1, #0]
 8003a7e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a82:	1d1a      	adds	r2, r3, #4
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	600a      	str	r2, [r1, #0]
 8003a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0a4      	b.n	8003bda <_printf_i+0x1f6>
 8003a90:	6825      	ldr	r5, [r4, #0]
 8003a92:	6808      	ldr	r0, [r1, #0]
 8003a94:	062e      	lsls	r6, r5, #24
 8003a96:	f100 0304 	add.w	r3, r0, #4
 8003a9a:	d50a      	bpl.n	8003ab2 <_printf_i+0xce>
 8003a9c:	6805      	ldr	r5, [r0, #0]
 8003a9e:	600b      	str	r3, [r1, #0]
 8003aa0:	2d00      	cmp	r5, #0
 8003aa2:	da03      	bge.n	8003aac <_printf_i+0xc8>
 8003aa4:	232d      	movs	r3, #45	; 0x2d
 8003aa6:	426d      	negs	r5, r5
 8003aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aac:	230a      	movs	r3, #10
 8003aae:	485e      	ldr	r0, [pc, #376]	; (8003c28 <_printf_i+0x244>)
 8003ab0:	e019      	b.n	8003ae6 <_printf_i+0x102>
 8003ab2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003ab6:	6805      	ldr	r5, [r0, #0]
 8003ab8:	600b      	str	r3, [r1, #0]
 8003aba:	bf18      	it	ne
 8003abc:	b22d      	sxthne	r5, r5
 8003abe:	e7ef      	b.n	8003aa0 <_printf_i+0xbc>
 8003ac0:	680b      	ldr	r3, [r1, #0]
 8003ac2:	6825      	ldr	r5, [r4, #0]
 8003ac4:	1d18      	adds	r0, r3, #4
 8003ac6:	6008      	str	r0, [r1, #0]
 8003ac8:	0628      	lsls	r0, r5, #24
 8003aca:	d501      	bpl.n	8003ad0 <_printf_i+0xec>
 8003acc:	681d      	ldr	r5, [r3, #0]
 8003ace:	e002      	b.n	8003ad6 <_printf_i+0xf2>
 8003ad0:	0669      	lsls	r1, r5, #25
 8003ad2:	d5fb      	bpl.n	8003acc <_printf_i+0xe8>
 8003ad4:	881d      	ldrh	r5, [r3, #0]
 8003ad6:	2f6f      	cmp	r7, #111	; 0x6f
 8003ad8:	bf0c      	ite	eq
 8003ada:	2308      	moveq	r3, #8
 8003adc:	230a      	movne	r3, #10
 8003ade:	4852      	ldr	r0, [pc, #328]	; (8003c28 <_printf_i+0x244>)
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ae6:	6866      	ldr	r6, [r4, #4]
 8003ae8:	2e00      	cmp	r6, #0
 8003aea:	bfa8      	it	ge
 8003aec:	6821      	ldrge	r1, [r4, #0]
 8003aee:	60a6      	str	r6, [r4, #8]
 8003af0:	bfa4      	itt	ge
 8003af2:	f021 0104 	bicge.w	r1, r1, #4
 8003af6:	6021      	strge	r1, [r4, #0]
 8003af8:	b90d      	cbnz	r5, 8003afe <_printf_i+0x11a>
 8003afa:	2e00      	cmp	r6, #0
 8003afc:	d04d      	beq.n	8003b9a <_printf_i+0x1b6>
 8003afe:	4616      	mov	r6, r2
 8003b00:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b04:	fb03 5711 	mls	r7, r3, r1, r5
 8003b08:	5dc7      	ldrb	r7, [r0, r7]
 8003b0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b0e:	462f      	mov	r7, r5
 8003b10:	42bb      	cmp	r3, r7
 8003b12:	460d      	mov	r5, r1
 8003b14:	d9f4      	bls.n	8003b00 <_printf_i+0x11c>
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d10b      	bne.n	8003b32 <_printf_i+0x14e>
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	07df      	lsls	r7, r3, #31
 8003b1e:	d508      	bpl.n	8003b32 <_printf_i+0x14e>
 8003b20:	6923      	ldr	r3, [r4, #16]
 8003b22:	6861      	ldr	r1, [r4, #4]
 8003b24:	4299      	cmp	r1, r3
 8003b26:	bfde      	ittt	le
 8003b28:	2330      	movle	r3, #48	; 0x30
 8003b2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b32:	1b92      	subs	r2, r2, r6
 8003b34:	6122      	str	r2, [r4, #16]
 8003b36:	464b      	mov	r3, r9
 8003b38:	4621      	mov	r1, r4
 8003b3a:	4640      	mov	r0, r8
 8003b3c:	f8cd a000 	str.w	sl, [sp]
 8003b40:	aa03      	add	r2, sp, #12
 8003b42:	f7ff fedf 	bl	8003904 <_printf_common>
 8003b46:	3001      	adds	r0, #1
 8003b48:	d14c      	bne.n	8003be4 <_printf_i+0x200>
 8003b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4e:	b004      	add	sp, #16
 8003b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b54:	4834      	ldr	r0, [pc, #208]	; (8003c28 <_printf_i+0x244>)
 8003b56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b5a:	680e      	ldr	r6, [r1, #0]
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b62:	061f      	lsls	r7, r3, #24
 8003b64:	600e      	str	r6, [r1, #0]
 8003b66:	d514      	bpl.n	8003b92 <_printf_i+0x1ae>
 8003b68:	07d9      	lsls	r1, r3, #31
 8003b6a:	bf44      	itt	mi
 8003b6c:	f043 0320 	orrmi.w	r3, r3, #32
 8003b70:	6023      	strmi	r3, [r4, #0]
 8003b72:	b91d      	cbnz	r5, 8003b7c <_printf_i+0x198>
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	f023 0320 	bic.w	r3, r3, #32
 8003b7a:	6023      	str	r3, [r4, #0]
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	e7af      	b.n	8003ae0 <_printf_i+0xfc>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	f043 0320 	orr.w	r3, r3, #32
 8003b86:	6023      	str	r3, [r4, #0]
 8003b88:	2378      	movs	r3, #120	; 0x78
 8003b8a:	4828      	ldr	r0, [pc, #160]	; (8003c2c <_printf_i+0x248>)
 8003b8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b90:	e7e3      	b.n	8003b5a <_printf_i+0x176>
 8003b92:	065e      	lsls	r6, r3, #25
 8003b94:	bf48      	it	mi
 8003b96:	b2ad      	uxthmi	r5, r5
 8003b98:	e7e6      	b.n	8003b68 <_printf_i+0x184>
 8003b9a:	4616      	mov	r6, r2
 8003b9c:	e7bb      	b.n	8003b16 <_printf_i+0x132>
 8003b9e:	680b      	ldr	r3, [r1, #0]
 8003ba0:	6826      	ldr	r6, [r4, #0]
 8003ba2:	1d1d      	adds	r5, r3, #4
 8003ba4:	6960      	ldr	r0, [r4, #20]
 8003ba6:	600d      	str	r5, [r1, #0]
 8003ba8:	0635      	lsls	r5, r6, #24
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	d501      	bpl.n	8003bb2 <_printf_i+0x1ce>
 8003bae:	6018      	str	r0, [r3, #0]
 8003bb0:	e002      	b.n	8003bb8 <_printf_i+0x1d4>
 8003bb2:	0671      	lsls	r1, r6, #25
 8003bb4:	d5fb      	bpl.n	8003bae <_printf_i+0x1ca>
 8003bb6:	8018      	strh	r0, [r3, #0]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	4616      	mov	r6, r2
 8003bbc:	6123      	str	r3, [r4, #16]
 8003bbe:	e7ba      	b.n	8003b36 <_printf_i+0x152>
 8003bc0:	680b      	ldr	r3, [r1, #0]
 8003bc2:	1d1a      	adds	r2, r3, #4
 8003bc4:	600a      	str	r2, [r1, #0]
 8003bc6:	681e      	ldr	r6, [r3, #0]
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4630      	mov	r0, r6
 8003bcc:	6862      	ldr	r2, [r4, #4]
 8003bce:	f000 f82f 	bl	8003c30 <memchr>
 8003bd2:	b108      	cbz	r0, 8003bd8 <_printf_i+0x1f4>
 8003bd4:	1b80      	subs	r0, r0, r6
 8003bd6:	6060      	str	r0, [r4, #4]
 8003bd8:	6863      	ldr	r3, [r4, #4]
 8003bda:	6123      	str	r3, [r4, #16]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003be2:	e7a8      	b.n	8003b36 <_printf_i+0x152>
 8003be4:	4632      	mov	r2, r6
 8003be6:	4649      	mov	r1, r9
 8003be8:	4640      	mov	r0, r8
 8003bea:	6923      	ldr	r3, [r4, #16]
 8003bec:	47d0      	blx	sl
 8003bee:	3001      	adds	r0, #1
 8003bf0:	d0ab      	beq.n	8003b4a <_printf_i+0x166>
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	079b      	lsls	r3, r3, #30
 8003bf6:	d413      	bmi.n	8003c20 <_printf_i+0x23c>
 8003bf8:	68e0      	ldr	r0, [r4, #12]
 8003bfa:	9b03      	ldr	r3, [sp, #12]
 8003bfc:	4298      	cmp	r0, r3
 8003bfe:	bfb8      	it	lt
 8003c00:	4618      	movlt	r0, r3
 8003c02:	e7a4      	b.n	8003b4e <_printf_i+0x16a>
 8003c04:	2301      	movs	r3, #1
 8003c06:	4632      	mov	r2, r6
 8003c08:	4649      	mov	r1, r9
 8003c0a:	4640      	mov	r0, r8
 8003c0c:	47d0      	blx	sl
 8003c0e:	3001      	adds	r0, #1
 8003c10:	d09b      	beq.n	8003b4a <_printf_i+0x166>
 8003c12:	3501      	adds	r5, #1
 8003c14:	68e3      	ldr	r3, [r4, #12]
 8003c16:	9903      	ldr	r1, [sp, #12]
 8003c18:	1a5b      	subs	r3, r3, r1
 8003c1a:	42ab      	cmp	r3, r5
 8003c1c:	dcf2      	bgt.n	8003c04 <_printf_i+0x220>
 8003c1e:	e7eb      	b.n	8003bf8 <_printf_i+0x214>
 8003c20:	2500      	movs	r5, #0
 8003c22:	f104 0619 	add.w	r6, r4, #25
 8003c26:	e7f5      	b.n	8003c14 <_printf_i+0x230>
 8003c28:	08004295 	.word	0x08004295
 8003c2c:	080042a6 	.word	0x080042a6

08003c30 <memchr>:
 8003c30:	4603      	mov	r3, r0
 8003c32:	b510      	push	{r4, lr}
 8003c34:	b2c9      	uxtb	r1, r1
 8003c36:	4402      	add	r2, r0
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	d101      	bne.n	8003c42 <memchr+0x12>
 8003c3e:	2000      	movs	r0, #0
 8003c40:	e003      	b.n	8003c4a <memchr+0x1a>
 8003c42:	7804      	ldrb	r4, [r0, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	428c      	cmp	r4, r1
 8003c48:	d1f6      	bne.n	8003c38 <memchr+0x8>
 8003c4a:	bd10      	pop	{r4, pc}

08003c4c <memmove>:
 8003c4c:	4288      	cmp	r0, r1
 8003c4e:	b510      	push	{r4, lr}
 8003c50:	eb01 0402 	add.w	r4, r1, r2
 8003c54:	d902      	bls.n	8003c5c <memmove+0x10>
 8003c56:	4284      	cmp	r4, r0
 8003c58:	4623      	mov	r3, r4
 8003c5a:	d807      	bhi.n	8003c6c <memmove+0x20>
 8003c5c:	1e43      	subs	r3, r0, #1
 8003c5e:	42a1      	cmp	r1, r4
 8003c60:	d008      	beq.n	8003c74 <memmove+0x28>
 8003c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c6a:	e7f8      	b.n	8003c5e <memmove+0x12>
 8003c6c:	4601      	mov	r1, r0
 8003c6e:	4402      	add	r2, r0
 8003c70:	428a      	cmp	r2, r1
 8003c72:	d100      	bne.n	8003c76 <memmove+0x2a>
 8003c74:	bd10      	pop	{r4, pc}
 8003c76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c7e:	e7f7      	b.n	8003c70 <memmove+0x24>

08003c80 <_free_r>:
 8003c80:	b538      	push	{r3, r4, r5, lr}
 8003c82:	4605      	mov	r5, r0
 8003c84:	2900      	cmp	r1, #0
 8003c86:	d043      	beq.n	8003d10 <_free_r+0x90>
 8003c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c8c:	1f0c      	subs	r4, r1, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bfb8      	it	lt
 8003c92:	18e4      	addlt	r4, r4, r3
 8003c94:	f000 f8d0 	bl	8003e38 <__malloc_lock>
 8003c98:	4a1e      	ldr	r2, [pc, #120]	; (8003d14 <_free_r+0x94>)
 8003c9a:	6813      	ldr	r3, [r2, #0]
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	b933      	cbnz	r3, 8003cae <_free_r+0x2e>
 8003ca0:	6063      	str	r3, [r4, #4]
 8003ca2:	6014      	str	r4, [r2, #0]
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003caa:	f000 b8cb 	b.w	8003e44 <__malloc_unlock>
 8003cae:	42a3      	cmp	r3, r4
 8003cb0:	d90a      	bls.n	8003cc8 <_free_r+0x48>
 8003cb2:	6821      	ldr	r1, [r4, #0]
 8003cb4:	1862      	adds	r2, r4, r1
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	bf01      	itttt	eq
 8003cba:	681a      	ldreq	r2, [r3, #0]
 8003cbc:	685b      	ldreq	r3, [r3, #4]
 8003cbe:	1852      	addeq	r2, r2, r1
 8003cc0:	6022      	streq	r2, [r4, #0]
 8003cc2:	6063      	str	r3, [r4, #4]
 8003cc4:	6004      	str	r4, [r0, #0]
 8003cc6:	e7ed      	b.n	8003ca4 <_free_r+0x24>
 8003cc8:	461a      	mov	r2, r3
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	b10b      	cbz	r3, 8003cd2 <_free_r+0x52>
 8003cce:	42a3      	cmp	r3, r4
 8003cd0:	d9fa      	bls.n	8003cc8 <_free_r+0x48>
 8003cd2:	6811      	ldr	r1, [r2, #0]
 8003cd4:	1850      	adds	r0, r2, r1
 8003cd6:	42a0      	cmp	r0, r4
 8003cd8:	d10b      	bne.n	8003cf2 <_free_r+0x72>
 8003cda:	6820      	ldr	r0, [r4, #0]
 8003cdc:	4401      	add	r1, r0
 8003cde:	1850      	adds	r0, r2, r1
 8003ce0:	4283      	cmp	r3, r0
 8003ce2:	6011      	str	r1, [r2, #0]
 8003ce4:	d1de      	bne.n	8003ca4 <_free_r+0x24>
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4401      	add	r1, r0
 8003cec:	6011      	str	r1, [r2, #0]
 8003cee:	6053      	str	r3, [r2, #4]
 8003cf0:	e7d8      	b.n	8003ca4 <_free_r+0x24>
 8003cf2:	d902      	bls.n	8003cfa <_free_r+0x7a>
 8003cf4:	230c      	movs	r3, #12
 8003cf6:	602b      	str	r3, [r5, #0]
 8003cf8:	e7d4      	b.n	8003ca4 <_free_r+0x24>
 8003cfa:	6820      	ldr	r0, [r4, #0]
 8003cfc:	1821      	adds	r1, r4, r0
 8003cfe:	428b      	cmp	r3, r1
 8003d00:	bf01      	itttt	eq
 8003d02:	6819      	ldreq	r1, [r3, #0]
 8003d04:	685b      	ldreq	r3, [r3, #4]
 8003d06:	1809      	addeq	r1, r1, r0
 8003d08:	6021      	streq	r1, [r4, #0]
 8003d0a:	6063      	str	r3, [r4, #4]
 8003d0c:	6054      	str	r4, [r2, #4]
 8003d0e:	e7c9      	b.n	8003ca4 <_free_r+0x24>
 8003d10:	bd38      	pop	{r3, r4, r5, pc}
 8003d12:	bf00      	nop
 8003d14:	200000a0 	.word	0x200000a0

08003d18 <_malloc_r>:
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	1ccd      	adds	r5, r1, #3
 8003d1c:	f025 0503 	bic.w	r5, r5, #3
 8003d20:	3508      	adds	r5, #8
 8003d22:	2d0c      	cmp	r5, #12
 8003d24:	bf38      	it	cc
 8003d26:	250c      	movcc	r5, #12
 8003d28:	2d00      	cmp	r5, #0
 8003d2a:	4606      	mov	r6, r0
 8003d2c:	db01      	blt.n	8003d32 <_malloc_r+0x1a>
 8003d2e:	42a9      	cmp	r1, r5
 8003d30:	d903      	bls.n	8003d3a <_malloc_r+0x22>
 8003d32:	230c      	movs	r3, #12
 8003d34:	6033      	str	r3, [r6, #0]
 8003d36:	2000      	movs	r0, #0
 8003d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d3a:	f000 f87d 	bl	8003e38 <__malloc_lock>
 8003d3e:	4921      	ldr	r1, [pc, #132]	; (8003dc4 <_malloc_r+0xac>)
 8003d40:	680a      	ldr	r2, [r1, #0]
 8003d42:	4614      	mov	r4, r2
 8003d44:	b99c      	cbnz	r4, 8003d6e <_malloc_r+0x56>
 8003d46:	4f20      	ldr	r7, [pc, #128]	; (8003dc8 <_malloc_r+0xb0>)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	b923      	cbnz	r3, 8003d56 <_malloc_r+0x3e>
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	4630      	mov	r0, r6
 8003d50:	f000 f862 	bl	8003e18 <_sbrk_r>
 8003d54:	6038      	str	r0, [r7, #0]
 8003d56:	4629      	mov	r1, r5
 8003d58:	4630      	mov	r0, r6
 8003d5a:	f000 f85d 	bl	8003e18 <_sbrk_r>
 8003d5e:	1c43      	adds	r3, r0, #1
 8003d60:	d123      	bne.n	8003daa <_malloc_r+0x92>
 8003d62:	230c      	movs	r3, #12
 8003d64:	4630      	mov	r0, r6
 8003d66:	6033      	str	r3, [r6, #0]
 8003d68:	f000 f86c 	bl	8003e44 <__malloc_unlock>
 8003d6c:	e7e3      	b.n	8003d36 <_malloc_r+0x1e>
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	1b5b      	subs	r3, r3, r5
 8003d72:	d417      	bmi.n	8003da4 <_malloc_r+0x8c>
 8003d74:	2b0b      	cmp	r3, #11
 8003d76:	d903      	bls.n	8003d80 <_malloc_r+0x68>
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	441c      	add	r4, r3
 8003d7c:	6025      	str	r5, [r4, #0]
 8003d7e:	e004      	b.n	8003d8a <_malloc_r+0x72>
 8003d80:	6863      	ldr	r3, [r4, #4]
 8003d82:	42a2      	cmp	r2, r4
 8003d84:	bf0c      	ite	eq
 8003d86:	600b      	streq	r3, [r1, #0]
 8003d88:	6053      	strne	r3, [r2, #4]
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	f000 f85a 	bl	8003e44 <__malloc_unlock>
 8003d90:	f104 000b 	add.w	r0, r4, #11
 8003d94:	1d23      	adds	r3, r4, #4
 8003d96:	f020 0007 	bic.w	r0, r0, #7
 8003d9a:	1ac2      	subs	r2, r0, r3
 8003d9c:	d0cc      	beq.n	8003d38 <_malloc_r+0x20>
 8003d9e:	1a1b      	subs	r3, r3, r0
 8003da0:	50a3      	str	r3, [r4, r2]
 8003da2:	e7c9      	b.n	8003d38 <_malloc_r+0x20>
 8003da4:	4622      	mov	r2, r4
 8003da6:	6864      	ldr	r4, [r4, #4]
 8003da8:	e7cc      	b.n	8003d44 <_malloc_r+0x2c>
 8003daa:	1cc4      	adds	r4, r0, #3
 8003dac:	f024 0403 	bic.w	r4, r4, #3
 8003db0:	42a0      	cmp	r0, r4
 8003db2:	d0e3      	beq.n	8003d7c <_malloc_r+0x64>
 8003db4:	1a21      	subs	r1, r4, r0
 8003db6:	4630      	mov	r0, r6
 8003db8:	f000 f82e 	bl	8003e18 <_sbrk_r>
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	d1dd      	bne.n	8003d7c <_malloc_r+0x64>
 8003dc0:	e7cf      	b.n	8003d62 <_malloc_r+0x4a>
 8003dc2:	bf00      	nop
 8003dc4:	200000a0 	.word	0x200000a0
 8003dc8:	200000a4 	.word	0x200000a4

08003dcc <_realloc_r>:
 8003dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dce:	4607      	mov	r7, r0
 8003dd0:	4614      	mov	r4, r2
 8003dd2:	460e      	mov	r6, r1
 8003dd4:	b921      	cbnz	r1, 8003de0 <_realloc_r+0x14>
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ddc:	f7ff bf9c 	b.w	8003d18 <_malloc_r>
 8003de0:	b922      	cbnz	r2, 8003dec <_realloc_r+0x20>
 8003de2:	f7ff ff4d 	bl	8003c80 <_free_r>
 8003de6:	4625      	mov	r5, r4
 8003de8:	4628      	mov	r0, r5
 8003dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dec:	f000 f830 	bl	8003e50 <_malloc_usable_size_r>
 8003df0:	42a0      	cmp	r0, r4
 8003df2:	d20f      	bcs.n	8003e14 <_realloc_r+0x48>
 8003df4:	4621      	mov	r1, r4
 8003df6:	4638      	mov	r0, r7
 8003df8:	f7ff ff8e 	bl	8003d18 <_malloc_r>
 8003dfc:	4605      	mov	r5, r0
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	d0f2      	beq.n	8003de8 <_realloc_r+0x1c>
 8003e02:	4631      	mov	r1, r6
 8003e04:	4622      	mov	r2, r4
 8003e06:	f7ff fbeb 	bl	80035e0 <memcpy>
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	4638      	mov	r0, r7
 8003e0e:	f7ff ff37 	bl	8003c80 <_free_r>
 8003e12:	e7e9      	b.n	8003de8 <_realloc_r+0x1c>
 8003e14:	4635      	mov	r5, r6
 8003e16:	e7e7      	b.n	8003de8 <_realloc_r+0x1c>

08003e18 <_sbrk_r>:
 8003e18:	b538      	push	{r3, r4, r5, lr}
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	4d05      	ldr	r5, [pc, #20]	; (8003e34 <_sbrk_r+0x1c>)
 8003e1e:	4604      	mov	r4, r0
 8003e20:	4608      	mov	r0, r1
 8003e22:	602b      	str	r3, [r5, #0]
 8003e24:	f7fd fcd2 	bl	80017cc <_sbrk>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d102      	bne.n	8003e32 <_sbrk_r+0x1a>
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	b103      	cbz	r3, 8003e32 <_sbrk_r+0x1a>
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	bd38      	pop	{r3, r4, r5, pc}
 8003e34:	200003b0 	.word	0x200003b0

08003e38 <__malloc_lock>:
 8003e38:	4801      	ldr	r0, [pc, #4]	; (8003e40 <__malloc_lock+0x8>)
 8003e3a:	f000 b811 	b.w	8003e60 <__retarget_lock_acquire_recursive>
 8003e3e:	bf00      	nop
 8003e40:	200003b8 	.word	0x200003b8

08003e44 <__malloc_unlock>:
 8003e44:	4801      	ldr	r0, [pc, #4]	; (8003e4c <__malloc_unlock+0x8>)
 8003e46:	f000 b80c 	b.w	8003e62 <__retarget_lock_release_recursive>
 8003e4a:	bf00      	nop
 8003e4c:	200003b8 	.word	0x200003b8

08003e50 <_malloc_usable_size_r>:
 8003e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e54:	1f18      	subs	r0, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	bfbc      	itt	lt
 8003e5a:	580b      	ldrlt	r3, [r1, r0]
 8003e5c:	18c0      	addlt	r0, r0, r3
 8003e5e:	4770      	bx	lr

08003e60 <__retarget_lock_acquire_recursive>:
 8003e60:	4770      	bx	lr

08003e62 <__retarget_lock_release_recursive>:
 8003e62:	4770      	bx	lr

08003e64 <_init>:
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e66:	bf00      	nop
 8003e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6a:	bc08      	pop	{r3}
 8003e6c:	469e      	mov	lr, r3
 8003e6e:	4770      	bx	lr

08003e70 <_fini>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	bf00      	nop
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr
