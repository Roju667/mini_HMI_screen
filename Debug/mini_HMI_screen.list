
mini_HMI_screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fcc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003350  08003350  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003350  08003350  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003350  08003350  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003350  08003350  00013350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003354  08003354  00013354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  2000000c  08003364  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08003364  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9c4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a5  00000000  00000000  0002b9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002dfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002ea70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ad5  00000000  00000000  0002f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cddb  00000000  00000000  00046f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821fc  00000000  00000000  00053ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5ee4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002978  00000000  00000000  000d5f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080030c0 	.word	0x080030c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080030c0 	.word	0x080030c0

0800014c <set_button_flag>:
#define BTN_UP BUTTON_UP_Pin
#define BTN_ENTER BUTTON_ENTER_Pin

volatile button_flags_t flags;

void set_button_flag(uint16_t GPIO_Pin) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) {
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	2b80      	cmp	r3, #128	; 0x80
 800015a:	d01e      	beq.n	800019a <set_button_flag+0x4e>
 800015c:	2b80      	cmp	r3, #128	; 0x80
 800015e:	dc20      	bgt.n	80001a2 <set_button_flag+0x56>
 8000160:	2b40      	cmp	r3, #64	; 0x40
 8000162:	d016      	beq.n	8000192 <set_button_flag+0x46>
 8000164:	2b40      	cmp	r3, #64	; 0x40
 8000166:	dc1c      	bgt.n	80001a2 <set_button_flag+0x56>
 8000168:	2b20      	cmp	r3, #32
 800016a:	d00e      	beq.n	800018a <set_button_flag+0x3e>
 800016c:	2b20      	cmp	r3, #32
 800016e:	dc18      	bgt.n	80001a2 <set_button_flag+0x56>
 8000170:	2b08      	cmp	r3, #8
 8000172:	d002      	beq.n	800017a <set_button_flag+0x2e>
 8000174:	2b10      	cmp	r3, #16
 8000176:	d004      	beq.n	8000182 <set_button_flag+0x36>
    case (BTN_ENTER):
      flags.enter_flag = true;
      break;

    default:
      break;
 8000178:	e013      	b.n	80001a2 <set_button_flag+0x56>
      flags.left_flag = true;
 800017a:	4b0d      	ldr	r3, [pc, #52]	; (80001b0 <set_button_flag+0x64>)
 800017c:	2201      	movs	r2, #1
 800017e:	701a      	strb	r2, [r3, #0]
      break;
 8000180:	e010      	b.n	80001a4 <set_button_flag+0x58>
      flags.right_flag = true;
 8000182:	4b0b      	ldr	r3, [pc, #44]	; (80001b0 <set_button_flag+0x64>)
 8000184:	2201      	movs	r2, #1
 8000186:	705a      	strb	r2, [r3, #1]
      break;
 8000188:	e00c      	b.n	80001a4 <set_button_flag+0x58>
      flags.down_flag = true;
 800018a:	4b09      	ldr	r3, [pc, #36]	; (80001b0 <set_button_flag+0x64>)
 800018c:	2201      	movs	r2, #1
 800018e:	709a      	strb	r2, [r3, #2]
      break;
 8000190:	e008      	b.n	80001a4 <set_button_flag+0x58>
      flags.up_flag = true;
 8000192:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <set_button_flag+0x64>)
 8000194:	2201      	movs	r2, #1
 8000196:	70da      	strb	r2, [r3, #3]
      break;
 8000198:	e004      	b.n	80001a4 <set_button_flag+0x58>
      flags.enter_flag = true;
 800019a:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <set_button_flag+0x64>)
 800019c:	2201      	movs	r2, #1
 800019e:	711a      	strb	r2, [r3, #4]
      break;
 80001a0:	e000      	b.n	80001a4 <set_button_flag+0x58>
      break;
 80001a2:	bf00      	nop
      // different gpio
  }

  return;
 80001a4:	bf00      	nop
}
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000028 	.word	0x20000028

080001b4 <buttons_check_flag>:

buttons_state_t buttons_check_flag(void) {
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
  buttons_state_t active_button = IDLE;
 80001ba:	2300      	movs	r3, #0
 80001bc:	71fb      	strb	r3, [r7, #7]

  if (flags.left_flag) {
 80001be:	4b16      	ldr	r3, [pc, #88]	; (8000218 <buttons_check_flag+0x64>)
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d002      	beq.n	80001ce <buttons_check_flag+0x1a>
    active_button = LEFT_FLAG;
 80001c8:	2301      	movs	r3, #1
 80001ca:	71fb      	strb	r3, [r7, #7]
 80001cc:	e01e      	b.n	800020c <buttons_check_flag+0x58>
  } else if (flags.right_flag) {
 80001ce:	4b12      	ldr	r3, [pc, #72]	; (8000218 <buttons_check_flag+0x64>)
 80001d0:	785b      	ldrb	r3, [r3, #1]
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d002      	beq.n	80001de <buttons_check_flag+0x2a>
    active_button = RIGHT_FLAG;
 80001d8:	2302      	movs	r3, #2
 80001da:	71fb      	strb	r3, [r7, #7]
 80001dc:	e016      	b.n	800020c <buttons_check_flag+0x58>
  } else if (flags.down_flag) {
 80001de:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <buttons_check_flag+0x64>)
 80001e0:	789b      	ldrb	r3, [r3, #2]
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <buttons_check_flag+0x3a>
    active_button = DOWN_FLAG;
 80001e8:	2303      	movs	r3, #3
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e00e      	b.n	800020c <buttons_check_flag+0x58>
  } else if (flags.up_flag) {
 80001ee:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <buttons_check_flag+0x64>)
 80001f0:	78db      	ldrb	r3, [r3, #3]
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d002      	beq.n	80001fe <buttons_check_flag+0x4a>
    active_button = UP_FLAG;
 80001f8:	2304      	movs	r3, #4
 80001fa:	71fb      	strb	r3, [r7, #7]
 80001fc:	e006      	b.n	800020c <buttons_check_flag+0x58>
  } else if (flags.enter_flag) {
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <buttons_check_flag+0x64>)
 8000200:	791b      	ldrb	r3, [r3, #4]
 8000202:	b2db      	uxtb	r3, r3
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <buttons_check_flag+0x58>
    active_button = ENTER_FLAG;
 8000208:	2305      	movs	r3, #5
 800020a:	71fb      	strb	r3, [r7, #7]
  }

  return active_button;
 800020c:	79fb      	ldrb	r3, [r7, #7]
}
 800020e:	4618      	mov	r0, r3
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	20000028 	.word	0x20000028

0800021c <buttons_reset_flag>:

void buttons_reset_flag(buttons_state_t state_flag) {
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
  switch (state_flag) {
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	3b01      	subs	r3, #1
 800022a:	2b04      	cmp	r3, #4
 800022c:	d820      	bhi.n	8000270 <buttons_reset_flag+0x54>
 800022e:	a201      	add	r2, pc, #4	; (adr r2, 8000234 <buttons_reset_flag+0x18>)
 8000230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000234:	08000249 	.word	0x08000249
 8000238:	08000251 	.word	0x08000251
 800023c:	08000259 	.word	0x08000259
 8000240:	08000261 	.word	0x08000261
 8000244:	08000269 	.word	0x08000269
    case (LEFT_FLAG):
      flags.left_flag = false;
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <buttons_reset_flag+0x60>)
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
      break;
 800024e:	e010      	b.n	8000272 <buttons_reset_flag+0x56>

    case (RIGHT_FLAG):
      flags.right_flag = false;
 8000250:	4b0a      	ldr	r3, [pc, #40]	; (800027c <buttons_reset_flag+0x60>)
 8000252:	2200      	movs	r2, #0
 8000254:	705a      	strb	r2, [r3, #1]
      break;
 8000256:	e00c      	b.n	8000272 <buttons_reset_flag+0x56>

    case (DOWN_FLAG):
      flags.down_flag = false;
 8000258:	4b08      	ldr	r3, [pc, #32]	; (800027c <buttons_reset_flag+0x60>)
 800025a:	2200      	movs	r2, #0
 800025c:	709a      	strb	r2, [r3, #2]
      break;
 800025e:	e008      	b.n	8000272 <buttons_reset_flag+0x56>

    case (UP_FLAG):
      flags.up_flag = false;
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <buttons_reset_flag+0x60>)
 8000262:	2200      	movs	r2, #0
 8000264:	70da      	strb	r2, [r3, #3]
      break;
 8000266:	e004      	b.n	8000272 <buttons_reset_flag+0x56>

    case (ENTER_FLAG):
      flags.enter_flag = false;
 8000268:	4b04      	ldr	r3, [pc, #16]	; (800027c <buttons_reset_flag+0x60>)
 800026a:	2200      	movs	r2, #0
 800026c:	711a      	strb	r2, [r3, #4]
      break;
 800026e:	e000      	b.n	8000272 <buttons_reset_flag+0x56>

    case (IDLE):
    default:
      break;
 8000270:	bf00      	nop
  }
}
 8000272:	bf00      	nop
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr
 800027c:	20000028 	.word	0x20000028

08000280 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	80fb      	strh	r3, [r7, #6]
  set_button_flag(GPIO_Pin);
 800028a:	88fb      	ldrh	r3, [r7, #6]
 800028c:	4618      	mov	r0, r3
 800028e:	f7ff ff5d 	bl	800014c <set_button_flag>
  return;
 8000292:	bf00      	nop
}
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	font = font_t;
 80002a4:	4a03      	ldr	r2, [pc, #12]	; (80002b4 <GFX_SetFont+0x18>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	6013      	str	r3, [r2, #0]
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr
 80002b4:	20000030 	.word	0x20000030

080002b8 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b08c      	sub	sp, #48	; 0x30
 80002bc:	af00      	add	r7, sp, #0
 80002be:	60f8      	str	r0, [r7, #12]
 80002c0:	60b9      	str	r1, [r7, #8]
 80002c2:	607a      	str	r2, [r7, #4]
 80002c4:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80002c6:	683a      	ldr	r2, [r7, #0]
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	1ad3      	subs	r3, r2, r3
 80002cc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80002d0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80002d4:	6879      	ldr	r1, [r7, #4]
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	1acb      	subs	r3, r1, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	bfb8      	it	lt
 80002de:	425b      	neglt	r3, r3
 80002e0:	429a      	cmp	r2, r3
 80002e2:	bfcc      	ite	gt
 80002e4:	2301      	movgt	r3, #1
 80002e6:	2300      	movle	r3, #0
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80002ec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d00b      	beq.n	800030c <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	627b      	str	r3, [r7, #36]	; 0x24
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002fe:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	623b      	str	r3, [r7, #32]
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	6a3b      	ldr	r3, [r7, #32]
 800030a:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 800030c:	68fa      	ldr	r2, [r7, #12]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	429a      	cmp	r2, r3
 8000312:	dd0b      	ble.n	800032c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	61fb      	str	r3, [r7, #28]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	69fb      	ldr	r3, [r7, #28]
 800031e:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	61bb      	str	r3, [r7, #24]
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	60bb      	str	r3, [r7, #8]
 8000328:	69bb      	ldr	r3, [r7, #24]
 800032a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	b29a      	uxth	r2, r3
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	b29b      	uxth	r3, r3
 8000334:	1ad3      	subs	r3, r2, r3
 8000336:	b29b      	uxth	r3, r3
 8000338:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800033a:	683a      	ldr	r2, [r7, #0]
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	1ad3      	subs	r3, r2, r3
 8000340:	2b00      	cmp	r3, #0
 8000342:	bfb8      	it	lt
 8000344:	425b      	neglt	r3, r3
 8000346:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8000348:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800034c:	0fda      	lsrs	r2, r3, #31
 800034e:	4413      	add	r3, r2
 8000350:	105b      	asrs	r3, r3, #1
 8000352:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000354:	68ba      	ldr	r2, [r7, #8]
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	429a      	cmp	r2, r3
 800035a:	da02      	bge.n	8000362 <GFX_WriteLine+0xaa>
	        ystep = 1;
 800035c:	2301      	movs	r3, #1
 800035e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000360:	e02e      	b.n	80003c0 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 8000362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000366:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8000368:	e02a      	b.n	80003c0 <GFX_WriteLine+0x108>
	        if (steep) {
 800036a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	b21b      	sxth	r3, r3
 8000376:	68fa      	ldr	r2, [r7, #12]
 8000378:	b211      	sxth	r1, r2
 800037a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800037c:	4618      	mov	r0, r3
 800037e:	f000 fad7 	bl	8000930 <ILI9341_WritePixel>
 8000382:	e007      	b.n	8000394 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	b21b      	sxth	r3, r3
 8000388:	68ba      	ldr	r2, [r7, #8]
 800038a:	b211      	sxth	r1, r2
 800038c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800038e:	4618      	mov	r0, r3
 8000390:	f000 face 	bl	8000930 <ILI9341_WritePixel>
	        }
	        err -= dy;
 8000394:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000396:	8abb      	ldrh	r3, [r7, #20]
 8000398:	1ad3      	subs	r3, r2, r3
 800039a:	b29b      	uxth	r3, r3
 800039c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800039e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	da09      	bge.n	80003ba <GFX_WriteLine+0x102>
	            y_start += ystep;
 80003a6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80003aa:	68ba      	ldr	r2, [r7, #8]
 80003ac:	4413      	add	r3, r2
 80003ae:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80003b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80003b2:	8afb      	ldrh	r3, [r7, #22]
 80003b4:	4413      	add	r3, r2
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	3301      	adds	r3, #1
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	ddd0      	ble.n	800036a <GFX_WriteLine+0xb2>
	        }
	    }
}
 80003c8:	bf00      	nop
 80003ca:	bf00      	nop
 80003cc:	3730      	adds	r7, #48	; 0x30
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b086      	sub	sp, #24
 80003d6:	af02      	add	r7, sp, #8
 80003d8:	60f8      	str	r0, [r7, #12]
 80003da:	60b9      	str	r1, [r7, #8]
 80003dc:	607a      	str	r2, [r7, #4]
 80003de:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80003e0:	68ba      	ldr	r2, [r7, #8]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4413      	add	r3, r2
 80003e6:	1e5a      	subs	r2, r3, #1
 80003e8:	887b      	ldrh	r3, [r7, #2]
 80003ea:	9300      	str	r3, [sp, #0]
 80003ec:	4613      	mov	r3, r2
 80003ee:	68fa      	ldr	r2, [r7, #12]
 80003f0:	68b9      	ldr	r1, [r7, #8]
 80003f2:	68f8      	ldr	r0, [r7, #12]
 80003f4:	f7ff ff60 	bl	80002b8 <GFX_WriteLine>
}
 80003f8:	bf00      	nop
 80003fa:	3710      	adds	r7, #16
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af02      	add	r7, sp, #8
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
 800040c:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4413      	add	r3, r2
 8000414:	1e5a      	subs	r2, r3, #1
 8000416:	887b      	ldrh	r3, [r7, #2]
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	68f8      	ldr	r0, [r7, #12]
 8000420:	f7ff ff4a 	bl	80002b8 <GFX_WriteLine>
}
 8000424:	bf00      	nop
 8000426:	3710      	adds	r7, #16
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	4611      	mov	r1, r2
 8000438:	461a      	mov	r2, r3
 800043a:	460b      	mov	r3, r1
 800043c:	80fb      	strh	r3, [r7, #6]
 800043e:	4613      	mov	r3, r2
 8000440:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 8000442:	88fa      	ldrh	r2, [r7, #6]
 8000444:	8b3b      	ldrh	r3, [r7, #24]
 8000446:	68b9      	ldr	r1, [r7, #8]
 8000448:	68f8      	ldr	r0, [r7, #12]
 800044a:	f7ff ffd9 	bl	8000400 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 800044e:	88ba      	ldrh	r2, [r7, #4]
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	4413      	add	r3, r2
 8000454:	1e59      	subs	r1, r3, #1
 8000456:	88fa      	ldrh	r2, [r7, #6]
 8000458:	8b3b      	ldrh	r3, [r7, #24]
 800045a:	68f8      	ldr	r0, [r7, #12]
 800045c:	f7ff ffd0 	bl	8000400 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 8000460:	88ba      	ldrh	r2, [r7, #4]
 8000462:	8b3b      	ldrh	r3, [r7, #24]
 8000464:	68b9      	ldr	r1, [r7, #8]
 8000466:	68f8      	ldr	r0, [r7, #12]
 8000468:	f7ff ffb3 	bl	80003d2 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 800046c:	88fa      	ldrh	r2, [r7, #6]
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	4413      	add	r3, r2
 8000472:	1e58      	subs	r0, r3, #1
 8000474:	88ba      	ldrh	r2, [r7, #4]
 8000476:	8b3b      	ldrh	r3, [r7, #24]
 8000478:	68b9      	ldr	r1, [r7, #8]
 800047a:	f7ff ffaa 	bl	80003d2 <GFX_DrawFastVLine>

}
 800047e:	bf00      	nop
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <GFX_DrawFillTriangle>:
    GFX_DrawLine(x2, y2, x0, y0, color);
}
#endif
#if USING_FILL_TRIANGLE == 1
void GFX_DrawFillTriangle(int x0, int y0, int x1, int y1, int x2, int y2, ColorType color)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	b094      	sub	sp, #80	; 0x50
 800048a:	af00      	add	r7, sp, #0
 800048c:	60f8      	str	r0, [r7, #12]
 800048e:	60b9      	str	r1, [r7, #8]
 8000490:	607a      	str	r2, [r7, #4]
 8000492:	603b      	str	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8000494:	68ba      	ldr	r2, [r7, #8]
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	429a      	cmp	r2, r3
 800049a:	dd0b      	ble.n	80004b4 <GFX_DrawFillTriangle+0x2e>
    	_swap_int(y0, y1); _swap_int(x0, x1);
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004b2:	607b      	str	r3, [r7, #4]
    }
    if (y1 > y2) {
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80004b8:	429a      	cmp	r2, r3
 80004ba:	dd0b      	ble.n	80004d4 <GFX_DrawFillTriangle+0x4e>
    	_swap_int(y2, y1); _swap_int(x2, x1);
 80004bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80004be:	637b      	str	r3, [r7, #52]	; 0x34
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80004c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80004ca:	633b      	str	r3, [r7, #48]	; 0x30
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80004d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004d2:	607b      	str	r3, [r7, #4]
    }
    if (y0 > y1) {
 80004d4:	68ba      	ldr	r2, [r7, #8]
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	429a      	cmp	r2, r3
 80004da:	dd0b      	ble.n	80004f4 <GFX_DrawFillTriangle+0x6e>
    	_swap_int(y0, y1); _swap_int(x0, x1);
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004f2:	607b      	str	r3, [r7, #4]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80004f4:	68ba      	ldr	r2, [r7, #8]
 80004f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d136      	bne.n	800056a <GFX_DrawFillTriangle+0xe4>
        a = b = x0;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000502:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000506:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        if(x1 < a)      a = x1;
 800050a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	429a      	cmp	r2, r3
 8000512:	da03      	bge.n	800051c <GFX_DrawFillTriangle+0x96>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800051a:	e007      	b.n	800052c <GFX_DrawFillTriangle+0xa6>
        else if(x1 > b) b = x1;
 800051c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	429a      	cmp	r2, r3
 8000524:	dd02      	ble.n	800052c <GFX_DrawFillTriangle+0xa6>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        if(x2 < a)      a = x2;
 800052c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000530:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000532:	429a      	cmp	r2, r3
 8000534:	da03      	bge.n	800053e <GFX_DrawFillTriangle+0xb8>
 8000536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000538:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800053c:	e007      	b.n	800054e <GFX_DrawFillTriangle+0xc8>
        else if(x2 > b) b = x2;
 800053e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8000542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000544:	429a      	cmp	r2, r3
 8000546:	dd02      	ble.n	800054e <GFX_DrawFillTriangle+0xc8>
 8000548:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800054a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        GFX_DrawFastHLine(a, y0, b-a+1, color);
 800054e:	f9b7 004e 	ldrsh.w	r0, [r7, #78]	; 0x4e
 8000552:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8000556:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800055a:	1ad3      	subs	r3, r2, r3
 800055c:	1c5a      	adds	r2, r3, #1
 800055e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000562:	68b9      	ldr	r1, [r7, #8]
 8000564:	f7ff ff4c 	bl	8000400 <GFX_DrawFastHLine>
        return;
 8000568:	e0eb      	b.n	8000742 <GFX_DrawFillTriangle+0x2bc>
    }

    int16_t
    dx01 = x1 - x0,
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	b29a      	uxth	r2, r3
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	b29b      	uxth	r3, r3
 8000572:	1ad3      	subs	r3, r2, r3
 8000574:	b29b      	uxth	r3, r3
 8000576:	84fb      	strh	r3, [r7, #38]	; 0x26
    dy01 = y1 - y0,
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	b29a      	uxth	r2, r3
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	b29b      	uxth	r3, r3
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	b29b      	uxth	r3, r3
 8000584:	84bb      	strh	r3, [r7, #36]	; 0x24
    dx02 = x2 - x0,
 8000586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000588:	b29a      	uxth	r2, r3
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	b29b      	uxth	r3, r3
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	b29b      	uxth	r3, r3
 8000592:	847b      	strh	r3, [r7, #34]	; 0x22
    dy02 = y2 - y0,
 8000594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000596:	b29a      	uxth	r2, r3
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	b29b      	uxth	r3, r3
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	b29b      	uxth	r3, r3
 80005a0:	843b      	strh	r3, [r7, #32]
    dx12 = x2 - x1,
 80005a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	83fb      	strh	r3, [r7, #30]
    dy12 = y2 - y1;
 80005b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	83bb      	strh	r3, [r7, #28]
    int32_t
    sa   = 0,
 80005be:	2300      	movs	r3, #0
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
    sb   = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	643b      	str	r3, [r7, #64]	; 0x40
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d103      	bne.n	80005d6 <GFX_DrawFillTriangle+0x150>
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80005d4:	e005      	b.n	80005e2 <GFX_DrawFillTriangle+0x15c>
    else         last = y1-1; // Skip it
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b29b      	uxth	r3, r3
 80005da:	3b01      	subs	r3, #1
 80005dc:	b29b      	uxth	r3, r3
 80005de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    for(y=y0; y<=last; y++) {
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80005e8:	e046      	b.n	8000678 <GFX_DrawFillTriangle+0x1f2>
        a   = x0 + sa / dy01;
 80005ea:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80005ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80005f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	4413      	add	r3, r2
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        b   = x0 + sb / dy02;
 8000602:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000608:	fb92 f3f3 	sdiv	r3, r2, r3
 800060c:	b29a      	uxth	r2, r3
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	b29b      	uxth	r3, r3
 8000612:	4413      	add	r3, r2
 8000614:	b29b      	uxth	r3, r3
 8000616:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        sa += dx01;
 800061a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800061e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000620:	4413      	add	r3, r2
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
        sb += dx02;
 8000624:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800062a:	4413      	add	r3, r2
 800062c:	643b      	str	r3, [r7, #64]	; 0x40
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int(a,b);
 800062e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8000632:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8000636:	429a      	cmp	r2, r3
 8000638:	dd09      	ble.n	800064e <GFX_DrawFillTriangle+0x1c8>
 800063a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000644:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        GFX_DrawFastHLine(a, y, b-a+1, color);
 800064e:	f9b7 004e 	ldrsh.w	r0, [r7, #78]	; 0x4e
 8000652:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 8000656:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 800065a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	1c5a      	adds	r2, r3, #1
 8000662:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000666:	f7ff fecb 	bl	8000400 <GFX_DrawFastHLine>
    for(y=y0; y<=last; y++) {
 800066a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800066e:	b29b      	uxth	r3, r3
 8000670:	3301      	adds	r3, #1
 8000672:	b29b      	uxth	r3, r3
 8000674:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8000678:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 800067c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8000680:	429a      	cmp	r2, r3
 8000682:	ddb2      	ble.n	80005ea <GFX_DrawFillTriangle+0x164>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = dx12 * (y - y1);
 8000684:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000688:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	1a8a      	subs	r2, r1, r2
 8000690:	fb02 f303 	mul.w	r3, r2, r3
 8000694:	647b      	str	r3, [r7, #68]	; 0x44
    sb = dx02 * (y - y0);
 8000696:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800069a:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	1a8a      	subs	r2, r1, r2
 80006a2:	fb02 f303 	mul.w	r3, r2, r3
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
    for(; y<=y2; y++) {
 80006a8:	e046      	b.n	8000738 <GFX_DrawFillTriangle+0x2b2>
        a   = x1 + sa / dy12;
 80006aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80006ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80006b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	4413      	add	r3, r2
 80006bc:	b29b      	uxth	r3, r3
 80006be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        b   = x0 + sb / dy02;
 80006c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80006c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80006c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	4413      	add	r3, r2
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        sa += dx12;
 80006da:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80006e0:	4413      	add	r3, r2
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
        sb += dx02;
 80006e4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80006e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80006ea:	4413      	add	r3, r2
 80006ec:	643b      	str	r3, [r7, #64]	; 0x40
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int(a,b);
 80006ee:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80006f2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80006f6:	429a      	cmp	r2, r3
 80006f8:	dd09      	ble.n	800070e <GFX_DrawFillTriangle+0x288>
 80006fa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80006fe:	61bb      	str	r3, [r7, #24]
 8000700:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000704:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        GFX_DrawFastHLine(a, y, b-a+1, color);
 800070e:	f9b7 004e 	ldrsh.w	r0, [r7, #78]	; 0x4e
 8000712:	f9b7 104a 	ldrsh.w	r1, [r7, #74]	; 0x4a
 8000716:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 800071a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	1c5a      	adds	r2, r3, #1
 8000722:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000726:	f7ff fe6b 	bl	8000400 <GFX_DrawFastHLine>
    for(; y<=y2; y++) {
 800072a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800072e:	b29b      	uxth	r3, r3
 8000730:	3301      	adds	r3, #1
 8000732:	b29b      	uxth	r3, r3
 8000734:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8000738:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800073c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800073e:	429a      	cmp	r2, r3
 8000740:	dab3      	bge.n	80006aa <GFX_DrawFillTriangle+0x224>
    }
}
 8000742:	3750      	adds	r7, #80	; 0x50
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <ILI9341_Delay>:
#include "main.h"

SPI_HandleTypeDef *Tft_hspi;

// Delay for the functions
static void ILI9341_Delay(uint32_t ms) { HAL_Delay(ms); }
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 ff0d 	bl	8001570 <HAL_Delay>
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <ILI9341_SendTFT>:

// Transmit data to ILI controller
static void ILI9341_SendTFT(uint8_t *Data, uint8_t Lenght) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
#if (ILI9341_HAL_OPTIMIZE == 1)
  // !! USE ONLY TFT FOR THIS SPI !!
  // optimizing like this doesnt LOCK SPI for other IT/DMA transfers

  // if there is something to send
  while (Lenght > 0U) {
 800076c:	e014      	b.n	8000798 <ILI9341_SendTFT+0x38>
    /* Wait until TXE flag is set to send data */
    if (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) {
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <ILI9341_SendTFT+0x5c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	2b02      	cmp	r3, #2
 800077c:	d10c      	bne.n	8000798 <ILI9341_SendTFT+0x38>
      // put value from Data pointer to register DR
      *((__IO uint8_t *)&Tft_hspi->Instance->DR) = *Data;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <ILI9341_SendTFT+0x5c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	330c      	adds	r3, #12
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	7812      	ldrb	r2, [r2, #0]
 800078a:	701a      	strb	r2, [r3, #0]
      // increment pointer
      Data++;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3301      	adds	r3, #1
 8000790:	607b      	str	r3, [r7, #4]
      // decrement lenght
      Lenght--;
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	3b01      	subs	r3, #1
 8000796:	70fb      	strb	r3, [r7, #3]
  while (Lenght > 0U) {
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d1e7      	bne.n	800076e <ILI9341_SendTFT+0xe>
    }
  }
  // blocking function for SPI , wait before sending next info
  // it is required beacuse when flag ENABLE is ready
  // it doesnt mean that transfer is ready
  while (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET) {
 800079e:	bf00      	nop
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <ILI9341_SendTFT+0x5c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ac:	2b80      	cmp	r3, #128	; 0x80
 80007ae:	d0f7      	beq.n	80007a0 <ILI9341_SendTFT+0x40>
  // Without HAL optimizng
#else
  HAL_SPI_Transmit(Tft_hspi, Data, Lenght, ILI9341_SPI_TIMEOUT);
}
#endif
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20000034 	.word	0x20000034

080007c0 <ILI9341_SendCommand>:
// Send single command
static void ILI9341_SendCommand(uint8_t Command) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	71fb      	strb	r3, [r7, #7]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC LOW
  ILI9341_DC_LOW;
 80007ca:	2200      	movs	r2, #0
 80007cc:	2102      	movs	r1, #2
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <ILI9341_SendCommand+0x28>)
 80007d0:	f001 fb8a 	bl	8001ee8 <HAL_GPIO_WritePin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	2101      	movs	r1, #1
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ffc1 	bl	8000760 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40010c00 	.word	0x40010c00

080007ec <ILI9341_SendCommandAndData>:
}
#endif

// Send command then data
static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data,
                                       uint16_t Lenght) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	6039      	str	r1, [r7, #0]
 80007f6:	71fb      	strb	r3, [r7, #7]
 80007f8:	4613      	mov	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC LOW
  ILI9341_DC_LOW;
 80007fc:	2200      	movs	r2, #0
 80007fe:	2102      	movs	r1, #2
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <ILI9341_SendCommandAndData+0x44>)
 8000802:	f001 fb71 	bl	8001ee8 <HAL_GPIO_WritePin>

  // SEND COMMAND
  ILI9341_SendTFT(&Command, 1);
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	2101      	movs	r1, #1
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ffa8 	bl	8000760 <ILI9341_SendTFT>

  // DC HIGH
  ILI9341_DC_HIGH;
 8000810:	2201      	movs	r2, #1
 8000812:	2102      	movs	r1, #2
 8000814:	4806      	ldr	r0, [pc, #24]	; (8000830 <ILI9341_SendCommandAndData+0x44>)
 8000816:	f001 fb67 	bl	8001ee8 <HAL_GPIO_WritePin>

  // SEND DATA
  ILI9341_SendTFT(Data, Lenght);
 800081a:	88bb      	ldrh	r3, [r7, #4]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	6838      	ldr	r0, [r7, #0]
 8000822:	f7ff ff9d 	bl	8000760 <ILI9341_SendTFT>

  // CS HIGH
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_HIGH;
#endif
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40010c00 	.word	0x40010c00

08000834 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t Rotation) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  if (Rotation > 3) return;
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b03      	cmp	r3, #3
 8000842:	d820      	bhi.n	8000886 <ILI9341_SetRotation+0x52>

  switch (Rotation) {
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b03      	cmp	r3, #3
 8000848:	d816      	bhi.n	8000878 <ILI9341_SetRotation+0x44>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <ILI9341_SetRotation+0x1c>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	08000861 	.word	0x08000861
 8000854:	08000867 	.word	0x08000867
 8000858:	0800086d 	.word	0x0800086d
 800085c:	08000873 	.word	0x08000873
    case 0:
      Rotation = (MADCTL_MX | MADCTL_BGR);
 8000860:	2348      	movs	r3, #72	; 0x48
 8000862:	71fb      	strb	r3, [r7, #7]
      break;
 8000864:	e008      	b.n	8000878 <ILI9341_SetRotation+0x44>
    case 1:
      Rotation = (MADCTL_MV | MADCTL_BGR);
 8000866:	2328      	movs	r3, #40	; 0x28
 8000868:	71fb      	strb	r3, [r7, #7]
      break;
 800086a:	e005      	b.n	8000878 <ILI9341_SetRotation+0x44>
    case 2:
      Rotation = (MADCTL_MY | MADCTL_BGR);
 800086c:	2388      	movs	r3, #136	; 0x88
 800086e:	71fb      	strb	r3, [r7, #7]
      break;
 8000870:	e002      	b.n	8000878 <ILI9341_SetRotation+0x44>
    case 3:
      Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000872:	23e8      	movs	r3, #232	; 0xe8
 8000874:	71fb      	strb	r3, [r7, #7]
      break;
 8000876:	bf00      	nop
  }

  ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	2201      	movs	r2, #1
 800087c:	4619      	mov	r1, r3
 800087e:	2036      	movs	r0, #54	; 0x36
 8000880:	f7ff ffb4 	bl	80007ec <ILI9341_SendCommandAndData>
 8000884:	e000      	b.n	8000888 <ILI9341_SetRotation+0x54>
  if (Rotation > 3) return;
 8000886:	bf00      	nop
}
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop

08000890 <ILI9341_SetAddrWindow>:

// Set adress range window
static void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w,
                                  uint16_t h) {
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	4604      	mov	r4, r0
 8000898:	4608      	mov	r0, r1
 800089a:	4611      	mov	r1, r2
 800089c:	461a      	mov	r2, r3
 800089e:	4623      	mov	r3, r4
 80008a0:	80fb      	strh	r3, [r7, #6]
 80008a2:	4603      	mov	r3, r0
 80008a4:	80bb      	strh	r3, [r7, #4]
 80008a6:	460b      	mov	r3, r1
 80008a8:	807b      	strh	r3, [r7, #2]
 80008aa:	4613      	mov	r3, r2
 80008ac:	803b      	strh	r3, [r7, #0]
  // prepare buffer for data
  uint8_t DataToTransfer[4];

  // calculate ranges
  uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 80008ae:	88fa      	ldrh	r2, [r7, #6]
 80008b0:	887b      	ldrh	r3, [r7, #2]
 80008b2:	4413      	add	r3, r2
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	3b01      	subs	r3, #1
 80008b8:	81fb      	strh	r3, [r7, #14]
 80008ba:	88ba      	ldrh	r2, [r7, #4]
 80008bc:	883b      	ldrh	r3, [r7, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	3b01      	subs	r3, #1
 80008c4:	81bb      	strh	r3, [r7, #12]

  //	put data into buffer
  DataToTransfer[0] = (x1 >> 8);
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = x1 & 0xFF;
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (x2 >> 8);
 80008d6:	89fb      	ldrh	r3, [r7, #14]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	b29b      	uxth	r3, r3
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = x2 & 0xFF;
 80008e0:	89fb      	ldrh	r3, [r7, #14]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	72fb      	strb	r3, [r7, #11]

  // send command and data about x
  ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4);
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	2204      	movs	r2, #4
 80008ec:	4619      	mov	r1, r3
 80008ee:	202a      	movs	r0, #42	; 0x2a
 80008f0:	f7ff ff7c 	bl	80007ec <ILI9341_SendCommandAndData>

  //	put data into buffer
  DataToTransfer[0] = (y1 >> 8);
 80008f4:	88bb      	ldrh	r3, [r7, #4]
 80008f6:	0a1b      	lsrs	r3, r3, #8
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	723b      	strb	r3, [r7, #8]
  DataToTransfer[1] = y1 & 0xFF;
 80008fe:	88bb      	ldrh	r3, [r7, #4]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	727b      	strb	r3, [r7, #9]
  DataToTransfer[2] = (y2 >> 8);
 8000904:	89bb      	ldrh	r3, [r7, #12]
 8000906:	0a1b      	lsrs	r3, r3, #8
 8000908:	b29b      	uxth	r3, r3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	72bb      	strb	r3, [r7, #10]
  DataToTransfer[3] = y2 & 0xFF;
 800090e:	89bb      	ldrh	r3, [r7, #12]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	72fb      	strb	r3, [r7, #11]

  // send command and data about y
  ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4);
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2204      	movs	r2, #4
 800091a:	4619      	mov	r1, r3
 800091c:	202b      	movs	r0, #43	; 0x2b
 800091e:	f7ff ff65 	bl	80007ec <ILI9341_SendCommandAndData>

  ILI9341_SendCommand(ILI9341_RAMWR);  // Write to RAM
 8000922:	202c      	movs	r0, #44	; 0x2c
 8000924:	f7ff ff4c 	bl	80007c0 <ILI9341_SendCommand>
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	bd90      	pop	{r4, r7, pc}

08000930 <ILI9341_WritePixel>:

// Write single pixel
void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
 800093a:	460b      	mov	r3, r1
 800093c:	80bb      	strh	r3, [r7, #4]
 800093e:	4613      	mov	r3, r2
 8000940:	807b      	strh	r3, [r7, #2]
  // prepare buffer for data
  uint8_t DataToTransfer[2];

  // check TFT range to not overwrite something else
  if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) &&
 8000942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000946:	2b00      	cmp	r3, #0
 8000948:	db21      	blt.n	800098e <ILI9341_WritePixel+0x5e>
 800094a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800094e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000952:	da1c      	bge.n	800098e <ILI9341_WritePixel+0x5e>
 8000954:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db18      	blt.n	800098e <ILI9341_WritePixel+0x5e>
 800095c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000960:	2bef      	cmp	r3, #239	; 0xef
 8000962:	dc14      	bgt.n	800098e <ILI9341_WritePixel+0x5e>
      (y < ILI9341_TFTHEIGHT)) {
    //	put data into buffer
    DataToTransfer[0] = (color >> 8);
 8000964:	887b      	ldrh	r3, [r7, #2]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	b29b      	uxth	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	733b      	strb	r3, [r7, #12]
    DataToTransfer[1] = color & 0xFF;
 800096e:	887b      	ldrh	r3, [r7, #2]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	737b      	strb	r3, [r7, #13]

    // Set window range the single pixel in tft
    // x,y positions 1,1 ranges
    ILI9341_SetAddrWindow(x, y, 1, 1);
 8000974:	88f8      	ldrh	r0, [r7, #6]
 8000976:	88b9      	ldrh	r1, [r7, #4]
 8000978:	2301      	movs	r3, #1
 800097a:	2201      	movs	r2, #1
 800097c:	f7ff ff88 	bl	8000890 <ILI9341_SetAddrWindow>

    // send command that we are writing to RAM, and also color data
    ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2202      	movs	r2, #2
 8000986:	4619      	mov	r1, r3
 8000988:	202c      	movs	r0, #44	; 0x2c
 800098a:	f7ff ff2f 	bl	80007ec <ILI9341_SendCommandAndData>
    // Send 16 bit color to that range
  }
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <ILI9341_ClearDisplay>:
    ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w * h * 2));
  }
}

// Clear whole dipslay with a color
void ILI9341_ClearDisplay(uint16_t color) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	80fb      	strh	r3, [r7, #6]
  uint32_t Lenght = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 80009a2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80009a6:	60fb      	str	r3, [r7, #12]

  // set window for whole screen
  ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 80009a8:	23f0      	movs	r3, #240	; 0xf0
 80009aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80009ae:	2100      	movs	r1, #0
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff ff6d 	bl	8000890 <ILI9341_SetAddrWindow>

  // send command that we are writing to RAM
  ILI9341_SendCommand(ILI9341_RAMWR);
 80009b6:	202c      	movs	r0, #44	; 0x2c
 80009b8:	f7ff ff02 	bl	80007c0 <ILI9341_SendCommand>
#if (ILI9341_USE_CS == 1)
  ILI9341_CS_LOW;
#endif

  // DC HIGH
  ILI9341_DC_HIGH;
 80009bc:	2201      	movs	r2, #1
 80009be:	2102      	movs	r1, #2
 80009c0:	481c      	ldr	r0, [pc, #112]	; (8000a34 <ILI9341_ClearDisplay+0x9c>)
 80009c2:	f001 fa91 	bl	8001ee8 <HAL_GPIO_WritePin>

  while (Lenght > 0U) {
 80009c6:	e023      	b.n	8000a10 <ILI9341_ClearDisplay+0x78>
    /* Wait until TXE flag is set to send data */
    if (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) {
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <ILI9341_ClearDisplay+0xa0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d11b      	bne.n	8000a10 <ILI9341_ClearDisplay+0x78>
      // put value from Data pointer to register DR
      *((__IO uint8_t *)&Tft_hspi->Instance->DR) = color >> 8;
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	0a1b      	lsrs	r3, r3, #8
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <ILI9341_ClearDisplay+0xa0>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	330c      	adds	r3, #12
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	701a      	strb	r2, [r3, #0]

      // wait for the flag to be reset before sending next byte
      while (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET) {
 80009ea:	bf00      	nop
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <ILI9341_ClearDisplay+0xa0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f003 0302 	and.w	r3, r3, #2
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d1f7      	bne.n	80009ec <ILI9341_ClearDisplay+0x54>
      }

      // put second byte in
      *((__IO uint8_t *)&Tft_hspi->Instance->DR) = color & 0xFF;
 80009fc:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <ILI9341_ClearDisplay+0xa0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	330c      	adds	r3, #12
 8000a04:	88fa      	ldrh	r2, [r7, #6]
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	701a      	strb	r2, [r3, #0]

      // decrement lenght
      Lenght--;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
  while (Lenght > 0U) {
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d1d8      	bne.n	80009c8 <ILI9341_ClearDisplay+0x30>
  }

  // blocking function for SPI , wait before sending next info
  // it is required beacuse when flag ENABLE is ready
  // it doesnt mean that transfer is ready
  while (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET) {
 8000a16:	bf00      	nop
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <ILI9341_ClearDisplay+0xa0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a24:	2b80      	cmp	r3, #128	; 0x80
 8000a26:	d0f7      	beq.n	8000a18 <ILI9341_ClearDisplay+0x80>
  // without HAL optimizing
  for (uint32_t i = 0; i < Lenght; i++) {
    ILI9341_SendData16(color);
  }
#endif
}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40010c00 	.word	0x40010c00
 8000a38:	20000034 	.word	0x20000034

08000a3c <ILI9341_Init>:
    ILI9341_DISPON,
    0x80,  // Display on
    0x00   // End of list
};

void ILI9341_Init(SPI_HandleTypeDef *hspi) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  // assign correct spi
  Tft_hspi = hspi;
 8000a44:	4a24      	ldr	r2, [pc, #144]	; (8000ad8 <ILI9341_Init+0x9c>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6013      	str	r3, [r2, #0]

  // prepare data

  uint8_t cmd, x, numArgs;
  const uint8_t *addr = initcmd;
 8000a4a:	4b24      	ldr	r3, [pc, #144]	; (8000adc <ILI9341_Init+0xa0>)
 8000a4c:	60fb      	str	r3, [r7, #12]

#if (ILI9341_HAL_OPTIMIZE == 1)
  __HAL_SPI_ENABLE(hspi);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a5c:	601a      	str	r2, [r3, #0]
#endif

// if hardware reset is defined
#if (ILI9341_USE_HW_RESET == 1)
  ILI9341_RST_LOW;
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a64:	481e      	ldr	r0, [pc, #120]	; (8000ae0 <ILI9341_Init+0xa4>)
 8000a66:	f001 fa3f 	bl	8001ee8 <HAL_GPIO_WritePin>
  ILI9341_Delay(10);
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f7ff fe6c 	bl	8000748 <ILI9341_Delay>
  ILI9341_RST_HIGH;
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a76:	481a      	ldr	r0, [pc, #104]	; (8000ae0 <ILI9341_Init+0xa4>)
 8000a78:	f001 fa36 	bl	8001ee8 <HAL_GPIO_WritePin>
  ILI9341_Delay(10);
 8000a7c:	200a      	movs	r0, #10
 8000a7e:	f7ff fe63 	bl	8000748 <ILI9341_Delay>
  ILI9341_SendCommand(ILI9341_SWRESET);  // Engage software reset
  ILI9341_Delay(150);
#endif

  // As long as value under address is not 0 loop
  while ((cmd = *(addr++)) > 0) {
 8000a82:	e01a      	b.n	8000aba <ILI9341_Init+0x7e>
    // assign value form address to x (second value that is number of data to be
    // send)
    x = *(addr++);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	60fa      	str	r2, [r7, #12]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	72bb      	strb	r3, [r7, #10]

    // mask this value to maximum of 127
    // 0x7F	0111 1111
    // so if we send 0x80 as second argument then we just send command ->
    // without data
    numArgs = x & 0x7F;
 8000a8e:	7abb      	ldrb	r3, [r7, #10]
 8000a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a94:	727b      	strb	r3, [r7, #9]

    // send command then array of data
    ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs);
 8000a96:	7a7b      	ldrb	r3, [r7, #9]
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	7afb      	ldrb	r3, [r7, #11]
 8000a9c:	68f9      	ldr	r1, [r7, #12]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fea4 	bl	80007ec <ILI9341_SendCommandAndData>

    // move adress to next command
    addr += numArgs;
 8000aa4:	7a7b      	ldrb	r3, [r7, #9]
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]

    // if only command is sent then make a delay
    if (x & 0x80) {
 8000aac:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	da02      	bge.n	8000aba <ILI9341_Init+0x7e>
      ILI9341_Delay(150);
 8000ab4:	2096      	movs	r0, #150	; 0x96
 8000ab6:	f7ff fe47 	bl	8000748 <ILI9341_Delay>
  while ((cmd = *(addr++)) > 0) {
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	1c5a      	adds	r2, r3, #1
 8000abe:	60fa      	str	r2, [r7, #12]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	72fb      	strb	r3, [r7, #11]
 8000ac4:	7afb      	ldrb	r3, [r7, #11]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1dc      	bne.n	8000a84 <ILI9341_Init+0x48>
    }
  }

  ILI9341_SetRotation(ILI9341_ROTATION);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff feb2 	bl	8000834 <ILI9341_SetRotation>
}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000034 	.word	0x20000034
 8000adc:	080030e8 	.word	0x080030e8
 8000ae0:	40010c00 	.word	0x40010c00

08000ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_DMA_Init+0x38>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <MX_DMA_Init+0x38>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6153      	str	r3, [r2, #20]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_DMA_Init+0x38>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	200d      	movs	r0, #13
 8000b08:	f000 fe2d 	bl	8001766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b0c:	200d      	movs	r0, #13
 8000b0e:	f000 fe46 	bl	800179e <HAL_NVIC_EnableIRQ>

}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <MX_GPIO_Init+0x90>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <MX_GPIO_Init+0x90>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_GPIO_Init+0x90>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_GPIO_Init+0x90>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <MX_GPIO_Init+0x90>)
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_GPIO_Init+0x90>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_DC_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f240 4102 	movw	r1, #1026	; 0x402
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <MX_GPIO_Init+0x94>)
 8000b6c:	f001 f9bc 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_RST_Pin;
 8000b70:	f240 4302 	movw	r3, #1026	; 0x402
 8000b74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	4619      	mov	r1, r3
 8000b88:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <MX_GPIO_Init+0x94>)
 8000b8a:	f001 f833 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BUTTON_LEFT_Pin|BUTTON_RIGHT_Pin|BUTTON_DOWN_Pin|BUTTON_UP_Pin
 8000b8e:	23f8      	movs	r3, #248	; 0xf8
 8000b90:	60bb      	str	r3, [r7, #8]
                          |BUTTON_ENTER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_GPIO_Init+0x98>)
 8000b94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_GPIO_Init+0x94>)
 8000ba2:	f001 f827 	bl	8001bf4 <HAL_GPIO_Init>

}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40010c00 	.word	0x40010c00
 8000bb8:	10210000 	.word	0x10210000

08000bbc <hmi_draw_main_screen>:

static void draw_cursor(ColorType color);

// draw functions
// draw main menu at the warm up
static void hmi_draw_main_screen(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af02      	add	r7, sp, #8
  GFX_DrawRectangle(OFFSET_X_LEFT_BORDER, OFFSET_Y_TITLE, TITLE_TILE_WIDTH,
 8000bc2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	231b      	movs	r3, #27
 8000bca:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8000bce:	2101      	movs	r1, #1
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f7ff fc2b 	bl	800042c <GFX_DrawRectangle>
                    TITLE_TILE_HEIGHT, HMI_TILE_COLOR);

  for (uint8_t j = 0; j < 2; j++) {
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	71fb      	strb	r3, [r7, #7]
 8000bda:	e022      	b.n	8000c22 <hmi_draw_main_screen+0x66>
    for (uint8_t i = 0; i < 5; i++) {
 8000bdc:	2300      	movs	r3, #0
 8000bde:	71bb      	strb	r3, [r7, #6]
 8000be0:	e019      	b.n	8000c16 <hmi_draw_main_screen+0x5a>
      GFX_DrawRectangle((j * OFFSET_X_SECOND_COLUMN) + OFFSET_X_LEFT_BORDER,
 8000be2:	79fa      	ldrb	r2, [r7, #7]
 8000be4:	4613      	mov	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	015b      	lsls	r3, r3, #5
 8000bec:	1a9b      	subs	r3, r3, r2
 8000bee:	3303      	adds	r3, #3
 8000bf0:	4618      	mov	r0, r3
                        (i * 41) + 29, HMI_BUTTON_WIDTH, HMI_TILE_HEIGHT,
 8000bf2:	79ba      	ldrb	r2, [r7, #6]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	4413      	add	r3, r2
      GFX_DrawRectangle((j * OFFSET_X_SECOND_COLUMN) + OFFSET_X_LEFT_BORDER,
 8000bfe:	f103 011d 	add.w	r1, r3, #29
 8000c02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2328      	movs	r3, #40	; 0x28
 8000c0a:	229b      	movs	r2, #155	; 0x9b
 8000c0c:	f7ff fc0e 	bl	800042c <GFX_DrawRectangle>
    for (uint8_t i = 0; i < 5; i++) {
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	3301      	adds	r3, #1
 8000c14:	71bb      	strb	r3, [r7, #6]
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	d9e2      	bls.n	8000be2 <hmi_draw_main_screen+0x26>
  for (uint8_t j = 0; j < 2; j++) {
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	71fb      	strb	r3, [r7, #7]
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d9d9      	bls.n	8000bdc <hmi_draw_main_screen+0x20>
                        HMI_TILE_COLOR);
    }
  }

  draw_cursor(ILI9341_DARKCYAN);
 8000c28:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8000c2c:	f000 f804 	bl	8000c38 <draw_cursor>
  return;
 8000c30:	bf00      	nop
}
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <draw_cursor>:

  return;
}

// draw active tile where the cursor is
static void draw_cursor(ColorType color) {
 8000c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3a:	b08f      	sub	sp, #60	; 0x3c
 8000c3c:	af04      	add	r7, sp, #16
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80fb      	strh	r3, [r7, #6]
  uint8_t column = screen.active_button / 5;
 8000c42:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <draw_cursor+0xc4>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	4a2e      	ldr	r2, [pc, #184]	; (8000d00 <draw_cursor+0xc8>)
 8000c48:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4c:	089b      	lsrs	r3, r3, #2
 8000c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t row = screen.active_button % 5;
 8000c52:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <draw_cursor+0xc4>)
 8000c54:	781a      	ldrb	r2, [r3, #0]
 8000c56:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <draw_cursor+0xc8>)
 8000c58:	fba3 1302 	umull	r1, r3, r3, r2
 8000c5c:	0899      	lsrs	r1, r3, #2
 8000c5e:	460b      	mov	r3, r1
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	440b      	add	r3, r1
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  uint32_t x0_pos =
      (column * OFFSET_X_SECOND_COLUMN) + 1 + OFFSET_X_LEFT_BORDER;
 8000c6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c6e:	4613      	mov	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	015b      	lsls	r3, r3, #5
 8000c76:	1a9b      	subs	r3, r3, r2
  uint32_t x0_pos =
 8000c78:	3304      	adds	r3, #4
 8000c7a:	623b      	str	r3, [r7, #32]
  uint32_t y0_pos = (row * 41) + OFFSET_Y_FIRST_TILE + 1;
 8000c7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	4413      	add	r3, r2
 8000c8a:	331f      	adds	r3, #31
 8000c8c:	61fb      	str	r3, [r7, #28]

  uint32_t x1_pos =
      (column * OFFSET_X_SECOND_COLUMN) + 1 + OFFSET_X_LEFT_BORDER;
 8000c8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c92:	4613      	mov	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	015b      	lsls	r3, r3, #5
 8000c9a:	1a9b      	subs	r3, r3, r2
  uint32_t x1_pos =
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	61bb      	str	r3, [r7, #24]
  uint32_t y1_pos = (row * 41) + OFFSET_Y_FIRST_TILE + HMI_TILE_HEIGHT - 3;
 8000ca0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	4413      	add	r3, r2
 8000cae:	3343      	adds	r3, #67	; 0x43
 8000cb0:	617b      	str	r3, [r7, #20]

  uint32_t x2_pos = (column * OFFSET_X_SECOND_COLUMN) + 1 +
 8000cb2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	015b      	lsls	r3, r3, #5
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	3316      	adds	r3, #22
 8000cc2:	613b      	str	r3, [r7, #16]
                    OFFSET_X_LEFT_BORDER + OFFSET_X_CURSOR_POINTER;
  uint32_t y2_pos = (row * 41) + OFFSET_Y_FIRST_TILE - 1 + HMI_TILE_HEIGHT / 2;
 8000cc4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3331      	adds	r3, #49	; 0x31
 8000cd4:	60fb      	str	r3, [r7, #12]

  GFX_DrawFillTriangle(x0_pos, y0_pos, x1_pos, y1_pos, x2_pos, y2_pos, color);
 8000cd6:	6a38      	ldr	r0, [r7, #32]
 8000cd8:	69fc      	ldr	r4, [r7, #28]
 8000cda:	69bd      	ldr	r5, [r7, #24]
 8000cdc:	697e      	ldr	r6, [r7, #20]
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	88f9      	ldrh	r1, [r7, #6]
 8000ce4:	9102      	str	r1, [sp, #8]
 8000ce6:	9201      	str	r2, [sp, #4]
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	4633      	mov	r3, r6
 8000cec:	462a      	mov	r2, r5
 8000cee:	4621      	mov	r1, r4
 8000cf0:	f7ff fbc9 	bl	8000486 <GFX_DrawFillTriangle>

  return;
 8000cf4:	bf00      	nop
}
 8000cf6:	372c      	adds	r7, #44	; 0x2c
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cfc:	20000138 	.word	0x20000138
 8000d00:	cccccccd 	.word	0xcccccccd

08000d04 <change_active_tile_number>:

static void change_active_tile_number(buttons_state_t pending_flag) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  if (pending_flag == LEFT_FLAG) {
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d111      	bne.n	8000d38 <change_active_tile_number+0x34>
    screen.active_button = (screen.active_button + 5) % 10;
 8000d14:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <change_active_tile_number+0xec>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	1d5a      	adds	r2, r3, #5
 8000d1a:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <change_active_tile_number+0xf0>)
 8000d1c:	fb83 1302 	smull	r1, r3, r3, r2
 8000d20:	1099      	asrs	r1, r3, #2
 8000d22:	17d3      	asrs	r3, r2, #31
 8000d24:	1ac9      	subs	r1, r1, r3
 8000d26:	460b      	mov	r3, r1
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	1ad1      	subs	r1, r2, r3
 8000d30:	b2ca      	uxtb	r2, r1
 8000d32:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <change_active_tile_number+0xec>)
 8000d34:	701a      	strb	r2, [r3, #0]
  } else if (pending_flag == DOWN_FLAG) {
    screen.active_button =
        (screen.active_button + 1) % 5 + (5 * (screen.active_button / 5));
  }

  return;
 8000d36:	e056      	b.n	8000de6 <change_active_tile_number+0xe2>
  } else if (pending_flag == RIGHT_FLAG) {
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d111      	bne.n	8000d62 <change_active_tile_number+0x5e>
    screen.active_button = (screen.active_button + 5) % 10;
 8000d3e:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <change_active_tile_number+0xec>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	1d5a      	adds	r2, r3, #5
 8000d44:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <change_active_tile_number+0xf0>)
 8000d46:	fb83 1302 	smull	r1, r3, r3, r2
 8000d4a:	1099      	asrs	r1, r3, #2
 8000d4c:	17d3      	asrs	r3, r2, #31
 8000d4e:	1ac9      	subs	r1, r1, r3
 8000d50:	460b      	mov	r3, r1
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	440b      	add	r3, r1
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	1ad1      	subs	r1, r2, r3
 8000d5a:	b2ca      	uxtb	r2, r1
 8000d5c:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <change_active_tile_number+0xec>)
 8000d5e:	701a      	strb	r2, [r3, #0]
  return;
 8000d60:	e041      	b.n	8000de6 <change_active_tile_number+0xe2>
  } else if (pending_flag == UP_FLAG) {
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d11d      	bne.n	8000da4 <change_active_tile_number+0xa0>
        (screen.active_button + 4) % 5 + (5 * (screen.active_button / 5));
 8000d68:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <change_active_tile_number+0xec>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	1d1a      	adds	r2, r3, #4
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <change_active_tile_number+0xf0>)
 8000d70:	fb83 1302 	smull	r1, r3, r3, r2
 8000d74:	1059      	asrs	r1, r3, #1
 8000d76:	17d3      	asrs	r3, r2, #31
 8000d78:	1ac9      	subs	r1, r1, r3
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	440b      	add	r3, r1
 8000d80:	1ad1      	subs	r1, r2, r3
 8000d82:	b2ca      	uxtb	r2, r1
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <change_active_tile_number+0xec>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	491b      	ldr	r1, [pc, #108]	; (8000df8 <change_active_tile_number+0xf4>)
 8000d8a:	fba1 1303 	umull	r1, r3, r1, r3
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	4619      	mov	r1, r3
 8000d94:	0089      	lsls	r1, r1, #2
 8000d96:	440b      	add	r3, r1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	b2da      	uxtb	r2, r3
    screen.active_button =
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <change_active_tile_number+0xec>)
 8000da0:	701a      	strb	r2, [r3, #0]
  return;
 8000da2:	e020      	b.n	8000de6 <change_active_tile_number+0xe2>
  } else if (pending_flag == DOWN_FLAG) {
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d11d      	bne.n	8000de6 <change_active_tile_number+0xe2>
        (screen.active_button + 1) % 5 + (5 * (screen.active_button / 5));
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <change_active_tile_number+0xec>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <change_active_tile_number+0xf0>)
 8000db2:	fb83 1302 	smull	r1, r3, r3, r2
 8000db6:	1059      	asrs	r1, r3, #1
 8000db8:	17d3      	asrs	r3, r2, #31
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	1ad1      	subs	r1, r2, r3
 8000dc4:	b2ca      	uxtb	r2, r1
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <change_active_tile_number+0xec>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	490b      	ldr	r1, [pc, #44]	; (8000df8 <change_active_tile_number+0xf4>)
 8000dcc:	fba1 1303 	umull	r1, r3, r1, r3
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	0089      	lsls	r1, r1, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	4413      	add	r3, r2
 8000dde:	b2da      	uxtb	r2, r3
    screen.active_button =
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <change_active_tile_number+0xec>)
 8000de2:	701a      	strb	r2, [r3, #0]
  return;
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
}
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	20000138 	.word	0x20000138
 8000df4:	66666667 	.word	0x66666667
 8000df8:	cccccccd 	.word	0xcccccccd

08000dfc <change_cursor_position>:

static void change_cursor_position(buttons_state_t pending_flag) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  // erase active tile
  draw_cursor(HMI_BACKGROUND_COLOR);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff ff16 	bl	8000c38 <draw_cursor>
  change_active_tile_number(pending_flag);
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff78 	bl	8000d04 <change_active_tile_number>
  // draw new active tile
  draw_cursor(HMI_CURSOR_COLOR);
 8000e14:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8000e18:	f7ff ff0e 	bl	8000c38 <draw_cursor>
  buttons_reset_flag(pending_flag);
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff f9fc 	bl	800021c <buttons_reset_flag>

  return;
 8000e24:	bf00      	nop
}
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <check_pending_flags>:

static void check_pending_flags(void) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  buttons_state_t pending_flag = buttons_check_flag();
 8000e32:	f7ff f9bf 	bl	80001b4 <buttons_check_flag>
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]

  if (IDLE != pending_flag) {
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00d      	beq.n	8000e5c <check_pending_flags+0x30>
    switch (pending_flag) {
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	dc02      	bgt.n	8000e4c <check_pending_flags+0x20>
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	dc03      	bgt.n	8000e52 <check_pending_flags+0x26>
      case (ENTER_FLAG):
        // enter menu
        break;
      case (IDLE):
      default:
        break;
 8000e4a:	e00a      	b.n	8000e62 <check_pending_flags+0x36>
    switch (pending_flag) {
 8000e4c:	2b05      	cmp	r3, #5
 8000e4e:	d007      	beq.n	8000e60 <check_pending_flags+0x34>
        break;
 8000e50:	e007      	b.n	8000e62 <check_pending_flags+0x36>
        change_cursor_position(pending_flag);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ffd1 	bl	8000dfc <change_cursor_position>
        break;
 8000e5a:	e002      	b.n	8000e62 <check_pending_flags+0x36>
    }
  }
 8000e5c:	bf00      	nop
 8000e5e:	e000      	b.n	8000e62 <check_pending_flags+0x36>
        break;
 8000e60:	bf00      	nop

  return;
 8000e62:	bf00      	nop
}
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <hmi_read_eeprom>:

static void hmi_read_eeprom(void) { state = INIT_TFT; }
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <hmi_read_eeprom+0x14>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000204 	.word	0x20000204

08000e84 <hmi_init_tft>:

// init tft and draw main screen
static void hmi_init_tft(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  ILI9341_Init(&hspi1);
 8000e88:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <hmi_init_tft+0x2c>)
 8000e8a:	f7ff fdd7 	bl	8000a3c <ILI9341_Init>
  ILI9341_ClearDisplay(HMI_BACKGROUND_COLOR);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f7ff fd82 	bl	8000998 <ILI9341_ClearDisplay>
  GFX_SetFont(font_8x5);
 8000e94:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <hmi_init_tft+0x30>)
 8000e96:	f7ff fa01 	bl	800029c <GFX_SetFont>
  screen.active_button = 0;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <hmi_init_tft+0x34>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
  hmi_draw_main_screen();
 8000ea0:	f7ff fe8c 	bl	8000bbc <hmi_draw_main_screen>
  state = ACTIVE_SCREEN;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <hmi_init_tft+0x38>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	701a      	strb	r2, [r3, #0]
  return;
 8000eaa:	bf00      	nop
}
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000208 	.word	0x20000208
 8000eb4:	08003158 	.word	0x08003158
 8000eb8:	20000138 	.word	0x20000138
 8000ebc:	20000204 	.word	0x20000204

08000ec0 <hmi_active_screen>:

static void hmi_active_screen(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  while (1) {
    // do every tile callback
    for (uint8_t i = 0; i < 10; i++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	e023      	b.n	8000f14 <hmi_active_screen+0x54>
      if (NULL != screen.buttons[i].callback) {
 8000ecc:	79fa      	ldrb	r2, [r7, #7]
 8000ece:	4913      	ldr	r1, [pc, #76]	; (8000f1c <hmi_active_screen+0x5c>)
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	3314      	adds	r3, #20
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d013      	beq.n	8000f0a <hmi_active_screen+0x4a>
        screen.buttons[i].callback(&screen.buttons[i].data);
 8000ee2:	79fa      	ldrb	r2, [r7, #7]
 8000ee4:	490d      	ldr	r1, [pc, #52]	; (8000f1c <hmi_active_screen+0x5c>)
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	3314      	adds	r3, #20
 8000ef2:	6819      	ldr	r1, [r3, #0]
 8000ef4:	79fa      	ldrb	r2, [r7, #7]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	3308      	adds	r3, #8
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <hmi_active_screen+0x5c>)
 8000f02:	4413      	add	r3, r2
 8000f04:	3304      	adds	r3, #4
 8000f06:	4618      	mov	r0, r3
 8000f08:	4788      	blx	r1
      }

      // check if button was pressed
      check_pending_flags();
 8000f0a:	f7ff ff8f 	bl	8000e2c <check_pending_flags>
    for (uint8_t i = 0; i < 10; i++) {
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	3301      	adds	r3, #1
 8000f12:	71fb      	strb	r3, [r7, #7]
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b09      	cmp	r3, #9
 8000f18:	d9d8      	bls.n	8000ecc <hmi_active_screen+0xc>
 8000f1a:	e7d4      	b.n	8000ec6 <hmi_active_screen+0x6>
 8000f1c:	20000138 	.word	0x20000138

08000f20 <hmi_main>:
  }

  return;
}

void hmi_main(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  state = READ_EEPROM;
 8000f24:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <hmi_main+0x48>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
  while (1) {
    switch (state) {
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <hmi_main+0x48>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d8fa      	bhi.n	8000f2a <hmi_main+0xa>
 8000f34:	a201      	add	r2, pc, #4	; (adr r2, 8000f3c <hmi_main+0x1c>)
 8000f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3a:	bf00      	nop
 8000f3c:	08000f4d 	.word	0x08000f4d
 8000f40:	08000f53 	.word	0x08000f53
 8000f44:	08000f59 	.word	0x08000f59
 8000f48:	08000f5f 	.word	0x08000f5f
      case (READ_EEPROM): {
        hmi_read_eeprom();
 8000f4c:	f7ff ff8e 	bl	8000e6c <hmi_read_eeprom>
        break;
 8000f50:	e008      	b.n	8000f64 <hmi_main+0x44>
      }

      case (INIT_TFT): {
        hmi_init_tft();
 8000f52:	f7ff ff97 	bl	8000e84 <hmi_init_tft>
        break;
 8000f56:	e005      	b.n	8000f64 <hmi_main+0x44>
      }

      case (ACTIVE_SCREEN): {
        hmi_active_screen();
 8000f58:	f7ff ffb2 	bl	8000ec0 <hmi_active_screen>
        break;
 8000f5c:	e002      	b.n	8000f64 <hmi_main+0x44>
      }

      case (EDIT_TILE): {
        hmi_active_screen();
 8000f5e:	f7ff ffaf 	bl	8000ec0 <hmi_active_screen>
        break;
 8000f62:	bf00      	nop
    switch (state) {
 8000f64:	e7e1      	b.n	8000f2a <hmi_main+0xa>
 8000f66:	bf00      	nop
 8000f68:	20000204 	.word	0x20000204

08000f6c <HAL_UARTEx_RxEventCallback>:
      }
    }
  }
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
  frame_returned = true;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_UARTEx_RxEventCallback+0x1c>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000205 	.word	0x20000205

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f90:	f000 fa8c 	bl	80014ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f94:	f000 f80d 	bl	8000fb2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f98:	f7ff fdc2 	bl	8000b20 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f9c:	f000 f87c 	bl	8001098 <MX_SPI1_Init>
  MX_DMA_Init();
 8000fa0:	f7ff fda0 	bl	8000ae4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000fa4:	f000 f9bc 	bl	8001320 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000fa8:	f000 f844 	bl	8001034 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */



  hmi_main();
 8000fac:	f7ff ffb8 	bl	8000f20 <hmi_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000fb0:	e7fe      	b.n	8000fb0 <main+0x24>

08000fb2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b090      	sub	sp, #64	; 0x40
 8000fb6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb8:	f107 0318 	add.w	r3, r7, #24
 8000fbc:	2228      	movs	r2, #40	; 0x28
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 f875 	bl	80030b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fdc:	2310      	movs	r3, #16
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000fe8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 ffa8 	bl	8001f48 <HAL_RCC_OscConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ffe:	f000 f845 	bl	800108c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001002:	230f      	movs	r3, #15
 8001004:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001006:	2302      	movs	r3, #2
 8001008:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800100e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001012:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2102      	movs	r1, #2
 800101c:	4618      	mov	r0, r3
 800101e:	f001 fa13 	bl	8002448 <HAL_RCC_ClockConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001028:	f000 f830 	bl	800108c <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	3740      	adds	r7, #64	; 0x40
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	200f      	movs	r0, #15
 800103e:	f000 fb92 	bl	8001766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001042:	200f      	movs	r0, #15
 8001044:	f000 fbab 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	2025      	movs	r0, #37	; 0x25
 800104e:	f000 fb8a 	bl	8001766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001052:	2025      	movs	r0, #37	; 0x25
 8001054:	f000 fba3 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	2017      	movs	r0, #23
 800105e:	f000 fb82 	bl	8001766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001062:	2017      	movs	r0, #23
 8001064:	f000 fb9b 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	200a      	movs	r0, #10
 800106e:	f000 fb7a 	bl	8001766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001072:	200a      	movs	r0, #10
 8001074:	f000 fb93 	bl	800179e <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2009      	movs	r0, #9
 800107e:	f000 fb72 	bl	8001766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001082:	2009      	movs	r0, #9
 8001084:	f000 fb8b 	bl	800179e <HAL_NVIC_EnableIRQ>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001094:	e7fe      	b.n	8001094 <Error_Handler+0x8>
	...

08001098 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_SPI1_Init+0x64>)
 800109e:	4a18      	ldr	r2, [pc, #96]	; (8001100 <MX_SPI1_Init+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_SPI1_Init+0x64>)
 80010a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_SPI1_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_SPI1_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_SPI1_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_SPI1_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_SPI1_Init+0x64>)
 80010c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_SPI1_Init+0x64>)
 80010cc:	2210      	movs	r2, #16
 80010ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <MX_SPI1_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_SPI1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <MX_SPI1_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_SPI1_Init+0x64>)
 80010e4:	220a      	movs	r2, #10
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <MX_SPI1_Init+0x64>)
 80010ea:	f001 fb47 	bl	800277c <HAL_SPI_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010f4:	f7ff ffca 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000208 	.word	0x20000208
 8001100:	40013000 	.word	0x40013000

08001104 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a2e      	ldr	r2, [pc, #184]	; (80011d8 <HAL_SPI_MspInit+0xd4>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d155      	bne.n	80011d0 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <HAL_SPI_MspInit+0xd8>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a2c      	ldr	r2, [pc, #176]	; (80011dc <HAL_SPI_MspInit+0xd8>)
 800112a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <HAL_SPI_MspInit+0xd8>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b27      	ldr	r3, [pc, #156]	; (80011dc <HAL_SPI_MspInit+0xd8>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a26      	ldr	r2, [pc, #152]	; (80011dc <HAL_SPI_MspInit+0xd8>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <HAL_SPI_MspInit+0xd8>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001154:	23a0      	movs	r3, #160	; 0xa0
 8001156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4619      	mov	r1, r3
 8001166:	481e      	ldr	r0, [pc, #120]	; (80011e0 <HAL_SPI_MspInit+0xdc>)
 8001168:	f000 fd44 	bl	8001bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800116c:	2340      	movs	r3, #64	; 0x40
 800116e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4619      	mov	r1, r3
 800117e:	4818      	ldr	r0, [pc, #96]	; (80011e0 <HAL_SPI_MspInit+0xdc>)
 8001180:	f000 fd38 	bl	8001bf4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_SPI_MspInit+0xe0>)
 8001186:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <HAL_SPI_MspInit+0xe4>)
 8001188:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_SPI_MspInit+0xe0>)
 800118c:	2210      	movs	r2, #16
 800118e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <HAL_SPI_MspInit+0xe0>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_SPI_MspInit+0xe0>)
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_SPI_MspInit+0xe0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <HAL_SPI_MspInit+0xe0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_SPI_MspInit+0xe0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <HAL_SPI_MspInit+0xe0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011b4:	480b      	ldr	r0, [pc, #44]	; (80011e4 <HAL_SPI_MspInit+0xe0>)
 80011b6:	f000 fb0d 	bl	80017d4 <HAL_DMA_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 80011c0:	f7ff ff64 	bl	800108c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_SPI_MspInit+0xe0>)
 80011c8:	649a      	str	r2, [r3, #72]	; 0x48
 80011ca:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_SPI_MspInit+0xe0>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011d0:	bf00      	nop
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40013000 	.word	0x40013000
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40010800 	.word	0x40010800
 80011e4:	20000260 	.word	0x20000260
 80011e8:	40020030 	.word	0x40020030

080011ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_MspInit+0x5c>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	4a14      	ldr	r2, [pc, #80]	; (8001248 <HAL_MspInit+0x5c>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6193      	str	r3, [r2, #24]
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_MspInit+0x5c>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_MspInit+0x5c>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <HAL_MspInit+0x5c>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001214:	61d3      	str	r3, [r2, #28]
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_MspInit+0x5c>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_MspInit+0x60>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_MspInit+0x60>)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	40021000 	.word	0x40021000
 800124c:	40010000 	.word	0x40010000

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <NMI_Handler+0x4>

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001296:	f000 f94f 	bl	8001538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}

0800129e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80012a2:	2008      	movs	r0, #8
 80012a4:	f000 fe38 	bl	8001f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80012b0:	2010      	movs	r0, #16
 80012b2:	f000 fe31 	bl	8001f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <DMA1_Channel3_IRQHandler+0x10>)
 80012c2:	f000 fb91 	bl	80019e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000260 	.word	0x20000260

080012d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <DMA1_Channel5_IRQHandler+0x10>)
 80012d6:	f000 fb87 	bl	80019e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200002a4 	.word	0x200002a4

080012e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80012e8:	2020      	movs	r0, #32
 80012ea:	f000 fe15 	bl	8001f18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80012ee:	2040      	movs	r0, #64	; 0x40
 80012f0:	f000 fe12 	bl	8001f18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80012f4:	2080      	movs	r0, #128	; 0x80
 80012f6:	f000 fe0f 	bl	8001f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <USART1_IRQHandler+0x10>)
 8001306:	f001 fb0b 	bl	8002920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200002e8 	.word	0x200002e8

08001314 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <MX_USART1_UART_Init+0x50>)
 8001328:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_USART1_UART_Init+0x4c>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USART1_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_USART1_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_USART1_UART_Init+0x4c>)
 8001358:	f001 fa94 	bl	8002884 <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001362:	f7ff fe93 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200002e8 	.word	0x200002e8
 8001370:	40013800 	.word	0x40013800

08001374 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a2f      	ldr	r2, [pc, #188]	; (800144c <HAL_UART_MspInit+0xd8>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d157      	bne.n	8001444 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_UART_MspInit+0xdc>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a2d      	ldr	r2, [pc, #180]	; (8001450 <HAL_UART_MspInit+0xdc>)
 800139a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_UART_MspInit+0xdc>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ac:	4b28      	ldr	r3, [pc, #160]	; (8001450 <HAL_UART_MspInit+0xdc>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a27      	ldr	r2, [pc, #156]	; (8001450 <HAL_UART_MspInit+0xdc>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b25      	ldr	r3, [pc, #148]	; (8001450 <HAL_UART_MspInit+0xdc>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	4619      	mov	r1, r3
 80013d8:	481e      	ldr	r0, [pc, #120]	; (8001454 <HAL_UART_MspInit+0xe0>)
 80013da:	f000 fc0b 	bl	8001bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4619      	mov	r1, r3
 80013f2:	4818      	ldr	r0, [pc, #96]	; (8001454 <HAL_UART_MspInit+0xe0>)
 80013f4:	f000 fbfe 	bl	8001bf4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_UART_MspInit+0xe4>)
 80013fa:	4a18      	ldr	r2, [pc, #96]	; (800145c <HAL_UART_MspInit+0xe8>)
 80013fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_UART_MspInit+0xe4>)
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <HAL_UART_MspInit+0xe4>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_UART_MspInit+0xe4>)
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_UART_MspInit+0xe4>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <HAL_UART_MspInit+0xe4>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_UART_MspInit+0xe4>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_UART_MspInit+0xe4>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001428:	480b      	ldr	r0, [pc, #44]	; (8001458 <HAL_UART_MspInit+0xe4>)
 800142a:	f000 f9d3 	bl	80017d4 <HAL_DMA_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001434:	f7ff fe2a 	bl	800108c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_UART_MspInit+0xe4>)
 800143c:	639a      	str	r2, [r3, #56]	; 0x38
 800143e:	4a06      	ldr	r2, [pc, #24]	; (8001458 <HAL_UART_MspInit+0xe4>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001444:	bf00      	nop
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40013800 	.word	0x40013800
 8001450:	40021000 	.word	0x40021000
 8001454:	40010800 	.word	0x40010800
 8001458:	200002a4 	.word	0x200002a4
 800145c:	40020058 	.word	0x40020058

08001460 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001460:	480c      	ldr	r0, [pc, #48]	; (8001494 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001462:	490d      	ldr	r1, [pc, #52]	; (8001498 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001468:	e002      	b.n	8001470 <LoopCopyDataInit>

0800146a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146e:	3304      	adds	r3, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001474:	d3f9      	bcc.n	800146a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001478:	4c0a      	ldr	r4, [pc, #40]	; (80014a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800147c:	e001      	b.n	8001482 <LoopFillZerobss>

0800147e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001480:	3204      	adds	r2, #4

08001482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001484:	d3fb      	bcc.n	800147e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001486:	f7ff ff45 	bl	8001314 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148a:	f001 fded 	bl	8003068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800148e:	f7ff fd7d 	bl	8000f8c <main>
  bx lr
 8001492:	4770      	bx	lr
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800149c:	08003358 	.word	0x08003358
  ldr r2, =_sbss
 80014a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014a4:	20000330 	.word	0x20000330

080014a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC1_2_IRQHandler>
	...

080014ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_Init+0x28>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <HAL_Init+0x28>)
 80014b6:	f043 0310 	orr.w	r3, r3, #16
 80014ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 f947 	bl	8001750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c2:	200f      	movs	r0, #15
 80014c4:	f000 f808 	bl	80014d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c8:	f7ff fe90 	bl	80011ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40022000 	.word	0x40022000

080014d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_InitTick+0x54>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_InitTick+0x58>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f95f 	bl	80017ba <HAL_SYSTICK_Config>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e00e      	b.n	8001524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d80a      	bhi.n	8001522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150c:	2200      	movs	r2, #0
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f000 f927 	bl	8001766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <HAL_InitTick+0x5c>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	e000      	b.n	8001524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000000 	.word	0x20000000
 8001530:	20000008 	.word	0x20000008
 8001534:	20000004 	.word	0x20000004

08001538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_IncTick+0x1c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_IncTick+0x20>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	4a03      	ldr	r2, [pc, #12]	; (8001558 <HAL_IncTick+0x20>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	20000008 	.word	0x20000008
 8001558:	2000032c 	.word	0x2000032c

0800155c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b02      	ldr	r3, [pc, #8]	; (800156c <HAL_GetTick+0x10>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	2000032c 	.word	0x2000032c

08001570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001578:	f7ff fff0 	bl	800155c <HAL_GetTick>
 800157c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d005      	beq.n	8001596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_Delay+0x44>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001596:	bf00      	nop
 8001598:	f7ff ffe0 	bl	800155c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d8f7      	bhi.n	8001598 <HAL_Delay+0x28>
  {
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000008 	.word	0x20000008

080015b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ea:	4a04      	ldr	r2, [pc, #16]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	60d3      	str	r3, [r2, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <__NVIC_GetPriorityGrouping+0x18>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 0307 	and.w	r3, r3, #7
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db0b      	blt.n	8001646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f003 021f 	and.w	r2, r3, #31
 8001634:	4906      	ldr	r1, [pc, #24]	; (8001650 <__NVIC_EnableIRQ+0x34>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	2001      	movs	r0, #1
 800163e:	fa00 f202 	lsl.w	r2, r0, r2
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	e000e100 	.word	0xe000e100

08001654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db0a      	blt.n	800167e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	490c      	ldr	r1, [pc, #48]	; (80016a0 <__NVIC_SetPriority+0x4c>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	0112      	lsls	r2, r2, #4
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	440b      	add	r3, r1
 8001678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800167c:	e00a      	b.n	8001694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4908      	ldr	r1, [pc, #32]	; (80016a4 <__NVIC_SetPriority+0x50>)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	3b04      	subs	r3, #4
 800168c:	0112      	lsls	r2, r2, #4
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	440b      	add	r3, r1
 8001692:	761a      	strb	r2, [r3, #24]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f1c3 0307 	rsb	r3, r3, #7
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	bf28      	it	cs
 80016c6:	2304      	movcs	r3, #4
 80016c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3304      	adds	r3, #4
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d902      	bls.n	80016d8 <NVIC_EncodePriority+0x30>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3b03      	subs	r3, #3
 80016d6:	e000      	b.n	80016da <NVIC_EncodePriority+0x32>
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	401a      	ands	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	43d9      	mvns	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	4313      	orrs	r3, r2
         );
}
 8001702:	4618      	mov	r0, r3
 8001704:	3724      	adds	r7, #36	; 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800171c:	d301      	bcc.n	8001722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171e:	2301      	movs	r3, #1
 8001720:	e00f      	b.n	8001742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <SysTick_Config+0x40>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172a:	210f      	movs	r1, #15
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f7ff ff90 	bl	8001654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <SysTick_Config+0x40>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <SysTick_Config+0x40>)
 800173c:	2207      	movs	r2, #7
 800173e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	e000e010 	.word	0xe000e010

08001750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ff2d 	bl	80015b8 <__NVIC_SetPriorityGrouping>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001778:	f7ff ff42 	bl	8001600 <__NVIC_GetPriorityGrouping>
 800177c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	6978      	ldr	r0, [r7, #20]
 8001784:	f7ff ff90 	bl	80016a8 <NVIC_EncodePriority>
 8001788:	4602      	mov	r2, r0
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff5f 	bl	8001654 <__NVIC_SetPriority>
}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff35 	bl	800161c <__NVIC_EnableIRQ>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ffa2 	bl	800170c <SysTick_Config>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e043      	b.n	8001872 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b22      	ldr	r3, [pc, #136]	; (800187c <HAL_DMA_Init+0xa8>)
 80017f2:	4413      	add	r3, r2
 80017f4:	4a22      	ldr	r2, [pc, #136]	; (8001880 <HAL_DMA_Init+0xac>)
 80017f6:	fba2 2303 	umull	r2, r3, r2, r3
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	009a      	lsls	r2, r3, #2
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <HAL_DMA_Init+0xb0>)
 8001806:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2202      	movs	r2, #2
 800180c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800181e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001822:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800182c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001838:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001844:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	bffdfff8 	.word	0xbffdfff8
 8001880:	cccccccd 	.word	0xcccccccd
 8001884:	40020000 	.word	0x40020000

08001888 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800189a:	2b02      	cmp	r3, #2
 800189c:	d008      	beq.n	80018b0 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2204      	movs	r2, #4
 80018a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e020      	b.n	80018f2 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 020e 	bic.w	r2, r2, #14
 80018be:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0201 	bic.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d8:	2101      	movs	r1, #1
 80018da:	fa01 f202 	lsl.w	r2, r1, r2
 80018de:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800190e:	2b02      	cmp	r3, #2
 8001910:	d005      	beq.n	800191e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2204      	movs	r2, #4
 8001916:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e051      	b.n	80019c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 020e 	bic.w	r2, r2, #14
 800192c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0201 	bic.w	r2, r2, #1
 800193c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a22      	ldr	r2, [pc, #136]	; (80019cc <HAL_DMA_Abort_IT+0xd0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d029      	beq.n	800199c <HAL_DMA_Abort_IT+0xa0>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a20      	ldr	r2, [pc, #128]	; (80019d0 <HAL_DMA_Abort_IT+0xd4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d022      	beq.n	8001998 <HAL_DMA_Abort_IT+0x9c>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <HAL_DMA_Abort_IT+0xd8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d01a      	beq.n	8001992 <HAL_DMA_Abort_IT+0x96>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <HAL_DMA_Abort_IT+0xdc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d012      	beq.n	800198c <HAL_DMA_Abort_IT+0x90>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <HAL_DMA_Abort_IT+0xe0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d00a      	beq.n	8001986 <HAL_DMA_Abort_IT+0x8a>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1a      	ldr	r2, [pc, #104]	; (80019e0 <HAL_DMA_Abort_IT+0xe4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d102      	bne.n	8001980 <HAL_DMA_Abort_IT+0x84>
 800197a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800197e:	e00e      	b.n	800199e <HAL_DMA_Abort_IT+0xa2>
 8001980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001984:	e00b      	b.n	800199e <HAL_DMA_Abort_IT+0xa2>
 8001986:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800198a:	e008      	b.n	800199e <HAL_DMA_Abort_IT+0xa2>
 800198c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001990:	e005      	b.n	800199e <HAL_DMA_Abort_IT+0xa2>
 8001992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001996:	e002      	b.n	800199e <HAL_DMA_Abort_IT+0xa2>
 8001998:	2310      	movs	r3, #16
 800199a:	e000      	b.n	800199e <HAL_DMA_Abort_IT+0xa2>
 800199c:	2301      	movs	r3, #1
 800199e:	4a11      	ldr	r2, [pc, #68]	; (80019e4 <HAL_DMA_Abort_IT+0xe8>)
 80019a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	4798      	blx	r3
    } 
  }
  return status;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40020008 	.word	0x40020008
 80019d0:	4002001c 	.word	0x4002001c
 80019d4:	40020030 	.word	0x40020030
 80019d8:	40020044 	.word	0x40020044
 80019dc:	40020058 	.word	0x40020058
 80019e0:	4002006c 	.word	0x4002006c
 80019e4:	40020000 	.word	0x40020000

080019e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	2204      	movs	r2, #4
 8001a06:	409a      	lsls	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d04f      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0xc8>
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d04a      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0320 	and.w	r3, r3, #32
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d107      	bne.n	8001a38 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0204 	bic.w	r2, r2, #4
 8001a36:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a66      	ldr	r2, [pc, #408]	; (8001bd8 <HAL_DMA_IRQHandler+0x1f0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d029      	beq.n	8001a96 <HAL_DMA_IRQHandler+0xae>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a65      	ldr	r2, [pc, #404]	; (8001bdc <HAL_DMA_IRQHandler+0x1f4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d022      	beq.n	8001a92 <HAL_DMA_IRQHandler+0xaa>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a63      	ldr	r2, [pc, #396]	; (8001be0 <HAL_DMA_IRQHandler+0x1f8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d01a      	beq.n	8001a8c <HAL_DMA_IRQHandler+0xa4>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a62      	ldr	r2, [pc, #392]	; (8001be4 <HAL_DMA_IRQHandler+0x1fc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d012      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x9e>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a60      	ldr	r2, [pc, #384]	; (8001be8 <HAL_DMA_IRQHandler+0x200>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00a      	beq.n	8001a80 <HAL_DMA_IRQHandler+0x98>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a5f      	ldr	r2, [pc, #380]	; (8001bec <HAL_DMA_IRQHandler+0x204>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d102      	bne.n	8001a7a <HAL_DMA_IRQHandler+0x92>
 8001a74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a78:	e00e      	b.n	8001a98 <HAL_DMA_IRQHandler+0xb0>
 8001a7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a7e:	e00b      	b.n	8001a98 <HAL_DMA_IRQHandler+0xb0>
 8001a80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a84:	e008      	b.n	8001a98 <HAL_DMA_IRQHandler+0xb0>
 8001a86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a8a:	e005      	b.n	8001a98 <HAL_DMA_IRQHandler+0xb0>
 8001a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a90:	e002      	b.n	8001a98 <HAL_DMA_IRQHandler+0xb0>
 8001a92:	2340      	movs	r3, #64	; 0x40
 8001a94:	e000      	b.n	8001a98 <HAL_DMA_IRQHandler+0xb0>
 8001a96:	2304      	movs	r3, #4
 8001a98:	4a55      	ldr	r2, [pc, #340]	; (8001bf0 <HAL_DMA_IRQHandler+0x208>)
 8001a9a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 8094 	beq.w	8001bce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001aae:	e08e      	b.n	8001bce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d056      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x186>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d051      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10b      	bne.n	8001af0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 020a 	bic.w	r2, r2, #10
 8001ae6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a38      	ldr	r2, [pc, #224]	; (8001bd8 <HAL_DMA_IRQHandler+0x1f0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d029      	beq.n	8001b4e <HAL_DMA_IRQHandler+0x166>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a37      	ldr	r2, [pc, #220]	; (8001bdc <HAL_DMA_IRQHandler+0x1f4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d022      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x162>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a35      	ldr	r2, [pc, #212]	; (8001be0 <HAL_DMA_IRQHandler+0x1f8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01a      	beq.n	8001b44 <HAL_DMA_IRQHandler+0x15c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a34      	ldr	r2, [pc, #208]	; (8001be4 <HAL_DMA_IRQHandler+0x1fc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d012      	beq.n	8001b3e <HAL_DMA_IRQHandler+0x156>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a32      	ldr	r2, [pc, #200]	; (8001be8 <HAL_DMA_IRQHandler+0x200>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00a      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x150>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a31      	ldr	r2, [pc, #196]	; (8001bec <HAL_DMA_IRQHandler+0x204>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d102      	bne.n	8001b32 <HAL_DMA_IRQHandler+0x14a>
 8001b2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b30:	e00e      	b.n	8001b50 <HAL_DMA_IRQHandler+0x168>
 8001b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b36:	e00b      	b.n	8001b50 <HAL_DMA_IRQHandler+0x168>
 8001b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3c:	e008      	b.n	8001b50 <HAL_DMA_IRQHandler+0x168>
 8001b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b42:	e005      	b.n	8001b50 <HAL_DMA_IRQHandler+0x168>
 8001b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b48:	e002      	b.n	8001b50 <HAL_DMA_IRQHandler+0x168>
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	e000      	b.n	8001b50 <HAL_DMA_IRQHandler+0x168>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <HAL_DMA_IRQHandler+0x208>)
 8001b52:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d034      	beq.n	8001bce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b6c:	e02f      	b.n	8001bce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	2208      	movs	r2, #8
 8001b74:	409a      	lsls	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d028      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x1e8>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d023      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 020e 	bic.w	r2, r2, #14
 8001b96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	4798      	blx	r3
    }
  }
  return;
 8001bce:	bf00      	nop
 8001bd0:	bf00      	nop
}
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40020008 	.word	0x40020008
 8001bdc:	4002001c 	.word	0x4002001c
 8001be0:	40020030 	.word	0x40020030
 8001be4:	40020044 	.word	0x40020044
 8001be8:	40020058 	.word	0x40020058
 8001bec:	4002006c 	.word	0x4002006c
 8001bf0:	40020000 	.word	0x40020000

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b08b      	sub	sp, #44	; 0x2c
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c06:	e148      	b.n	8001e9a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	f040 8137 	bne.w	8001e94 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4aa3      	ldr	r2, [pc, #652]	; (8001eb8 <HAL_GPIO_Init+0x2c4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d05e      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
 8001c30:	4aa1      	ldr	r2, [pc, #644]	; (8001eb8 <HAL_GPIO_Init+0x2c4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d875      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c36:	4aa1      	ldr	r2, [pc, #644]	; (8001ebc <HAL_GPIO_Init+0x2c8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d058      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
 8001c3c:	4a9f      	ldr	r2, [pc, #636]	; (8001ebc <HAL_GPIO_Init+0x2c8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d86f      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c42:	4a9f      	ldr	r2, [pc, #636]	; (8001ec0 <HAL_GPIO_Init+0x2cc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d052      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
 8001c48:	4a9d      	ldr	r2, [pc, #628]	; (8001ec0 <HAL_GPIO_Init+0x2cc>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d869      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c4e:	4a9d      	ldr	r2, [pc, #628]	; (8001ec4 <HAL_GPIO_Init+0x2d0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d04c      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
 8001c54:	4a9b      	ldr	r2, [pc, #620]	; (8001ec4 <HAL_GPIO_Init+0x2d0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d863      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c5a:	4a9b      	ldr	r2, [pc, #620]	; (8001ec8 <HAL_GPIO_Init+0x2d4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d046      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
 8001c60:	4a99      	ldr	r2, [pc, #612]	; (8001ec8 <HAL_GPIO_Init+0x2d4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d85d      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c66:	2b12      	cmp	r3, #18
 8001c68:	d82a      	bhi.n	8001cc0 <HAL_GPIO_Init+0xcc>
 8001c6a:	2b12      	cmp	r3, #18
 8001c6c:	d859      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c6e:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <HAL_GPIO_Init+0x80>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001cef 	.word	0x08001cef
 8001c78:	08001cc9 	.word	0x08001cc9
 8001c7c:	08001cdb 	.word	0x08001cdb
 8001c80:	08001d1d 	.word	0x08001d1d
 8001c84:	08001d23 	.word	0x08001d23
 8001c88:	08001d23 	.word	0x08001d23
 8001c8c:	08001d23 	.word	0x08001d23
 8001c90:	08001d23 	.word	0x08001d23
 8001c94:	08001d23 	.word	0x08001d23
 8001c98:	08001d23 	.word	0x08001d23
 8001c9c:	08001d23 	.word	0x08001d23
 8001ca0:	08001d23 	.word	0x08001d23
 8001ca4:	08001d23 	.word	0x08001d23
 8001ca8:	08001d23 	.word	0x08001d23
 8001cac:	08001d23 	.word	0x08001d23
 8001cb0:	08001d23 	.word	0x08001d23
 8001cb4:	08001d23 	.word	0x08001d23
 8001cb8:	08001cd1 	.word	0x08001cd1
 8001cbc:	08001ce5 	.word	0x08001ce5
 8001cc0:	4a82      	ldr	r2, [pc, #520]	; (8001ecc <HAL_GPIO_Init+0x2d8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cc6:	e02c      	b.n	8001d22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e029      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	623b      	str	r3, [r7, #32]
          break;
 8001cd8:	e024      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	3308      	adds	r3, #8
 8001ce0:	623b      	str	r3, [r7, #32]
          break;
 8001ce2:	e01f      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	330c      	adds	r3, #12
 8001cea:	623b      	str	r3, [r7, #32]
          break;
 8001cec:	e01a      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	623b      	str	r3, [r7, #32]
          break;
 8001cfa:	e013      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d04:	2308      	movs	r3, #8
 8001d06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	611a      	str	r2, [r3, #16]
          break;
 8001d0e:	e009      	b.n	8001d24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d10:	2308      	movs	r3, #8
 8001d12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69fa      	ldr	r2, [r7, #28]
 8001d18:	615a      	str	r2, [r3, #20]
          break;
 8001d1a:	e003      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]
          break;
 8001d20:	e000      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          break;
 8001d22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2bff      	cmp	r3, #255	; 0xff
 8001d28:	d801      	bhi.n	8001d2e <HAL_GPIO_Init+0x13a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	e001      	b.n	8001d32 <HAL_GPIO_Init+0x13e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	2bff      	cmp	r3, #255	; 0xff
 8001d38:	d802      	bhi.n	8001d40 <HAL_GPIO_Init+0x14c>
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	e002      	b.n	8001d46 <HAL_GPIO_Init+0x152>
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	3b08      	subs	r3, #8
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	210f      	movs	r1, #15
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	401a      	ands	r2, r3
 8001d58:	6a39      	ldr	r1, [r7, #32]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	431a      	orrs	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8090 	beq.w	8001e94 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d74:	4b56      	ldr	r3, [pc, #344]	; (8001ed0 <HAL_GPIO_Init+0x2dc>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a55      	ldr	r2, [pc, #340]	; (8001ed0 <HAL_GPIO_Init+0x2dc>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <HAL_GPIO_Init+0x2dc>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d8c:	4a51      	ldr	r2, [pc, #324]	; (8001ed4 <HAL_GPIO_Init+0x2e0>)
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	3302      	adds	r3, #2
 8001d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	220f      	movs	r2, #15
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4013      	ands	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a49      	ldr	r2, [pc, #292]	; (8001ed8 <HAL_GPIO_Init+0x2e4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00d      	beq.n	8001dd4 <HAL_GPIO_Init+0x1e0>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a48      	ldr	r2, [pc, #288]	; (8001edc <HAL_GPIO_Init+0x2e8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d007      	beq.n	8001dd0 <HAL_GPIO_Init+0x1dc>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a47      	ldr	r2, [pc, #284]	; (8001ee0 <HAL_GPIO_Init+0x2ec>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_GPIO_Init+0x1d8>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e004      	b.n	8001dd6 <HAL_GPIO_Init+0x1e2>
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x1e2>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_GPIO_Init+0x1e2>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd8:	f002 0203 	and.w	r2, r2, #3
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	4093      	lsls	r3, r2
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001de6:	493b      	ldr	r1, [pc, #236]	; (8001ed4 <HAL_GPIO_Init+0x2e0>)
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e00:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4937      	ldr	r1, [pc, #220]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e0e:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	4933      	ldr	r1, [pc, #204]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e28:	4b2e      	ldr	r3, [pc, #184]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	492d      	ldr	r1, [pc, #180]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e36:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	4929      	ldr	r1, [pc, #164]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e50:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	4923      	ldr	r1, [pc, #140]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	608b      	str	r3, [r1, #8]
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	491f      	ldr	r1, [pc, #124]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d006      	beq.n	8001e86 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	4919      	ldr	r1, [pc, #100]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60cb      	str	r3, [r1, #12]
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4915      	ldr	r1, [pc, #84]	; (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	3301      	adds	r3, #1
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f47f aeaf 	bne.w	8001c08 <HAL_GPIO_Init+0x14>
  }
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	372c      	adds	r7, #44	; 0x2c
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	10320000 	.word	0x10320000
 8001ebc:	10310000 	.word	0x10310000
 8001ec0:	10220000 	.word	0x10220000
 8001ec4:	10210000 	.word	0x10210000
 8001ec8:	10120000 	.word	0x10120000
 8001ecc:	10110000 	.word	0x10110000
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	40010800 	.word	0x40010800
 8001edc:	40010c00 	.word	0x40010c00
 8001ee0:	40011000 	.word	0x40011000
 8001ee4:	40010400 	.word	0x40010400

08001ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ef8:	787b      	ldrb	r3, [r7, #1]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efe:	887a      	ldrh	r2, [r7, #2]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f04:	e003      	b.n	8001f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f06:	887b      	ldrh	r3, [r7, #2]
 8001f08:	041a      	lsls	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	611a      	str	r2, [r3, #16]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f24:	695a      	ldr	r2, [r3, #20]
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d006      	beq.n	8001f3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe f9a2 	bl	8000280 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40010400 	.word	0x40010400

08001f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e26c      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8087 	beq.w	8002076 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f68:	4b92      	ldr	r3, [pc, #584]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d00c      	beq.n	8001f8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f74:	4b8f      	ldr	r3, [pc, #572]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d112      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x5e>
 8001f80:	4b8c      	ldr	r3, [pc, #560]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8c:	d10b      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8e:	4b89      	ldr	r3, [pc, #548]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d06c      	beq.n	8002074 <HAL_RCC_OscConfig+0x12c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d168      	bne.n	8002074 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e246      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fae:	d106      	bne.n	8001fbe <HAL_RCC_OscConfig+0x76>
 8001fb0:	4b80      	ldr	r3, [pc, #512]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a7f      	ldr	r2, [pc, #508]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	e02e      	b.n	800201c <HAL_RCC_OscConfig+0xd4>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x98>
 8001fc6:	4b7b      	ldr	r3, [pc, #492]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a7a      	ldr	r2, [pc, #488]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b78      	ldr	r3, [pc, #480]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a77      	ldr	r2, [pc, #476]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e01d      	b.n	800201c <HAL_RCC_OscConfig+0xd4>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0xbc>
 8001fea:	4b72      	ldr	r3, [pc, #456]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a71      	ldr	r2, [pc, #452]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b6f      	ldr	r3, [pc, #444]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a6e      	ldr	r2, [pc, #440]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e00b      	b.n	800201c <HAL_RCC_OscConfig+0xd4>
 8002004:	4b6b      	ldr	r3, [pc, #428]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a6a      	ldr	r2, [pc, #424]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 800200a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b68      	ldr	r3, [pc, #416]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a67      	ldr	r2, [pc, #412]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800201a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d013      	beq.n	800204c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7ff fa9a 	bl	800155c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202c:	f7ff fa96 	bl	800155c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	; 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1fa      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	4b5d      	ldr	r3, [pc, #372]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0xe4>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff fa86 	bl	800155c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002054:	f7ff fa82 	bl	800155c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	; 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e1e6      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002066:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x10c>
 8002072:	e000      	b.n	8002076 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d063      	beq.n	800214a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002082:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800208e:	4b49      	ldr	r3, [pc, #292]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b08      	cmp	r3, #8
 8002098:	d11c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x18c>
 800209a:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d116      	bne.n	80020d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a6:	4b43      	ldr	r3, [pc, #268]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x176>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d001      	beq.n	80020be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e1ba      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020be:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4939      	ldr	r1, [pc, #228]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d2:	e03a      	b.n	800214a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d020      	beq.n	800211e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020dc:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7ff fa3b 	bl	800155c <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ea:	f7ff fa37 	bl	800155c <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e19b      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fc:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002108:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4927      	ldr	r1, [pc, #156]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]
 800211c:	e015      	b.n	800214a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff fa1a 	bl	800155c <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212c:	f7ff fa16 	bl	800155c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e17a      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d03a      	beq.n	80021cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d019      	beq.n	8002192 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7ff f9fa 	bl	800155c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216c:	f7ff f9f6 	bl	800155c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e15a      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800218a:	2001      	movs	r0, #1
 800218c:	f000 fad8 	bl	8002740 <RCC_Delay>
 8002190:	e01c      	b.n	80021cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_RCC_OscConfig+0x274>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7ff f9e0 	bl	800155c <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219e:	e00f      	b.n	80021c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a0:	f7ff f9dc 	bl	800155c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d908      	bls.n	80021c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e140      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	42420000 	.word	0x42420000
 80021bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	4b9e      	ldr	r3, [pc, #632]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e9      	bne.n	80021a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80a6 	beq.w	8002326 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021de:	4b97      	ldr	r3, [pc, #604]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10d      	bne.n	8002206 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	4b94      	ldr	r3, [pc, #592]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a93      	ldr	r2, [pc, #588]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f4:	61d3      	str	r3, [r2, #28]
 80021f6:	4b91      	ldr	r3, [pc, #580]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002202:	2301      	movs	r3, #1
 8002204:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b8e      	ldr	r3, [pc, #568]	; (8002440 <HAL_RCC_OscConfig+0x4f8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d118      	bne.n	8002244 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002212:	4b8b      	ldr	r3, [pc, #556]	; (8002440 <HAL_RCC_OscConfig+0x4f8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a8a      	ldr	r2, [pc, #552]	; (8002440 <HAL_RCC_OscConfig+0x4f8>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221e:	f7ff f99d 	bl	800155c <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002226:	f7ff f999 	bl	800155c <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b64      	cmp	r3, #100	; 0x64
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0fd      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	4b81      	ldr	r3, [pc, #516]	; (8002440 <HAL_RCC_OscConfig+0x4f8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x312>
 800224c:	4b7b      	ldr	r3, [pc, #492]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4a7a      	ldr	r2, [pc, #488]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6213      	str	r3, [r2, #32]
 8002258:	e02d      	b.n	80022b6 <HAL_RCC_OscConfig+0x36e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x334>
 8002262:	4b76      	ldr	r3, [pc, #472]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4a75      	ldr	r2, [pc, #468]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	6213      	str	r3, [r2, #32]
 800226e:	4b73      	ldr	r3, [pc, #460]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a72      	ldr	r2, [pc, #456]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	6213      	str	r3, [r2, #32]
 800227a:	e01c      	b.n	80022b6 <HAL_RCC_OscConfig+0x36e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b05      	cmp	r3, #5
 8002282:	d10c      	bne.n	800229e <HAL_RCC_OscConfig+0x356>
 8002284:	4b6d      	ldr	r3, [pc, #436]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4a6c      	ldr	r2, [pc, #432]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 800228a:	f043 0304 	orr.w	r3, r3, #4
 800228e:	6213      	str	r3, [r2, #32]
 8002290:	4b6a      	ldr	r3, [pc, #424]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4a69      	ldr	r2, [pc, #420]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6213      	str	r3, [r2, #32]
 800229c:	e00b      	b.n	80022b6 <HAL_RCC_OscConfig+0x36e>
 800229e:	4b67      	ldr	r3, [pc, #412]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a66      	ldr	r2, [pc, #408]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	6213      	str	r3, [r2, #32]
 80022aa:	4b64      	ldr	r3, [pc, #400]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4a63      	ldr	r2, [pc, #396]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d015      	beq.n	80022ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022be:	f7ff f94d 	bl	800155c <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7ff f949 	bl	800155c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e0ab      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022dc:	4b57      	ldr	r3, [pc, #348]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ee      	beq.n	80022c6 <HAL_RCC_OscConfig+0x37e>
 80022e8:	e014      	b.n	8002314 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7ff f937 	bl	800155c <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7ff f933 	bl	800155c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e095      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002308:	4b4c      	ldr	r3, [pc, #304]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ee      	bne.n	80022f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d105      	bne.n	8002326 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231a:	4b48      	ldr	r3, [pc, #288]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	4a47      	ldr	r2, [pc, #284]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002324:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8081 	beq.w	8002432 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002330:	4b42      	ldr	r3, [pc, #264]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b08      	cmp	r3, #8
 800233a:	d061      	beq.n	8002400 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d146      	bne.n	80023d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002344:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <HAL_RCC_OscConfig+0x4fc>)
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7ff f907 	bl	800155c <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002352:	f7ff f903 	bl	800155c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e067      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002364:	4b35      	ldr	r3, [pc, #212]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f0      	bne.n	8002352 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002378:	d108      	bne.n	800238c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800237a:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	492d      	ldr	r1, [pc, #180]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a19      	ldr	r1, [r3, #32]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	430b      	orrs	r3, r1
 800239e:	4927      	ldr	r1, [pc, #156]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a4:	4b27      	ldr	r3, [pc, #156]	; (8002444 <HAL_RCC_OscConfig+0x4fc>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7ff f8d7 	bl	800155c <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b2:	f7ff f8d3 	bl	800155c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e037      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x46a>
 80023d0:	e02f      	b.n	8002432 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <HAL_RCC_OscConfig+0x4fc>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7ff f8c0 	bl	800155c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e0:	f7ff f8bc 	bl	800155c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e020      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x498>
 80023fe:	e018      	b.n	8002432 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e013      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_OscConfig+0x4f4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	429a      	cmp	r2, r3
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	40007000 	.word	0x40007000
 8002444:	42420060 	.word	0x42420060

08002448 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0d0      	b.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800245c:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d910      	bls.n	800248c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b67      	ldr	r3, [pc, #412]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 0207 	bic.w	r2, r3, #7
 8002472:	4965      	ldr	r1, [pc, #404]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b63      	ldr	r3, [pc, #396]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0b8      	b.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a4:	4b59      	ldr	r3, [pc, #356]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4a58      	ldr	r2, [pc, #352]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024bc:	4b53      	ldr	r3, [pc, #332]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4a52      	ldr	r2, [pc, #328]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c8:	4b50      	ldr	r3, [pc, #320]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	494d      	ldr	r1, [pc, #308]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d040      	beq.n	8002568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d107      	bne.n	80024fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b47      	ldr	r3, [pc, #284]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d115      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e07f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d107      	bne.n	8002516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002506:	4b41      	ldr	r3, [pc, #260]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e073      	b.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002516:	4b3d      	ldr	r3, [pc, #244]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e06b      	b.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002526:	4b39      	ldr	r3, [pc, #228]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f023 0203 	bic.w	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4936      	ldr	r1, [pc, #216]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002538:	f7ff f810 	bl	800155c <HAL_GetTick>
 800253c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253e:	e00a      	b.n	8002556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002540:	f7ff f80c 	bl	800155c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	; 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e053      	b.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002556:	4b2d      	ldr	r3, [pc, #180]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 020c 	and.w	r2, r3, #12
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	429a      	cmp	r2, r3
 8002566:	d1eb      	bne.n	8002540 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d210      	bcs.n	8002598 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b24      	ldr	r3, [pc, #144]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 0207 	bic.w	r2, r3, #7
 800257e:	4922      	ldr	r1, [pc, #136]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e032      	b.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4916      	ldr	r1, [pc, #88]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	490e      	ldr	r1, [pc, #56]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025d6:	f000 f821 	bl	800261c <HAL_RCC_GetSysClockFreq>
 80025da:	4602      	mov	r2, r0
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	490a      	ldr	r1, [pc, #40]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025e8:	5ccb      	ldrb	r3, [r1, r3]
 80025ea:	fa22 f303 	lsr.w	r3, r2, r3
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <HAL_RCC_ClockConfig+0x1cc>)
 80025f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCC_ClockConfig+0x1d0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe ff6e 	bl	80014d8 <HAL_InitTick>

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40022000 	.word	0x40022000
 800260c:	40021000 	.word	0x40021000
 8002610:	08003338 	.word	0x08003338
 8002614:	20000000 	.word	0x20000000
 8002618:	20000004 	.word	0x20000004

0800261c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800261c:	b490      	push	{r4, r7}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002622:	4b2a      	ldr	r3, [pc, #168]	; (80026cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002624:	1d3c      	adds	r4, r7, #4
 8002626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800262c:	f240 2301 	movw	r3, #513	; 0x201
 8002630:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	2300      	movs	r3, #0
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b04      	cmp	r3, #4
 8002654:	d002      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x40>
 8002656:	2b08      	cmp	r3, #8
 8002658:	d003      	beq.n	8002662 <HAL_RCC_GetSysClockFreq+0x46>
 800265a:	e02d      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800265c:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800265e:	623b      	str	r3, [r7, #32]
      break;
 8002660:	e02d      	b.n	80026be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	0c9b      	lsrs	r3, r3, #18
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800266e:	4413      	add	r3, r2
 8002670:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002674:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d013      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002680:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	0c5b      	lsrs	r3, r3, #17
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800268e:	4413      	add	r3, r2
 8002690:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002694:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	4a0e      	ldr	r2, [pc, #56]	; (80026d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800269a:	fb02 f203 	mul.w	r2, r2, r3
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
 80026a6:	e004      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026ac:	fb02 f303 	mul.w	r3, r2, r3
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	623b      	str	r3, [r7, #32]
      break;
 80026b6:	e002      	b.n	80026be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ba:	623b      	str	r3, [r7, #32]
      break;
 80026bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026be:	6a3b      	ldr	r3, [r7, #32]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3728      	adds	r7, #40	; 0x28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc90      	pop	{r4, r7}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	080030d8 	.word	0x080030d8
 80026d0:	40021000 	.word	0x40021000
 80026d4:	007a1200 	.word	0x007a1200
 80026d8:	003d0900 	.word	0x003d0900

080026dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e0:	4b02      	ldr	r3, [pc, #8]	; (80026ec <HAL_RCC_GetHCLKFreq+0x10>)
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	20000000 	.word	0x20000000

080026f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026f4:	f7ff fff2 	bl	80026dc <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	0a1b      	lsrs	r3, r3, #8
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4903      	ldr	r1, [pc, #12]	; (8002714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000
 8002714:	08003348 	.word	0x08003348

08002718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800271c:	f7ff ffde 	bl	80026dc <HAL_RCC_GetHCLKFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	0adb      	lsrs	r3, r3, #11
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4903      	ldr	r1, [pc, #12]	; (800273c <HAL_RCC_GetPCLK2Freq+0x24>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	08003348 	.word	0x08003348

08002740 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <RCC_Delay+0x34>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <RCC_Delay+0x38>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0a5b      	lsrs	r3, r3, #9
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800275c:	bf00      	nop
  }
  while (Delay --);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1e5a      	subs	r2, r3, #1
 8002762:	60fa      	str	r2, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f9      	bne.n	800275c <RCC_Delay+0x1c>
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	20000000 	.word	0x20000000
 8002778:	10624dd3 	.word	0x10624dd3

0800277c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e076      	b.n	800287c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	2b00      	cmp	r3, #0
 8002794:	d108      	bne.n	80027a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800279e:	d009      	beq.n	80027b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	61da      	str	r2, [r3, #28]
 80027a6:	e005      	b.n	80027b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe fc98 	bl	8001104 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002838:	ea42 0103 	orr.w	r1, r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	0c1a      	lsrs	r2, r3, #16
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f002 0204 	and.w	r2, r2, #4
 800285a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800286a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e03f      	b.n	8002916 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fd62 	bl	8001374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2224      	movs	r2, #36	; 0x24
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fb3f 	bl	8002f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10d      	bne.n	8002972 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_UART_IRQHandler+0x52>
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fa44 	bl	8002df8 <UART_Receive_IT>
      return;
 8002970:	e17b      	b.n	8002c6a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80b1 	beq.w	8002adc <HAL_UART_IRQHandler+0x1bc>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_UART_IRQHandler+0x70>
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80a6 	beq.w	8002adc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_UART_IRQHandler+0x90>
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f043 0201 	orr.w	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_UART_IRQHandler+0xb0>
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f043 0202 	orr.w	r2, r3, #2
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_UART_IRQHandler+0xd0>
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f043 0204 	orr.w	r2, r3, #4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00f      	beq.n	8002a1a <HAL_UART_IRQHandler+0xfa>
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0xee>
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f043 0208 	orr.w	r2, r3, #8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 811e 	beq.w	8002c60 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_UART_IRQHandler+0x11e>
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f9dd 	bl	8002df8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf14      	ite	ne
 8002a4c:	2301      	movne	r3, #1
 8002a4e:	2300      	moveq	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <HAL_UART_IRQHandler+0x146>
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d031      	beq.n	8002aca <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f91f 	bl	8002caa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d023      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695a      	ldr	r2, [r3, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a88:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d013      	beq.n	8002aba <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	4a76      	ldr	r2, [pc, #472]	; (8002c70 <HAL_UART_IRQHandler+0x350>)
 8002a98:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe ff2c 	bl	80018fc <HAL_DMA_Abort_IT>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab8:	e00e      	b.n	8002ad8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8ec 	bl	8002c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac0:	e00a      	b.n	8002ad8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8e8 	bl	8002c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac8:	e006      	b.n	8002ad8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f8e4 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002ad6:	e0c3      	b.n	8002c60 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad8:	bf00      	nop
    return;
 8002ada:	e0c1      	b.n	8002c60 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	f040 80a1 	bne.w	8002c28 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 809b 	beq.w	8002c28 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8095 	beq.w	8002c28 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d04e      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002b2c:	8a3b      	ldrh	r3, [r7, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8098 	beq.w	8002c64 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b38:	8a3a      	ldrh	r2, [r7, #16]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	f080 8092 	bcs.w	8002c64 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	8a3a      	ldrh	r2, [r7, #16]
 8002b44:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d02b      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b5e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b7e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0210 	bic.w	r2, r2, #16
 8002b9c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fe70 	bl	8001888 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7fe f9d7 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002bbe:	e051      	b.n	8002c64 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d047      	beq.n	8002c68 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002bd8:	8a7b      	ldrh	r3, [r7, #18]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d044      	beq.n	8002c68 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002bec:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0201 	bic.w	r2, r2, #1
 8002bfc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0210 	bic.w	r2, r2, #16
 8002c1a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c1c:	8a7b      	ldrh	r3, [r7, #18]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fe f9a3 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c26:	e01f      	b.n	8002c68 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_UART_IRQHandler+0x324>
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f874 	bl	8002d2a <UART_Transmit_IT>
    return;
 8002c42:	e012      	b.n	8002c6a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00d      	beq.n	8002c6a <HAL_UART_IRQHandler+0x34a>
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f8b5 	bl	8002dc8 <UART_EndTransmit_IT>
    return;
 8002c5e:	e004      	b.n	8002c6a <HAL_UART_IRQHandler+0x34a>
    return;
 8002c60:	bf00      	nop
 8002c62:	e002      	b.n	8002c6a <HAL_UART_IRQHandler+0x34a>
      return;
 8002c64:	bf00      	nop
 8002c66:	e000      	b.n	8002c6a <HAL_UART_IRQHandler+0x34a>
      return;
 8002c68:	bf00      	nop
  }
}
 8002c6a:	3728      	adds	r7, #40	; 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	08002d03 	.word	0x08002d03

08002c74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002cc0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d107      	bne.n	8002cea <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0210 	bic.w	r2, r2, #16
 8002ce8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f7ff ffbb 	bl	8002c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b21      	cmp	r3, #33	; 0x21
 8002d3c:	d13e      	bne.n	8002dbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d46:	d114      	bne.n	8002d72 <UART_Transmit_IT+0x48>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d110      	bne.n	8002d72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	1c9a      	adds	r2, r3, #2
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	621a      	str	r2, [r3, #32]
 8002d70:	e008      	b.n	8002d84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	1c59      	adds	r1, r3, #1
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6211      	str	r1, [r2, #32]
 8002d7c:	781a      	ldrb	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4619      	mov	r1, r3
 8002d92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10f      	bne.n	8002db8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002da6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e000      	b.n	8002dbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
  }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dde:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff ff43 	bl	8002c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b22      	cmp	r3, #34	; 0x22
 8002e0a:	f040 8099 	bne.w	8002f40 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e16:	d117      	bne.n	8002e48 <UART_Receive_IT+0x50>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d113      	bne.n	8002e48 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	1c9a      	adds	r2, r3, #2
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	629a      	str	r2, [r3, #40]	; 0x28
 8002e46:	e026      	b.n	8002e96 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5a:	d007      	beq.n	8002e6c <UART_Receive_IT+0x74>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <UART_Receive_IT+0x82>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d106      	bne.n	8002e7a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	e008      	b.n	8002e8c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d148      	bne.n	8002f3c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0220 	bic.w	r2, r2, #32
 8002eb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d123      	bne.n	8002f32 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0210 	bic.w	r2, r2, #16
 8002efe:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d10a      	bne.n	8002f24 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f28:	4619      	mov	r1, r3
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe f81e 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
 8002f30:	e002      	b.n	8002f38 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff fea7 	bl	8002c86 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e002      	b.n	8002f42 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e000      	b.n	8002f42 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f86:	f023 030c 	bic.w	r3, r3, #12
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a2c      	ldr	r2, [pc, #176]	; (8003060 <UART_SetConfig+0x114>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d103      	bne.n	8002fbc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fb4:	f7ff fbb0 	bl	8002718 <HAL_RCC_GetPCLK2Freq>
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	e002      	b.n	8002fc2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fbc:	f7ff fb98 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 8002fc0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	009a      	lsls	r2, r3, #2
 8002fcc:	441a      	add	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd8:	4a22      	ldr	r2, [pc, #136]	; (8003064 <UART_SetConfig+0x118>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	0119      	lsls	r1, r3, #4
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	009a      	lsls	r2, r3, #2
 8002fec:	441a      	add	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff8:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <UART_SetConfig+0x118>)
 8002ffa:	fba3 0302 	umull	r0, r3, r3, r2
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2064      	movs	r0, #100	; 0x64
 8003002:	fb00 f303 	mul.w	r3, r0, r3
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	3332      	adds	r3, #50	; 0x32
 800300c:	4a15      	ldr	r2, [pc, #84]	; (8003064 <UART_SetConfig+0x118>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003018:	4419      	add	r1, r3
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	009a      	lsls	r2, r3, #2
 8003024:	441a      	add	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <UART_SetConfig+0x118>)
 8003032:	fba3 0302 	umull	r0, r3, r3, r2
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2064      	movs	r0, #100	; 0x64
 800303a:	fb00 f303 	mul.w	r3, r0, r3
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	3332      	adds	r3, #50	; 0x32
 8003044:	4a07      	ldr	r2, [pc, #28]	; (8003064 <UART_SetConfig+0x118>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	f003 020f 	and.w	r2, r3, #15
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	440a      	add	r2, r1
 8003056:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40013800 	.word	0x40013800
 8003064:	51eb851f 	.word	0x51eb851f

08003068 <__libc_init_array>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	2600      	movs	r6, #0
 800306c:	4d0c      	ldr	r5, [pc, #48]	; (80030a0 <__libc_init_array+0x38>)
 800306e:	4c0d      	ldr	r4, [pc, #52]	; (80030a4 <__libc_init_array+0x3c>)
 8003070:	1b64      	subs	r4, r4, r5
 8003072:	10a4      	asrs	r4, r4, #2
 8003074:	42a6      	cmp	r6, r4
 8003076:	d109      	bne.n	800308c <__libc_init_array+0x24>
 8003078:	f000 f822 	bl	80030c0 <_init>
 800307c:	2600      	movs	r6, #0
 800307e:	4d0a      	ldr	r5, [pc, #40]	; (80030a8 <__libc_init_array+0x40>)
 8003080:	4c0a      	ldr	r4, [pc, #40]	; (80030ac <__libc_init_array+0x44>)
 8003082:	1b64      	subs	r4, r4, r5
 8003084:	10a4      	asrs	r4, r4, #2
 8003086:	42a6      	cmp	r6, r4
 8003088:	d105      	bne.n	8003096 <__libc_init_array+0x2e>
 800308a:	bd70      	pop	{r4, r5, r6, pc}
 800308c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003090:	4798      	blx	r3
 8003092:	3601      	adds	r6, #1
 8003094:	e7ee      	b.n	8003074 <__libc_init_array+0xc>
 8003096:	f855 3b04 	ldr.w	r3, [r5], #4
 800309a:	4798      	blx	r3
 800309c:	3601      	adds	r6, #1
 800309e:	e7f2      	b.n	8003086 <__libc_init_array+0x1e>
 80030a0:	08003350 	.word	0x08003350
 80030a4:	08003350 	.word	0x08003350
 80030a8:	08003350 	.word	0x08003350
 80030ac:	08003354 	.word	0x08003354

080030b0 <memset>:
 80030b0:	4603      	mov	r3, r0
 80030b2:	4402      	add	r2, r0
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d100      	bne.n	80030ba <memset+0xa>
 80030b8:	4770      	bx	lr
 80030ba:	f803 1b01 	strb.w	r1, [r3], #1
 80030be:	e7f9      	b.n	80030b4 <memset+0x4>

080030c0 <_init>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	bf00      	nop
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr

080030cc <_fini>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr
